
registers:	file format elf32-littlearm

Disassembly of section .text:

08000194 <Reset>:
; pub unsafe extern "C" fn Reset() -> ! {
 8000194:      	push	{r7, lr}
 8000196:      	mov	r7, sp
;     __pre_init();
 8000198:      	bl	0x8001506 <__pre_init>  @ imm = #0x136a
 800019c:      	b	0x800019e <Reset+0xa>   @ imm = #-0x2
;     r0::zero_bss(&mut __sbss, &mut __ebss);
 800019e:      	movw	r0, #0x0
 80001a2:      	movt	r0, #0x2000
 80001a6:      	movw	r1, #0x4
 80001aa:      	movt	r1, #0x2000
 80001ae:      	bl	0x8001594 <r0::zero_bss::ha4adf96a20249341> @ imm = #0x13e2
 80001b2:      	b	0x80001b4 <Reset+0x20>  @ imm = #-0x2
;     r0::init_data(&mut __sdata, &mut __edata, &__sidata);
 80001b4:      	movw	r0, #0x0
 80001b8:      	movt	r0, #0x2000
 80001bc:      	movw	r1, #0x0
 80001c0:      	movt	r1, #0x2000
 80001c4:      	movw	r2, #0x3788
 80001c8:      	movt	r2, #0x800
 80001cc:      	bl	0x80015e4 <r0::init_data::h919b81018fbec209> @ imm = #0x1414
 80001d0:      	b	0x80001d2 <Reset+0x3e>  @ imm = #-0x2
 80001d2:      	movw	r0, #0xed88
 80001d6:      	movt	r0, #0xe000
;                 *SCB_CPACR | SCB_CPACR_FPU_ENABLE | SCB_CPACR_FPU_USER,
 80001da:      	ldr	r1, [r0]
 80001dc:      	orr	r1, r1, #0xf00000
;             core::ptr::write_volatile(
 80001e0:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x1366
 80001e4:      	b	0x80001e6 <Reset+0x52>  @ imm = #-0x2
;             trampoline()
 80001e6:      	bl	0x80014e4 <ResetTrampoline> @ imm = #0x12fa
 80001ea:      	trap

080001ec <main>:
; #[entry]
 80001ec:      	push	{r7, lr}
 80001ee:      	mov	r7, sp
 80001f0:      	bl	0x80001f6 <registers::__cortex_m_rt_main::h5a13c8200ce285e5> @ imm = #0x2
 80001f4:      	trap

080001f6 <registers::__cortex_m_rt_main::h5a13c8200ce285e5>:
; fn main() -> ! {
 80001f6:      	push	{r7, lr}
 80001f8:      	mov	r7, sp
;     aux7::init();
 80001fa:      	bl	0x800023c <aux7::init::hf235d2915ceaa5dc> @ imm = #0x3e
 80001fe:      	b	0x8000200 <registers::__cortex_m_rt_main::h5a13c8200ce285e5+0xa> @ imm = #-0x2
;         *(GPIOE_BSRR as *mut u32) = 1 << 9;
 8000200:      	movw	r0, #0x3118
 8000204:      	movt	r0, #0x800
 8000208:      	ldr	r0, [r0]
 800020a:      	movw	r1, #0x1018
 800020e:      	movt	r1, #0x4800
 8000212:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << 11;
 8000214:      	movw	r0, #0x3120
 8000218:      	movt	r0, #0x800
 800021c:      	ldr	r0, [r0]
 800021e:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << (9 + 16);
 8000220:      	movw	r0, #0x3128
 8000224:      	movt	r0, #0x800
 8000228:      	ldr	r0, [r0]
 800022a:      	str	r0, [r1]
;         *(GPIOE_BSRR as *mut u32) = 1 << (11 + 16);
 800022c:      	movw	r0, #0x3110
 8000230:      	movt	r0, #0x800
 8000234:      	ldr	r0, [r0]
 8000236:      	str	r0, [r1]
;     loop {}
 8000238:      	b	0x800023a <registers::__cortex_m_rt_main::h5a13c8200ce285e5+0x44> @ imm = #-0x2
 800023a:      	b	0x800023a <registers::__cortex_m_rt_main::h5a13c8200ce285e5+0x44> @ imm = #-0x4

0800023c <aux7::init::hf235d2915ceaa5dc>:
; pub fn init() -> (ITM, &'static RegisterBlock) {
 800023c:      	push	{r7, lr}
 800023e:      	mov	r7, sp
 8000240:      	sub	sp, #0x58
;     let device_periphs = stm32::Peripherals::take().unwrap();
 8000242:      	bl	0x80002b2 <stm32f3::stm32f303::Peripherals::take::h7d73b3f9bb67f150> @ imm = #0x6c
 8000246:      	str	r0, [sp, #0x8]
 8000248:      	b	0x800024a <aux7::init::hf235d2915ceaa5dc+0xe> @ imm = #-0x2
 800024a:      	ldr	r0, [sp, #0x8]
 800024c:      	and	r0, r0, #0x1
 8000250:      	movw	r1, #0x3158
 8000254:      	movt	r1, #0x800
 8000258:      	bl	0x80006b2 <core::option::Option<T>::unwrap::h9e39506e1ba8a390> @ imm = #0x456
 800025c:      	b	0x800025e <aux7::init::hf235d2915ceaa5dc+0x22> @ imm = #-0x2
 800025e:      	add	r0, sp, #0x10
;     let mut reset_and_clock_control = device_periphs.RCC.constrain();
 8000260:      	bl	0x80013f6 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::hc7c64c876e6bbb17> @ imm = #0x1192
 8000264:      	b	0x8000266 <aux7::init::hf235d2915ceaa5dc+0x2a> @ imm = #-0x2
 8000266:      	add	r0, sp, #0x10
;     let mut gpioe = device_periphs.GPIOE.split(&mut reset_and_clock_control.ahb);
 8000268:      	bl	0x800141e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hc314f1d1abfee0fbE> @ imm = #0x11b2
 800026c:      	b	0x800026e <aux7::init::hf235d2915ceaa5dc+0x32> @ imm = #-0x2
 800026e:      	add	r1, sp, #0x3c
;     let _leds = Leds::new(
 8000270:      	mov	r0, r1
 8000272:      	bl	0x80004de <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d> @ imm = #0x268
 8000276:      	str	r1, [sp, #0x54]
 8000278:      	str	r0, [sp, #0x50]
 800027a:      	ldr	r0, [sp, #0x50]
 800027c:      	ldr	r1, [sp, #0x54]
 800027e:      	str	r1, [sp, #0x44]
 8000280:      	str	r0, [sp, #0x40]
 8000282:      	b	0x8000284 <aux7::init::hf235d2915ceaa5dc+0x48> @ imm = #-0x2
;     let core_periphs = cortex_m::Peripherals::take().unwrap();
 8000284:      	bl	0x80011d4 <cortex_m::peripheral::Peripherals::take::hcbcfe4bf89336bde> @ imm = #0xf4c
 8000288:      	str	r0, [sp, #0x4]
 800028a:      	b	0x800028c <aux7::init::hf235d2915ceaa5dc+0x50> @ imm = #-0x2
 800028c:      	ldr	r0, [sp, #0x4]
 800028e:      	and	r0, r0, #0x1
 8000292:      	movw	r1, #0x3168
 8000296:      	movt	r1, #0x800
 800029a:      	bl	0x8000682 <core::option::Option<T>::unwrap::h0a18ee95a782c10b> @ imm = #0x3e4
 800029e:      	b	0x80002a0 <aux7::init::hf235d2915ceaa5dc+0x64> @ imm = #-0x2
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 80002a0:      	b	0x80002a2 <aux7::init::hf235d2915ceaa5dc+0x66> @ imm = #-0x2
 80002a2:      	movw	r0, #0x1000
 80002a6:      	movt	r0, #0x4800
;     (core_periphs.ITM, unsafe { &*stm32f303::GPIOE::ptr() })
 80002aa:      	str	r0, [sp, #0xc]
; }
 80002ac:      	ldr	r0, [sp, #0xc]
 80002ae:      	add	sp, #0x58
 80002b0:      	pop	{r7, pc}

080002b2 <stm32f3::stm32f303::Peripherals::take::h7d73b3f9bb67f150>:
;     pub fn take() -> Option<Self> {
 80002b2:      	push	{r7, lr}
 80002b4:      	mov	r7, sp
 80002b6:      	sub	sp, #0x8
;         cortex_m::interrupt::free(|_| {
 80002b8:      	bl	0x8000332 <cortex_m::interrupt::free::h98ff9d15e18c393c> @ imm = #0x76
 80002bc:      	str	r0, [sp, #0x4]
 80002be:      	b	0x80002c0 <stm32f3::stm32f303::Peripherals::take::h7d73b3f9bb67f150+0xe> @ imm = #-0x2
;     }
 80002c0:      	ldr	r0, [sp, #0x4]
 80002c2:      	and	r0, r0, #0x1
 80002c6:      	add	sp, #0x8
 80002c8:      	pop	{r7, pc}

080002ca <stm32f3::stm32f303::Peripherals::steal::h8e17162bbfbf6acb>:
;         DEVICE_PERIPHERALS = true;
 80002ca:      	movw	r1, #0x0
 80002ce:      	movt	r1, #0x2000
 80002d2:      	movs	r0, #0x1
 80002d4:      	strb	r0, [r1]
;     }
 80002d6:      	bx	lr

080002d8 <cortex_m::interrupt::free::h06692d10e85fc913>:
; pub fn free<F, R>(f: F) -> R
 80002d8:      	push	{r7, lr}
 80002da:      	mov	r7, sp
 80002dc:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 80002de:      	bl	0x8000412 <cortex_m::register::primask::read::hb6504e29367c5b47> @ imm = #0x130
 80002e2:      	mov	r1, r0
 80002e4:      	str	r1, [sp, #0x8]
 80002e6:      	strb	r0, [r7, #-2]
 80002ea:      	b	0x80002ec <cortex_m::interrupt::free::h06692d10e85fc913+0x14> @ imm = #-0x2
;     disable();
 80002ec:      	bl	0x8001240 <cortex_m::interrupt::disable::hb517683cd27cee1f> @ imm = #0xf50
 80002f0:      	b	0x80002f2 <cortex_m::interrupt::free::h06692d10e85fc913+0x1a> @ imm = #-0x2
;     let r = f(unsafe { &CriticalSection::new() });
 80002f2:      	bl	0x800181a <bare_metal::CriticalSection::new::hbefe2a4915cca58e> @ imm = #0x1524
 80002f6:      	b	0x80002f8 <cortex_m::interrupt::free::h06692d10e85fc913+0x20> @ imm = #-0x2
 80002f8:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 80002fa:      	str	r0, [sp, #0xc]
 80002fc:      	ldr	r0, [sp, #0xc]
 80002fe:      	bl	0x800046a <cortex_m::peripheral::Peripherals::take::{{closure}}::h0a312bce2db8d21d> @ imm = #0x168
 8000302:      	mov	r1, r0
 8000304:      	str	r1, [sp, #0x4]
 8000306:      	strb	r0, [r7, #-1]
 800030a:      	b	0x800030c <cortex_m::interrupt::free::h06692d10e85fc913+0x34> @ imm = #-0x2
;     if primask.is_active() {
 800030c:      	ldr	r0, [sp, #0x8]
 800030e:      	and	r0, r0, #0x1
 8000312:      	bl	0x8000444 <cortex_m::register::primask::Primask::is_active::h5e4f4b957bc9cbc5> @ imm = #0x12e
 8000316:      	str	r0, [sp]
 8000318:      	b	0x800031a <cortex_m::interrupt::free::h06692d10e85fc913+0x42> @ imm = #-0x2
 800031a:      	ldr	r0, [sp]
 800031c:      	lsls	r0, r0, #0x1f
 800031e:      	cbnz	r0, 0x800032c <cortex_m::interrupt::free::h06692d10e85fc913+0x54> @ imm = #0xa
 8000320:      	b	0x8000322 <cortex_m::interrupt::free::h06692d10e85fc913+0x4a> @ imm = #-0x2
; }
 8000322:      	ldr	r0, [sp, #0x4]
 8000324:      	and	r0, r0, #0x1
 8000328:      	add	sp, #0x18
 800032a:      	pop	{r7, pc}
;         unsafe { enable() }
 800032c:      	bl	0x8001234 <cortex_m::interrupt::enable::h53b80abc78445410> @ imm = #0xf04
 8000330:      	b	0x8000322 <cortex_m::interrupt::free::h06692d10e85fc913+0x4a> @ imm = #-0x12

08000332 <cortex_m::interrupt::free::h98ff9d15e18c393c>:
; pub fn free<F, R>(f: F) -> R
 8000332:      	push	{r7, lr}
 8000334:      	mov	r7, sp
 8000336:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 8000338:      	bl	0x8000412 <cortex_m::register::primask::read::hb6504e29367c5b47> @ imm = #0xd6
 800033c:      	mov	r1, r0
 800033e:      	str	r1, [sp, #0x8]
 8000340:      	strb	r0, [r7, #-2]
 8000344:      	b	0x8000346 <cortex_m::interrupt::free::h98ff9d15e18c393c+0x14> @ imm = #-0x2
;     disable();
 8000346:      	bl	0x8001240 <cortex_m::interrupt::disable::hb517683cd27cee1f> @ imm = #0xef6
 800034a:      	b	0x800034c <cortex_m::interrupt::free::h98ff9d15e18c393c+0x1a> @ imm = #-0x2
;     let r = f(unsafe { &CriticalSection::new() });
 800034c:      	bl	0x800181a <bare_metal::CriticalSection::new::hbefe2a4915cca58e> @ imm = #0x14ca
 8000350:      	b	0x8000352 <cortex_m::interrupt::free::h98ff9d15e18c393c+0x20> @ imm = #-0x2
 8000352:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 8000354:      	str	r0, [sp, #0xc]
 8000356:      	ldr	r0, [sp, #0xc]
 8000358:      	bl	0x80006e2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::hb0421e6e9fd409f0> @ imm = #0x386
 800035c:      	mov	r1, r0
 800035e:      	str	r1, [sp, #0x4]
 8000360:      	strb	r0, [r7, #-1]
 8000364:      	b	0x8000366 <cortex_m::interrupt::free::h98ff9d15e18c393c+0x34> @ imm = #-0x2
;     if primask.is_active() {
 8000366:      	ldr	r0, [sp, #0x8]
 8000368:      	and	r0, r0, #0x1
 800036c:      	bl	0x8000444 <cortex_m::register::primask::Primask::is_active::h5e4f4b957bc9cbc5> @ imm = #0xd4
 8000370:      	str	r0, [sp]
 8000372:      	b	0x8000374 <cortex_m::interrupt::free::h98ff9d15e18c393c+0x42> @ imm = #-0x2
 8000374:      	ldr	r0, [sp]
 8000376:      	lsls	r0, r0, #0x1f
 8000378:      	cbnz	r0, 0x8000386 <cortex_m::interrupt::free::h98ff9d15e18c393c+0x54> @ imm = #0xa
 800037a:      	b	0x800037c <cortex_m::interrupt::free::h98ff9d15e18c393c+0x4a> @ imm = #-0x2
; }
 800037c:      	ldr	r0, [sp, #0x4]
 800037e:      	and	r0, r0, #0x1
 8000382:      	add	sp, #0x18
 8000384:      	pop	{r7, pc}
;         unsafe { enable() }
 8000386:      	bl	0x8001234 <cortex_m::interrupt::enable::h53b80abc78445410> @ imm = #0xeaa
 800038a:      	b	0x800037c <cortex_m::interrupt::free::h98ff9d15e18c393c+0x4a> @ imm = #-0x12

0800038c <cortex_m::interrupt::free::hafc75dd6b5770ee3>:
; pub fn free<F, R>(f: F) -> R
 800038c:      	push	{r7, lr}
 800038e:      	mov	r7, sp
 8000390:      	sub	sp, #0x18
;     let primask = crate::register::primask::read();
 8000392:      	bl	0x8000412 <cortex_m::register::primask::read::hb6504e29367c5b47> @ imm = #0x7c
 8000396:      	mov	r1, r0
 8000398:      	str	r1, [sp, #0x8]
 800039a:      	strb	r0, [r7, #-2]
 800039e:      	b	0x80003a0 <cortex_m::interrupt::free::hafc75dd6b5770ee3+0x14> @ imm = #-0x2
;     disable();
 80003a0:      	bl	0x8001240 <cortex_m::interrupt::disable::hb517683cd27cee1f> @ imm = #0xe9c
 80003a4:      	b	0x80003a6 <cortex_m::interrupt::free::hafc75dd6b5770ee3+0x1a> @ imm = #-0x2
;     let r = f(unsafe { &CriticalSection::new() });
 80003a6:      	bl	0x800181a <bare_metal::CriticalSection::new::hbefe2a4915cca58e> @ imm = #0x1470
 80003aa:      	b	0x80003ac <cortex_m::interrupt::free::hafc75dd6b5770ee3+0x20> @ imm = #-0x2
 80003ac:      	add	r0, sp, #0x10
;     let r = f(unsafe { &CriticalSection::new() });
 80003ae:      	str	r0, [sp, #0xc]
 80003b0:      	ldr	r0, [sp, #0xc]
 80003b2:      	bl	0x80004a0 <cortex_m::peripheral::Peripherals::take::{{closure}}::hda7f4f2c19f9c3d7> @ imm = #0xea
 80003b6:      	mov	r1, r0
 80003b8:      	str	r1, [sp, #0x4]
 80003ba:      	strb	r0, [r7, #-1]
 80003be:      	b	0x80003c0 <cortex_m::interrupt::free::hafc75dd6b5770ee3+0x34> @ imm = #-0x2
;     if primask.is_active() {
 80003c0:      	ldr	r0, [sp, #0x8]
 80003c2:      	and	r0, r0, #0x1
 80003c6:      	bl	0x8000444 <cortex_m::register::primask::Primask::is_active::h5e4f4b957bc9cbc5> @ imm = #0x7a
 80003ca:      	str	r0, [sp]
 80003cc:      	b	0x80003ce <cortex_m::interrupt::free::hafc75dd6b5770ee3+0x42> @ imm = #-0x2
 80003ce:      	ldr	r0, [sp]
 80003d0:      	lsls	r0, r0, #0x1f
 80003d2:      	cbnz	r0, 0x80003e0 <cortex_m::interrupt::free::hafc75dd6b5770ee3+0x54> @ imm = #0xa
 80003d4:      	b	0x80003d6 <cortex_m::interrupt::free::hafc75dd6b5770ee3+0x4a> @ imm = #-0x2
; }
 80003d6:      	ldr	r0, [sp, #0x4]
 80003d8:      	and	r0, r0, #0x1
 80003dc:      	add	sp, #0x18
 80003de:      	pop	{r7, pc}
;         unsafe { enable() }
 80003e0:      	bl	0x8001234 <cortex_m::interrupt::enable::h53b80abc78445410> @ imm = #0xe50
 80003e4:      	b	0x80003d6 <cortex_m::interrupt::free::hafc75dd6b5770ee3+0x4a> @ imm = #-0x12

080003e6 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcf19c569ec44ba0c>:
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80003e6:      	sub	sp, #0x14
 80003e8:      	str	r0, [sp, #0x4]
 80003ea:      	str	r1, [sp, #0x8]
 80003ec:      	ldrb	r0, [r0]
 80003ee:      	str	r0, [sp, #0xc]
 80003f0:      	ldrb	r1, [r1]
 80003f2:      	str	r1, [sp, #0x10]
 80003f4:      	cmp	r0, r1
 80003f6:      	beq	0x8000402 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcf19c569ec44ba0c+0x1c> @ imm = #0x8
 80003f8:      	b	0x80003fa <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcf19c569ec44ba0c+0x14> @ imm = #-0x2
 80003fa:      	movs	r0, #0x0
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 80003fc:      	strb.w	r0, [sp, #0x3]
 8000400:      	b	0x800040a <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcf19c569ec44ba0c+0x24> @ imm = #0x6
 8000402:      	movs	r0, #0x1
; #[derive(Clone, Copy, Debug, Eq, PartialEq)]
 8000404:      	strb.w	r0, [sp, #0x3]
 8000408:      	b	0x800040a <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcf19c569ec44ba0c+0x24> @ imm = #-0x2
 800040a:      	ldrb.w	r0, [sp, #0x3]
 800040e:      	add	sp, #0x14
 8000410:      	bx	lr

08000412 <cortex_m::register::primask::read::hb6504e29367c5b47>:
; pub fn read() -> Primask {
 8000412:      	push	{r7, lr}
 8000414:      	mov	r7, sp
 8000416:      	sub	sp, #0x10
;     let r: u32 = call_asm!(__primask_r() -> u32);
 8000418:      	bl	0x8001814 <__primask_r> @ imm = #0x13f8
 800041c:      	mov	r1, r0
 800041e:      	str	r1, [sp, #0x4]
 8000420:      	str	r0, [sp, #0xc]
 8000422:      	b	0x8000424 <cortex_m::register::primask::read::hb6504e29367c5b47+0x12> @ imm = #-0x2
;     if r & (1 << 0) == (1 << 0) {
 8000424:      	ldr	r0, [sp, #0x4]
 8000426:      	lsls	r0, r0, #0x1f
 8000428:      	cbnz	r0, 0x8000434 <cortex_m::register::primask::read::hb6504e29367c5b47+0x22> @ imm = #0x8
 800042a:      	b	0x800042c <cortex_m::register::primask::read::hb6504e29367c5b47+0x1a> @ imm = #-0x2
 800042c:      	movs	r0, #0x0
;         Primask::Active
 800042e:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 8000432:      	b	0x800043c <cortex_m::register::primask::read::hb6504e29367c5b47+0x2a> @ imm = #0x6
 8000434:      	movs	r0, #0x1
;         Primask::Inactive
 8000436:      	strb	r0, [r7, #-5]
;     if r & (1 << 0) == (1 << 0) {
 800043a:      	b	0x800043c <cortex_m::register::primask::read::hb6504e29367c5b47+0x2a> @ imm = #-0x2
; }
 800043c:      	ldrb	r0, [r7, #-5]
 8000440:      	add	sp, #0x10
 8000442:      	pop	{r7, pc}

08000444 <cortex_m::register::primask::Primask::is_active::h5e4f4b957bc9cbc5>:
;     pub fn is_active(self) -> bool {
 8000444:      	push	{r7, lr}
 8000446:      	mov	r7, sp
 8000448:      	sub	sp, #0x8
 800044a:      	strb	r0, [r7, #-1]
;         self == Primask::Active
 800044e:      	movw	r1, #0x3178
 8000452:      	movt	r1, #0x800
 8000456:      	subs	r0, r7, #0x1
 8000458:      	bl	0x80003e6 <<cortex_m::register::primask::Primask as core::cmp::PartialEq>::eq::hcf19c569ec44ba0c> @ imm = #-0x76
 800045c:      	str	r0, [sp]
 800045e:      	b	0x8000460 <cortex_m::register::primask::Primask::is_active::h5e4f4b957bc9cbc5+0x1c> @ imm = #-0x2
;     }
 8000460:      	ldr	r0, [sp]
 8000462:      	and	r0, r0, #0x1
 8000466:      	add	sp, #0x8
 8000468:      	pop	{r7, pc}

0800046a <cortex_m::peripheral::Peripherals::take::{{closure}}::h0a312bce2db8d21d>:
;         interrupt::free(|_| {
 800046a:      	push	{r7, lr}
 800046c:      	mov	r7, sp
 800046e:      	sub	sp, #0x10
 8000470:      	str	r0, [sp, #0xc]
;             if unsafe { TAKEN } {
 8000472:      	movw	r0, #0x1
 8000476:      	movt	r0, #0x2000
 800047a:      	ldrb	r0, [r0]
 800047c:      	lsls	r0, r0, #0x1f
 800047e:      	cbnz	r0, 0x8000488 <cortex_m::peripheral::Peripherals::take::{{closure}}::h0a312bce2db8d21d+0x1e> @ imm = #0x6
 8000480:      	b	0x8000482 <cortex_m::peripheral::Peripherals::take::{{closure}}::h0a312bce2db8d21d+0x18> @ imm = #-0x2
;                 Some(unsafe { Peripherals::steal() })
 8000482:      	bl	0x80011fa <cortex_m::peripheral::Peripherals::steal::h1ec715ebdfce3bf6> @ imm = #0xd74
 8000486:      	b	0x8000498 <cortex_m::peripheral::Peripherals::take::{{closure}}::h0a312bce2db8d21d+0x2e> @ imm = #0xe
 8000488:      	movs	r0, #0x0
;                 None
 800048a:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 800048e:      	b	0x8000490 <cortex_m::peripheral::Peripherals::take::{{closure}}::h0a312bce2db8d21d+0x26> @ imm = #-0x2
;         })
 8000490:      	ldrb	r0, [r7, #-9]
 8000494:      	add	sp, #0x10
 8000496:      	pop	{r7, pc}
 8000498:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 800049a:      	strb	r0, [r7, #-9]
;             if unsafe { TAKEN } {
 800049e:      	b	0x8000490 <cortex_m::peripheral::Peripherals::take::{{closure}}::h0a312bce2db8d21d+0x26> @ imm = #-0x12

080004a0 <cortex_m::peripheral::Peripherals::take::{{closure}}::hda7f4f2c19f9c3d7>:
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 80004a0:      	push	{r7, lr}
 80004a2:      	mov	r7, sp
 80004a4:      	sub	sp, #0x10
 80004a6:      	str	r0, [sp, #0xc]
 80004a8:      	bl	0x80011bc <cortex_m::peripheral::Peripherals::take::h4ca3e33c416185d5> @ imm = #0xd10
 80004ac:      	strb	r0, [r7, #-9]
 80004b0:      	b	0x80004b2 <cortex_m::peripheral::Peripherals::take::{{closure}}::hda7f4f2c19f9c3d7+0x12> @ imm = #-0x2
 80004b2:      	ldrb	r1, [r7, #-9]
 80004b6:      	lsls	r0, r1, #0x1f
 80004b8:      	cbz	r0, 0x80004c0 <cortex_m::peripheral::Peripherals::take::{{closure}}::hda7f4f2c19f9c3d7+0x20> @ imm = #0x4
 80004ba:      	b	0x80004bc <cortex_m::peripheral::Peripherals::take::{{closure}}::hda7f4f2c19f9c3d7+0x1c> @ imm = #-0x2
 80004bc:      	b	0x80004c8 <cortex_m::peripheral::Peripherals::take::{{closure}}::hda7f4f2c19f9c3d7+0x28> @ imm = #0x8
 80004be:      	trap
 80004c0:      	movs	r0, #0x0
;             None    => None,
 80004c2:      	strb	r0, [r7, #-10]
 80004c6:      	b	0x80004d6 <cortex_m::peripheral::Peripherals::take::{{closure}}::hda7f4f2c19f9c3d7+0x36> @ imm = #0xc
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 80004c8:      	bl	0x80011ec <cortex_m::peripheral::Peripherals::steal::h000fb384fca93ad7> @ imm = #0xd20
 80004cc:      	b	0x80004ce <cortex_m::peripheral::Peripherals::take::{{closure}}::hda7f4f2c19f9c3d7+0x2e> @ imm = #-0x2
 80004ce:      	movs	r0, #0x1
;             Some(_) => { Some(unsafe { Peripherals::steal() }) },
 80004d0:      	strb	r0, [r7, #-10]
 80004d4:      	b	0x80004d6 <cortex_m::peripheral::Peripherals::take::{{closure}}::hda7f4f2c19f9c3d7+0x36> @ imm = #-0x2
;         })
 80004d6:      	ldrb	r0, [r7, #-10]
 80004da:      	add	sp, #0x10
 80004dc:      	pop	{r7, pc}

080004de <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d>:
;     pub fn new<PE8Mode, PE9Mode, PE10Mode, PE11Mode, PE12Mode, PE13Mode, PE14Mode, PE15Mode>(
 80004de:      	push	{r4, r5, r7, lr}
 80004e0:      	add	r7, sp, #0x8
 80004e2:      	sub	sp, #0x78
 80004e4:      	str	r1, [sp, #0x40]
 80004e6:      	str	r0, [sp, #0x44]
 80004e8:      	str	r0, [sp, #0x70]
 80004ea:      	str	r1, [sp, #0x74]
;             ld3: pe9
 80004ec:      	bl	0x800090a <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h081ae95f8af6d4d9E> @ imm = #0x41a
 80004f0:      	b	0x80004f2 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x14> @ imm = #-0x2
 80004f2:      	bl	0x8001104 <_ZN13stm32f3xx_hal4gpio5gpioe50PE9$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hbf490ec7c286b300E> @ imm = #0xc0e
 80004f6:      	str	r0, [sp, #0x3c]
 80004f8:      	b	0x80004fa <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x1c> @ imm = #-0x2
 80004fa:      	ldr	r0, [sp, #0x3c]
 80004fc:      	bl	0x8000718 <switch_hal::IntoSwitch::into_active_high_switch::hd005db221dd774a3> @ imm = #0x218
 8000500:      	str	r0, [sp, #0x38]
 8000502:      	b	0x8000504 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x26> @ imm = #-0x2
;             ld4: pe8
 8000504:      	ldr	r1, [sp, #0x40]
 8000506:      	ldr	r0, [sp, #0x44]
 8000508:      	bl	0x80007e8 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h1da9afce230af424E> @ imm = #0x2dc
 800050c:      	b	0x800050e <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x30> @ imm = #-0x2
 800050e:      	bl	0x80010f4 <_ZN13stm32f3xx_hal4gpio5gpioe50PE8$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h213ab082cd3a8003E> @ imm = #0xbe2
 8000512:      	str	r0, [sp, #0x34]
 8000514:      	b	0x8000516 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x38> @ imm = #-0x2
 8000516:      	ldr	r0, [sp, #0x34]
 8000518:      	bl	0x8000718 <switch_hal::IntoSwitch::into_active_high_switch::hd005db221dd774a3> @ imm = #0x1fc
 800051c:      	str	r0, [sp, #0x30]
 800051e:      	b	0x8000520 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x42> @ imm = #-0x2
;             ld5: pe10
 8000520:      	ldr	r1, [sp, #0x40]
 8000522:      	ldr	r0, [sp, #0x44]
 8000524:      	bl	0x8000a2c <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61d8b623baa61a3eE> @ imm = #0x504
 8000528:      	b	0x800052a <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x4c> @ imm = #-0x2
 800052a:      	bl	0x8001114 <_ZN13stm32f3xx_hal4gpio5gpioe51PE10$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hce74f8a3746740d3E> @ imm = #0xbe6
 800052e:      	str	r0, [sp, #0x2c]
 8000530:      	b	0x8000532 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x54> @ imm = #-0x2
 8000532:      	ldr	r0, [sp, #0x2c]
 8000534:      	bl	0x8000718 <switch_hal::IntoSwitch::into_active_high_switch::hd005db221dd774a3> @ imm = #0x1e0
 8000538:      	str	r0, [sp, #0x28]
 800053a:      	b	0x800053c <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x5e> @ imm = #-0x2
;             ld6: pe15
 800053c:      	ldr	r1, [sp, #0x40]
 800053e:      	ldr	r0, [sp, #0x44]
 8000540:      	bl	0x8000fd6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h3db4d70856de266cE> @ imm = #0xa92
 8000544:      	b	0x8000546 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x68> @ imm = #-0x2
 8000546:      	bl	0x8001164 <_ZN13stm32f3xx_hal4gpio5gpioe51PE15$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hb09fc3b771be22d3E> @ imm = #0xc1a
 800054a:      	str	r0, [sp, #0x24]
 800054c:      	b	0x800054e <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x70> @ imm = #-0x2
 800054e:      	ldr	r0, [sp, #0x24]
 8000550:      	bl	0x8000718 <switch_hal::IntoSwitch::into_active_high_switch::hd005db221dd774a3> @ imm = #0x1c4
 8000554:      	str	r0, [sp, #0x20]
 8000556:      	b	0x8000558 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x7a> @ imm = #-0x2
;             ld7: pe11
 8000558:      	ldr	r1, [sp, #0x40]
 800055a:      	ldr	r0, [sp, #0x44]
 800055c:      	bl	0x8000b4e <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h5d076789e8cecd90E> @ imm = #0x5ee
 8000560:      	b	0x8000562 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x84> @ imm = #-0x2
 8000562:      	bl	0x8001124 <_ZN13stm32f3xx_hal4gpio5gpioe51PE11$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17ha16bc0e0b011f8e5E> @ imm = #0xbbe
 8000566:      	str	r0, [sp, #0x1c]
 8000568:      	b	0x800056a <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x8c> @ imm = #-0x2
 800056a:      	ldr	r0, [sp, #0x1c]
 800056c:      	bl	0x8000718 <switch_hal::IntoSwitch::into_active_high_switch::hd005db221dd774a3> @ imm = #0x1a8
 8000570:      	str	r0, [sp, #0x18]
 8000572:      	b	0x8000574 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x96> @ imm = #-0x2
;             ld8: pe14
 8000574:      	ldr	r1, [sp, #0x40]
 8000576:      	ldr	r0, [sp, #0x44]
 8000578:      	bl	0x8000eb4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hff079aa60e517a12E> @ imm = #0x938
 800057c:      	b	0x800057e <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0xa0> @ imm = #-0x2
 800057e:      	bl	0x8001154 <_ZN13stm32f3xx_hal4gpio5gpioe51PE14$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hf8efac1edf3c4b6aE> @ imm = #0xbd2
 8000582:      	str	r0, [sp, #0x14]
 8000584:      	b	0x8000586 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0xa8> @ imm = #-0x2
 8000586:      	ldr	r0, [sp, #0x14]
 8000588:      	bl	0x8000718 <switch_hal::IntoSwitch::into_active_high_switch::hd005db221dd774a3> @ imm = #0x18c
 800058c:      	str	r0, [sp, #0x10]
 800058e:      	b	0x8000590 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0xb2> @ imm = #-0x2
;             ld9: pe12
 8000590:      	ldr	r1, [sp, #0x40]
 8000592:      	ldr	r0, [sp, #0x44]
 8000594:      	bl	0x8000c70 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h75c11794dde01080E> @ imm = #0x6d8
 8000598:      	b	0x800059a <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0xbc> @ imm = #-0x2
 800059a:      	bl	0x8001134 <_ZN13stm32f3xx_hal4gpio5gpioe51PE12$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h13072bb1af1ce5f8E> @ imm = #0xb96
 800059e:      	str	r0, [sp, #0xc]
 80005a0:      	b	0x80005a2 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0xc4> @ imm = #-0x2
 80005a2:      	ldr	r0, [sp, #0xc]
 80005a4:      	bl	0x8000718 <switch_hal::IntoSwitch::into_active_high_switch::hd005db221dd774a3> @ imm = #0x170
 80005a8:      	str	r0, [sp, #0x8]
 80005aa:      	b	0x80005ac <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0xce> @ imm = #-0x2
;             ld10: pe13
 80005ac:      	ldr	r1, [sp, #0x40]
 80005ae:      	ldr	r0, [sp, #0x44]
 80005b0:      	bl	0x8000d92 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h69ae0882e2a77d7cE> @ imm = #0x7de
 80005b4:      	b	0x80005b6 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0xd8> @ imm = #-0x2
 80005b6:      	bl	0x8001144 <_ZN13stm32f3xx_hal4gpio5gpioe51PE13$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hfa3636a8eba8d2b8E> @ imm = #0xb8a
 80005ba:      	str	r0, [sp, #0x4]
 80005bc:      	b	0x80005be <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0xe0> @ imm = #-0x2
 80005be:      	ldr	r0, [sp, #0x4]
 80005c0:      	bl	0x8000718 <switch_hal::IntoSwitch::into_active_high_switch::hd005db221dd774a3> @ imm = #0x154
 80005c4:      	str	r0, [sp]
 80005c6:      	b	0x80005c8 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0xea> @ imm = #-0x2
;         let mut leds = Leds {
 80005c8:      	ldr	r0, [sp]
 80005ca:      	ldr	r1, [sp, #0x8]
 80005cc:      	ldr	r2, [sp, #0x10]
 80005ce:      	ldr	r3, [sp, #0x18]
 80005d0:      	ldr.w	r12, [sp, #0x20]
 80005d4:      	ldr.w	lr, [sp, #0x28]
 80005d8:      	ldr	r4, [sp, #0x30]
 80005da:      	ldr	r5, [sp, #0x38]
 80005dc:      	strb.w	r5, [sp, #0x48]
 80005e0:      	strb.w	r4, [sp, #0x49]
 80005e4:      	strb.w	lr, [sp, #0x4a]
 80005e8:      	strb.w	r12, [sp, #0x4b]
 80005ec:      	strb.w	r3, [sp, #0x4c]
 80005f0:      	strb.w	r2, [sp, #0x4d]
 80005f4:      	strb.w	r1, [sp, #0x4e]
 80005f8:      	strb.w	r0, [sp, #0x4f]
 80005fc:      	add	r0, sp, #0x48
;         leds.ld3.off().ok();
 80005fe:      	bl	0x800125e <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h539b9ef31fa02bf6> @ imm = #0xc5c
 8000602:      	b	0x8000604 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x126> @ imm = #-0x2
 8000604:      	bl	0x8001208 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE> @ imm = #0xc00
 8000608:      	b	0x800060a <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x12c> @ imm = #-0x2
 800060a:      	add	r0, sp, #0x48
;         leds.ld4.off().ok();
 800060c:      	adds	r0, #0x1
 800060e:      	bl	0x800125e <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h539b9ef31fa02bf6> @ imm = #0xc4c
 8000612:      	b	0x8000614 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x136> @ imm = #-0x2
 8000614:      	bl	0x8001208 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE> @ imm = #0xbf0
 8000618:      	b	0x800061a <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x13c> @ imm = #-0x2
 800061a:      	add	r0, sp, #0x48
;         leds.ld5.off().ok();
 800061c:      	adds	r0, #0x2
 800061e:      	bl	0x800125e <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h539b9ef31fa02bf6> @ imm = #0xc3c
 8000622:      	b	0x8000624 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x146> @ imm = #-0x2
 8000624:      	bl	0x8001208 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE> @ imm = #0xbe0
 8000628:      	b	0x800062a <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x14c> @ imm = #-0x2
 800062a:      	add	r0, sp, #0x48
;         leds.ld6.off().ok();
 800062c:      	adds	r0, #0x3
 800062e:      	bl	0x800125e <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h539b9ef31fa02bf6> @ imm = #0xc2c
 8000632:      	b	0x8000634 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x156> @ imm = #-0x2
 8000634:      	bl	0x8001208 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE> @ imm = #0xbd0
 8000638:      	b	0x800063a <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x15c> @ imm = #-0x2
 800063a:      	add	r0, sp, #0x48
;         leds.ld7.off().ok();
 800063c:      	adds	r0, #0x4
 800063e:      	bl	0x800125e <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h539b9ef31fa02bf6> @ imm = #0xc1c
 8000642:      	b	0x8000644 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x166> @ imm = #-0x2
 8000644:      	bl	0x8001208 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE> @ imm = #0xbc0
 8000648:      	b	0x800064a <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x16c> @ imm = #-0x2
 800064a:      	add	r0, sp, #0x48
;         leds.ld8.off().ok();
 800064c:      	adds	r0, #0x5
 800064e:      	bl	0x800125e <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h539b9ef31fa02bf6> @ imm = #0xc0c
 8000652:      	b	0x8000654 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x176> @ imm = #-0x2
 8000654:      	bl	0x8001208 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE> @ imm = #0xbb0
 8000658:      	b	0x800065a <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x17c> @ imm = #-0x2
 800065a:      	add	r0, sp, #0x48
;         leds.ld9.off().ok();
 800065c:      	adds	r0, #0x6
 800065e:      	bl	0x800125e <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h539b9ef31fa02bf6> @ imm = #0xbfc
 8000662:      	b	0x8000664 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x186> @ imm = #-0x2
 8000664:      	bl	0x8001208 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE> @ imm = #0xba0
 8000668:      	b	0x800066a <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x18c> @ imm = #-0x2
 800066a:      	add	r0, sp, #0x48
;         leds.ld10.off().ok();
 800066c:      	adds	r0, #0x7
 800066e:      	bl	0x800125e <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h539b9ef31fa02bf6> @ imm = #0xbec
 8000672:      	b	0x8000674 <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x196> @ imm = #-0x2
 8000674:      	bl	0x8001208 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE> @ imm = #0xb90
 8000678:      	b	0x800067a <stm32f3_discovery::leds::Leds::new::h5c2ae215e0803f5d+0x19c> @ imm = #-0x2
;     }
 800067a:      	ldr	r0, [sp, #0x48]
 800067c:      	ldr	r1, [sp, #0x4c]
 800067e:      	add	sp, #0x78
 8000680:      	pop	{r4, r5, r7, pc}

08000682 <core::option::Option<T>::unwrap::h0a18ee95a782c10b>:
 8000682:      	push	{r7, lr}
 8000684:      	mov	r7, sp
 8000686:      	sub	sp, #0x10
 8000688:      	str	r1, [sp, #0x4]
 800068a:      	strb	r0, [r7, #-5]
 800068e:      	ldrb	r1, [r7, #-5]
 8000692:      	lsls	r0, r1, #0x1f
 8000694:      	cbz	r0, 0x800069c <core::option::Option<T>::unwrap::h0a18ee95a782c10b+0x1a> @ imm = #0x4
 8000696:      	b	0x8000698 <core::option::Option<T>::unwrap::h0a18ee95a782c10b+0x16> @ imm = #-0x2
 8000698:      	b	0x80006ae <core::option::Option<T>::unwrap::h0a18ee95a782c10b+0x2c> @ imm = #0x12
 800069a:      	trap
 800069c:      	ldr	r2, [sp, #0x4]
 800069e:      	movw	r0, #0x3179
 80006a2:      	movt	r0, #0x800
 80006a6:      	movs	r1, #0x2b
 80006a8:      	bl	0x8001928 <core::panicking::panic::hd499c3017018cd48> @ imm = #0x127c
 80006ac:      	trap
 80006ae:      	add	sp, #0x10
 80006b0:      	pop	{r7, pc}

080006b2 <core::option::Option<T>::unwrap::h9e39506e1ba8a390>:
 80006b2:      	push	{r7, lr}
 80006b4:      	mov	r7, sp
 80006b6:      	sub	sp, #0x10
 80006b8:      	str	r1, [sp, #0x4]
 80006ba:      	strb	r0, [r7, #-5]
 80006be:      	ldrb	r1, [r7, #-5]
 80006c2:      	lsls	r0, r1, #0x1f
 80006c4:      	cbz	r0, 0x80006cc <core::option::Option<T>::unwrap::h9e39506e1ba8a390+0x1a> @ imm = #0x4
 80006c6:      	b	0x80006c8 <core::option::Option<T>::unwrap::h9e39506e1ba8a390+0x16> @ imm = #-0x2
 80006c8:      	b	0x80006de <core::option::Option<T>::unwrap::h9e39506e1ba8a390+0x2c> @ imm = #0x12
 80006ca:      	trap
 80006cc:      	ldr	r2, [sp, #0x4]
 80006ce:      	movw	r0, #0x3179
 80006d2:      	movt	r0, #0x800
 80006d6:      	movs	r1, #0x2b
 80006d8:      	bl	0x8001928 <core::panicking::panic::hd499c3017018cd48> @ imm = #0x124c
 80006dc:      	trap
 80006de:      	add	sp, #0x10
 80006e0:      	pop	{r7, pc}

080006e2 <stm32f3::stm32f303::Peripherals::take::{{closure}}::hb0421e6e9fd409f0>:
;         cortex_m::interrupt::free(|_| {
 80006e2:      	push	{r7, lr}
 80006e4:      	mov	r7, sp
 80006e6:      	sub	sp, #0x10
 80006e8:      	str	r0, [sp, #0xc]
;             if unsafe { DEVICE_PERIPHERALS } {
 80006ea:      	movw	r0, #0x0
 80006ee:      	movt	r0, #0x2000
 80006f2:      	ldrb	r0, [r0]
 80006f4:      	lsls	r0, r0, #0x1f
 80006f6:      	cbnz	r0, 0x8000700 <stm32f3::stm32f303::Peripherals::take::{{closure}}::hb0421e6e9fd409f0+0x1e> @ imm = #0x6
 80006f8:      	b	0x80006fa <stm32f3::stm32f303::Peripherals::take::{{closure}}::hb0421e6e9fd409f0+0x18> @ imm = #-0x2
;                 Some(unsafe { Peripherals::steal() })
 80006fa:      	bl	0x80002ca <stm32f3::stm32f303::Peripherals::steal::h8e17162bbfbf6acb> @ imm = #-0x434
 80006fe:      	b	0x8000710 <stm32f3::stm32f303::Peripherals::take::{{closure}}::hb0421e6e9fd409f0+0x2e> @ imm = #0xe
 8000700:      	movs	r0, #0x0
;                 None
 8000702:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 8000706:      	b	0x8000708 <stm32f3::stm32f303::Peripherals::take::{{closure}}::hb0421e6e9fd409f0+0x26> @ imm = #-0x2
;         })
 8000708:      	ldrb	r0, [r7, #-9]
 800070c:      	add	sp, #0x10
 800070e:      	pop	{r7, pc}
 8000710:      	movs	r0, #0x1
;                 Some(unsafe { Peripherals::steal() })
 8000712:      	strb	r0, [r7, #-9]
;             if unsafe { DEVICE_PERIPHERALS } {
 8000716:      	b	0x8000708 <stm32f3::stm32f303::Peripherals::take::{{closure}}::hb0421e6e9fd409f0+0x26> @ imm = #-0x12

08000718 <switch_hal::IntoSwitch::into_active_high_switch::hd005db221dd774a3>:
;     fn into_active_high_switch(self) -> Switch<Self, ActiveHigh>
 8000718:      	push	{r7, lr}
 800071a:      	mov	r7, sp
 800071c:      	sub	sp, #0x8
 800071e:      	strb	r0, [r7, #-1]
;         self.into_switch::<ActiveHigh>()
 8000722:      	bl	0x8001174 <<T as switch_hal::IntoSwitch>::into_switch::h754b68476c85e2bf> @ imm = #0xa4e
 8000726:      	str	r0, [sp]
 8000728:      	b	0x800072a <switch_hal::IntoSwitch::into_active_high_switch::hd005db221dd774a3+0x12> @ imm = #-0x2
;     }
 800072a:      	ldr	r0, [sp]
 800072c:      	add	sp, #0x8
 800072e:      	pop	{r7, pc}

08000730 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hd0ea03679639aacbE>:
;                         fn set_low(&mut self) -> Result<(), Self::Error> {
 8000730:      	push	{r7, lr}
 8000732:      	mov	r7, sp
 8000734:      	sub	sp, #0x30
 8000736:      	str	r0, [sp, #0x8]
; gpio!([
 8000738:      	b	0x800073a <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hd0ea03679639aacbE+0xa> @ imm = #-0x2
 800073a:      	add	r0, sp, #0x8
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 800073c:      	str	r0, [sp, #0x10]
 800073e:      	ldr	r0, [sp, #0x10]
 8000740:      	movw	r1, #0x1018
 8000744:      	movt	r1, #0x4800
 8000748:      	str	r1, [sp, #0x4]
 800074a:      	str	r1, [sp, #0x1c]
 800074c:      	str	r0, [sp, #0x20]
 800074e:      	movs	r1, #0x0
;         self.register.set(f(&mut W {bits: Self::reset_value(), _reg: marker::PhantomData}).bits);
 8000750:      	str	r1, [sp, #0x18]
 8000752:      	add	r1, sp, #0x18
 8000754:      	str	r1, [sp, #0x14]
 8000756:      	ldr	r1, [sp, #0x14]
 8000758:      	bl	0x8000772 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h6f6a86a53e92675bE> @ imm = #0x16
 800075c:      	mov	r1, r0
 800075e:      	ldr	r0, [sp, #0x4]
 8000760:      	ldr	r1, [r1]
 8000762:      	str	r0, [sp, #0x24]
 8000764:      	str	r1, [sp, #0x28]
 8000766:      	str	r0, [sp, #0x2c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000768:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0xdde
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 800076c:      	b	0x800076e <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hd0ea03679639aacbE+0x3e> @ imm = #-0x2
;                         }
 800076e:      	add	sp, #0x30
 8000770:      	pop	{r7, pc}

08000772 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h6f6a86a53e92675bE>:
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 8000772:      	push	{r7, lr}
 8000774:      	mov	r7, sp
 8000776:      	sub	sp, #0x20
 8000778:      	str	r1, [sp, #0x8]
 800077a:      	str	r0, [sp, #0x10]
 800077c:      	str	r1, [sp, #0x14]
 800077e:      	ldr	r0, [r0]
 8000780:      	ldrb	r0, [r0]
 8000782:      	add.w	r1, r0, #0x10
 8000786:      	uxtb	r0, r1
 8000788:      	mov	r2, r1
 800078a:      	str	r2, [sp, #0xc]
 800078c:      	cmp	r0, r1
 800078e:      	bne	0x80007a6 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h6f6a86a53e92675bE+0x34> @ imm = #0x14
 8000790:      	b	0x8000792 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h6f6a86a53e92675bE+0x20> @ imm = #-0x2
 8000792:      	ldr	r0, [sp, #0xc]
 8000794:      	and	r2, r0, #0x1f
 8000798:      	movs	r1, #0x1
 800079a:      	lsls	r1, r2
 800079c:      	str	r1, [sp, #0x4]
 800079e:      	tst.w	r0, #0xe0
 80007a2:      	bne	0x80007ca <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h6f6a86a53e92675bE+0x58> @ imm = #0x24
 80007a4:      	b	0x80007be <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h6f6a86a53e92675bE+0x4c> @ imm = #0x16
 80007a6:      	movw	r0, #0x3220
 80007aa:      	movt	r0, #0x800
 80007ae:      	movw	r2, #0x3208
 80007b2:      	movt	r2, #0x800
 80007b6:      	movs	r1, #0x1c
 80007b8:      	bl	0x8001928 <core::panicking::panic::hd499c3017018cd48> @ imm = #0x116c
 80007bc:      	trap
 80007be:      	ldr	r0, [sp, #0x4]
 80007c0:      	ldr	r1, [sp, #0x8]
 80007c2:      	str	r1, [sp, #0x18]
 80007c4:      	str	r0, [sp, #0x1c]
;         self.bits = bits;
 80007c6:      	str	r0, [r1]
;                             unsafe { (*$GPIOX::ptr()).bsrr.write(|w| w.bits(1 << (16 + self.i))) }
 80007c8:      	b	0x80007e2 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low28_$u7b$$u7b$closure$u7d$$u7d$17h6f6a86a53e92675bE+0x70> @ imm = #0x16
 80007ca:      	movw	r0, #0x3240
 80007ce:      	movt	r0, #0x800
 80007d2:      	movw	r2, #0x3208
 80007d6:      	movt	r2, #0x800
 80007da:      	movs	r1, #0x23
 80007dc:      	bl	0x8001928 <core::panicking::panic::hd499c3017018cd48> @ imm = #0x1148
 80007e0:      	trap
 80007e2:      	ldr	r0, [sp, #0x8]
 80007e4:      	add	sp, #0x20
 80007e6:      	pop	{r7, pc}

080007e8 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h1da9afce230af424E>:
;                             pub fn into_push_pull_output(
 80007e8:      	push	{r7, lr}
 80007ea:      	mov	r7, sp
 80007ec:      	sub	sp, #0x70
 80007ee:      	str	r1, [sp, #0x4]
 80007f0:      	str	r0, [sp, #0x10]
 80007f2:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80007f4:      	bl	0x80012f4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h94bdec6e809f5bad> @ imm = #0xafc
 80007f8:      	str	r0, [sp, #0x8]
 80007fa:      	b	0x80007fc <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h1da9afce230af424E+0x14> @ imm = #-0x2
 80007fc:      	ldr	r0, [sp, #0x8]
 80007fe:      	str	r0, [sp, #0x28]
 8000800:      	str	r0, [sp, #0x30]
 8000802:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000804:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0xe8e
;         let bits = self.register.get();
 8000808:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800080a:      	str	r0, [sp, #0x20]
 800080c:      	str	r0, [sp, #0x24]
 800080e:      	add	r0, sp, #0x20
 8000810:      	str	r0, [sp, #0x18]
 8000812:      	add	r0, sp, #0x24
 8000814:      	str	r0, [sp, #0x1c]
 8000816:      	ldr	r0, [sp, #0x18]
 8000818:      	ldr	r1, [sp, #0x1c]
 800081a:      	bl	0x8000872 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h285a2f29031d9b18E> @ imm = #0x54
 800081e:      	mov	r1, r0
 8000820:      	ldr	r0, [sp, #0x8]
 8000822:      	ldr	r1, [r1]
 8000824:      	str	r0, [sp, #0x38]
 8000826:      	str	r1, [sp, #0x3c]
 8000828:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800082a:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0xd1c
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800082e:      	b	0x8000830 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h1da9afce230af424E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000830:      	ldr	r0, [sp, #0x4]
 8000832:      	bl	0x8001306 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h8faa8f8b7a5cd11a> @ imm = #0xad0
 8000836:      	str	r0, [sp]
 8000838:      	b	0x800083a <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h1da9afce230af424E+0x52> @ imm = #-0x2
 800083a:      	ldr	r0, [sp]
 800083c:      	str	r0, [sp, #0x54]
 800083e:      	str	r0, [sp, #0x5c]
 8000840:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000842:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0xe50
;         let bits = self.register.get();
 8000846:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000848:      	str	r0, [sp, #0x4c]
 800084a:      	str	r0, [sp, #0x50]
 800084c:      	add	r0, sp, #0x4c
 800084e:      	str	r0, [sp, #0x44]
 8000850:      	add	r0, sp, #0x50
 8000852:      	str	r0, [sp, #0x48]
 8000854:      	ldr	r0, [sp, #0x44]
 8000856:      	ldr	r1, [sp, #0x48]
 8000858:      	bl	0x80008c0 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf589e6dd089a8c3dE> @ imm = #0x64
 800085c:      	mov	r1, r0
 800085e:      	ldr	r0, [sp]
 8000860:      	ldr	r1, [r1]
 8000862:      	str	r0, [sp, #0x64]
 8000864:      	str	r1, [sp, #0x68]
 8000866:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000868:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0xcde
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800086c:      	b	0x800086e <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output17h1da9afce230af424E+0x86> @ imm = #-0x2
;                             }
 800086e:      	add	sp, #0x70
 8000870:      	pop	{r7, pc}

08000872 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h285a2f29031d9b18E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000872:      	push	{r7, lr}
 8000874:      	mov	r7, sp
 8000876:      	sub	sp, #0x30
 8000878:      	str	r0, [sp, #0x8]
 800087a:      	str	r1, [sp, #0xc]
 800087c:      	str	r1, [sp, #0x14]
;         MODER8_W { w: self }
 800087e:      	str	r1, [sp, #0x10]
;     }
 8000880:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000882:      	str	r0, [sp]
 8000884:      	b	0x8000886 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h285a2f29031d9b18E+0x14> @ imm = #-0x2
 8000886:      	ldr	r1, [sp]
 8000888:      	str	r1, [sp, #0x1c]
 800088a:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 800088c:      	strb	r0, [r7, #-21]
 8000890:      	ldrb	r0, [r7, #-21]
 8000894:      	str	r1, [sp, #0x20]
 8000896:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 800089a:      	bl	0x800118c <<T as core::convert::Into<U>>::into::h5ca7d979b3d99e53> @ imm = #0x8ee
 800089e:      	ldr	r1, [sp]
 80008a0:      	mov	r2, r0
 80008a2:      	str	r1, [sp, #0x28]
 80008a4:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 16)) | (((value as u32) & 0x03) << 16);
 80008a8:      	ldr	r0, [r1]
 80008aa:      	bic	r0, r0, #0x30000
 80008ae:      	and	r2, r2, #0x3
 80008b2:      	orr.w	r0, r0, r2, lsl #16
 80008b6:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80008b8:      	b	0x80008ba <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h285a2f29031d9b18E+0x48> @ imm = #-0x2
 80008ba:      	ldr	r0, [sp]
 80008bc:      	add	sp, #0x30
 80008be:      	pop	{r7, pc}

080008c0 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf589e6dd089a8c3dE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80008c0:      	push	{r7, lr}
 80008c2:      	mov	r7, sp
 80008c4:      	sub	sp, #0x30
 80008c6:      	str	r0, [sp, #0x8]
 80008c8:      	str	r1, [sp, #0xc]
 80008ca:      	str	r1, [sp, #0x14]
;         OT8_W { w: self }
 80008cc:      	str	r1, [sp, #0x10]
;     }
 80008ce:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80008d0:      	str	r0, [sp]
 80008d2:      	b	0x80008d4 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf589e6dd089a8c3dE+0x14> @ imm = #-0x2
 80008d4:      	ldr	r1, [sp]
 80008d6:      	str	r1, [sp, #0x1c]
 80008d8:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 80008da:      	strb	r0, [r7, #-21]
 80008de:      	ldrb	r0, [r7, #-21]
 80008e2:      	str	r1, [sp, #0x20]
 80008e4:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 80008e8:      	bl	0x80011a2 <<T as core::convert::Into<U>>::into::h53f96bf7fb51596d> @ imm = #0x8b6
 80008ec:      	ldr	r1, [sp]
 80008ee:      	mov	r2, r0
 80008f0:      	str	r1, [sp, #0x28]
 80008f2:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 8)) | (((value as u32) & 0x01) << 8);
 80008f6:      	ldr	r0, [r1]
 80008f8:      	bic	r0, r0, #0x100
 80008fc:      	orr.w	r0, r0, r2, lsl #8
 8000900:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000902:      	b	0x8000904 <_ZN13stm32f3xx_hal4gpio5gpioe15PE8$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf589e6dd089a8c3dE+0x44> @ imm = #-0x2
 8000904:      	ldr	r0, [sp]
 8000906:      	add	sp, #0x30
 8000908:      	pop	{r7, pc}

0800090a <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h081ae95f8af6d4d9E>:
;                             pub fn into_push_pull_output(
 800090a:      	push	{r7, lr}
 800090c:      	mov	r7, sp
 800090e:      	sub	sp, #0x70
 8000910:      	str	r1, [sp, #0x4]
 8000912:      	str	r0, [sp, #0x10]
 8000914:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000916:      	bl	0x80012f4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h94bdec6e809f5bad> @ imm = #0x9da
 800091a:      	str	r0, [sp, #0x8]
 800091c:      	b	0x800091e <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h081ae95f8af6d4d9E+0x14> @ imm = #-0x2
 800091e:      	ldr	r0, [sp, #0x8]
 8000920:      	str	r0, [sp, #0x28]
 8000922:      	str	r0, [sp, #0x30]
 8000924:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000926:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0xd6c
;         let bits = self.register.get();
 800092a:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800092c:      	str	r0, [sp, #0x20]
 800092e:      	str	r0, [sp, #0x24]
 8000930:      	add	r0, sp, #0x20
 8000932:      	str	r0, [sp, #0x18]
 8000934:      	add	r0, sp, #0x24
 8000936:      	str	r0, [sp, #0x1c]
 8000938:      	ldr	r0, [sp, #0x18]
 800093a:      	ldr	r1, [sp, #0x1c]
 800093c:      	bl	0x80009de <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h9250a6c0de69858dE> @ imm = #0x9e
 8000940:      	mov	r1, r0
 8000942:      	ldr	r0, [sp, #0x8]
 8000944:      	ldr	r1, [r1]
 8000946:      	str	r0, [sp, #0x38]
 8000948:      	str	r1, [sp, #0x3c]
 800094a:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800094c:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0xbfa
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000950:      	b	0x8000952 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h081ae95f8af6d4d9E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000952:      	ldr	r0, [sp, #0x4]
 8000954:      	bl	0x8001306 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h8faa8f8b7a5cd11a> @ imm = #0x9ae
 8000958:      	str	r0, [sp]
 800095a:      	b	0x800095c <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h081ae95f8af6d4d9E+0x52> @ imm = #-0x2
 800095c:      	ldr	r0, [sp]
 800095e:      	str	r0, [sp, #0x54]
 8000960:      	str	r0, [sp, #0x5c]
 8000962:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000964:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0xd2e
;         let bits = self.register.get();
 8000968:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800096a:      	str	r0, [sp, #0x4c]
 800096c:      	str	r0, [sp, #0x50]
 800096e:      	add	r0, sp, #0x4c
 8000970:      	str	r0, [sp, #0x44]
 8000972:      	add	r0, sp, #0x50
 8000974:      	str	r0, [sp, #0x48]
 8000976:      	ldr	r0, [sp, #0x44]
 8000978:      	ldr	r1, [sp, #0x48]
 800097a:      	bl	0x8000994 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h77cc05d90b6d58eeE> @ imm = #0x16
 800097e:      	mov	r1, r0
 8000980:      	ldr	r0, [sp]
 8000982:      	ldr	r1, [r1]
 8000984:      	str	r0, [sp, #0x64]
 8000986:      	str	r1, [sp, #0x68]
 8000988:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800098a:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0xbbc
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800098e:      	b	0x8000990 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output17h081ae95f8af6d4d9E+0x86> @ imm = #-0x2
;                             }
 8000990:      	add	sp, #0x70
 8000992:      	pop	{r7, pc}

08000994 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h77cc05d90b6d58eeE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000994:      	push	{r7, lr}
 8000996:      	mov	r7, sp
 8000998:      	sub	sp, #0x30
 800099a:      	str	r0, [sp, #0x8]
 800099c:      	str	r1, [sp, #0xc]
 800099e:      	str	r1, [sp, #0x14]
;         OT9_W { w: self }
 80009a0:      	str	r1, [sp, #0x10]
;     }
 80009a2:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009a4:      	str	r0, [sp]
 80009a6:      	b	0x80009a8 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h77cc05d90b6d58eeE+0x14> @ imm = #-0x2
 80009a8:      	ldr	r1, [sp]
 80009aa:      	str	r1, [sp, #0x1c]
 80009ac:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 80009ae:      	strb	r0, [r7, #-21]
 80009b2:      	ldrb	r0, [r7, #-21]
 80009b6:      	str	r1, [sp, #0x20]
 80009b8:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 80009bc:      	bl	0x80011a2 <<T as core::convert::Into<U>>::into::h53f96bf7fb51596d> @ imm = #0x7e2
 80009c0:      	ldr	r1, [sp]
 80009c2:      	mov	r2, r0
 80009c4:      	str	r1, [sp, #0x28]
 80009c6:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 9)) | (((value as u32) & 0x01) << 9);
 80009ca:      	ldr	r0, [r1]
 80009cc:      	bic	r0, r0, #0x200
 80009d0:      	orr.w	r0, r0, r2, lsl #9
 80009d4:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80009d6:      	b	0x80009d8 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h77cc05d90b6d58eeE+0x44> @ imm = #-0x2
 80009d8:      	ldr	r0, [sp]
 80009da:      	add	sp, #0x30
 80009dc:      	pop	{r7, pc}

080009de <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h9250a6c0de69858dE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80009de:      	push	{r7, lr}
 80009e0:      	mov	r7, sp
 80009e2:      	sub	sp, #0x30
 80009e4:      	str	r0, [sp, #0x8]
 80009e6:      	str	r1, [sp, #0xc]
 80009e8:      	str	r1, [sp, #0x14]
;         MODER9_W { w: self }
 80009ea:      	str	r1, [sp, #0x10]
;     }
 80009ec:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80009ee:      	str	r0, [sp]
 80009f0:      	b	0x80009f2 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h9250a6c0de69858dE+0x14> @ imm = #-0x2
 80009f2:      	ldr	r1, [sp]
 80009f4:      	str	r1, [sp, #0x1c]
 80009f6:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 80009f8:      	strb	r0, [r7, #-21]
 80009fc:      	ldrb	r0, [r7, #-21]
 8000a00:      	str	r1, [sp, #0x20]
 8000a02:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000a06:      	bl	0x800118c <<T as core::convert::Into<U>>::into::h5ca7d979b3d99e53> @ imm = #0x782
 8000a0a:      	ldr	r1, [sp]
 8000a0c:      	mov	r2, r0
 8000a0e:      	str	r1, [sp, #0x28]
 8000a10:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 18)) | (((value as u32) & 0x03) << 18);
 8000a14:      	ldr	r0, [r1]
 8000a16:      	bic	r0, r0, #0xc0000
 8000a1a:      	and	r2, r2, #0x3
 8000a1e:      	orr.w	r0, r0, r2, lsl #18
 8000a22:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a24:      	b	0x8000a26 <_ZN13stm32f3xx_hal4gpio5gpioe15PE9$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h9250a6c0de69858dE+0x48> @ imm = #-0x2
 8000a26:      	ldr	r0, [sp]
 8000a28:      	add	sp, #0x30
 8000a2a:      	pop	{r7, pc}

08000a2c <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61d8b623baa61a3eE>:
;                             pub fn into_push_pull_output(
 8000a2c:      	push	{r7, lr}
 8000a2e:      	mov	r7, sp
 8000a30:      	sub	sp, #0x70
 8000a32:      	str	r1, [sp, #0x4]
 8000a34:      	str	r0, [sp, #0x10]
 8000a36:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a38:      	bl	0x80012f4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h94bdec6e809f5bad> @ imm = #0x8b8
 8000a3c:      	str	r0, [sp, #0x8]
 8000a3e:      	b	0x8000a40 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61d8b623baa61a3eE+0x14> @ imm = #-0x2
 8000a40:      	ldr	r0, [sp, #0x8]
 8000a42:      	str	r0, [sp, #0x28]
 8000a44:      	str	r0, [sp, #0x30]
 8000a46:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000a48:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0xc4a
;         let bits = self.register.get();
 8000a4c:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000a4e:      	str	r0, [sp, #0x20]
 8000a50:      	str	r0, [sp, #0x24]
 8000a52:      	add	r0, sp, #0x20
 8000a54:      	str	r0, [sp, #0x18]
 8000a56:      	add	r0, sp, #0x24
 8000a58:      	str	r0, [sp, #0x1c]
 8000a5a:      	ldr	r0, [sp, #0x18]
 8000a5c:      	ldr	r1, [sp, #0x1c]
 8000a5e:      	bl	0x8000ab6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h36368b93a42bc1e0E> @ imm = #0x54
 8000a62:      	mov	r1, r0
 8000a64:      	ldr	r0, [sp, #0x8]
 8000a66:      	ldr	r1, [r1]
 8000a68:      	str	r0, [sp, #0x38]
 8000a6a:      	str	r1, [sp, #0x3c]
 8000a6c:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000a6e:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0xad8
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000a72:      	b	0x8000a74 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61d8b623baa61a3eE+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000a74:      	ldr	r0, [sp, #0x4]
 8000a76:      	bl	0x8001306 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h8faa8f8b7a5cd11a> @ imm = #0x88c
 8000a7a:      	str	r0, [sp]
 8000a7c:      	b	0x8000a7e <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61d8b623baa61a3eE+0x52> @ imm = #-0x2
 8000a7e:      	ldr	r0, [sp]
 8000a80:      	str	r0, [sp, #0x54]
 8000a82:      	str	r0, [sp, #0x5c]
 8000a84:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000a86:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0xc0c
;         let bits = self.register.get();
 8000a8a:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000a8c:      	str	r0, [sp, #0x4c]
 8000a8e:      	str	r0, [sp, #0x50]
 8000a90:      	add	r0, sp, #0x4c
 8000a92:      	str	r0, [sp, #0x44]
 8000a94:      	add	r0, sp, #0x50
 8000a96:      	str	r0, [sp, #0x48]
 8000a98:      	ldr	r0, [sp, #0x44]
 8000a9a:      	ldr	r1, [sp, #0x48]
 8000a9c:      	bl	0x8000b04 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h987b62ac35d3049fE> @ imm = #0x64
 8000aa0:      	mov	r1, r0
 8000aa2:      	ldr	r0, [sp]
 8000aa4:      	ldr	r1, [r1]
 8000aa6:      	str	r0, [sp, #0x64]
 8000aa8:      	str	r1, [sp, #0x68]
 8000aaa:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000aac:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0xa9a
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000ab0:      	b	0x8000ab2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output17h61d8b623baa61a3eE+0x86> @ imm = #-0x2
;                             }
 8000ab2:      	add	sp, #0x70
 8000ab4:      	pop	{r7, pc}

08000ab6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h36368b93a42bc1e0E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ab6:      	push	{r7, lr}
 8000ab8:      	mov	r7, sp
 8000aba:      	sub	sp, #0x30
 8000abc:      	str	r0, [sp, #0x8]
 8000abe:      	str	r1, [sp, #0xc]
 8000ac0:      	str	r1, [sp, #0x14]
;         MODER10_W { w: self }
 8000ac2:      	str	r1, [sp, #0x10]
;     }
 8000ac4:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ac6:      	str	r0, [sp]
 8000ac8:      	b	0x8000aca <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h36368b93a42bc1e0E+0x14> @ imm = #-0x2
 8000aca:      	ldr	r1, [sp]
 8000acc:      	str	r1, [sp, #0x1c]
 8000ace:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000ad0:      	strb	r0, [r7, #-21]
 8000ad4:      	ldrb	r0, [r7, #-21]
 8000ad8:      	str	r1, [sp, #0x20]
 8000ada:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000ade:      	bl	0x800118c <<T as core::convert::Into<U>>::into::h5ca7d979b3d99e53> @ imm = #0x6aa
 8000ae2:      	ldr	r1, [sp]
 8000ae4:      	mov	r2, r0
 8000ae6:      	str	r1, [sp, #0x28]
 8000ae8:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 20)) | (((value as u32) & 0x03) << 20);
 8000aec:      	ldr	r0, [r1]
 8000aee:      	bic	r0, r0, #0x300000
 8000af2:      	and	r2, r2, #0x3
 8000af6:      	orr.w	r0, r0, r2, lsl #20
 8000afa:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000afc:      	b	0x8000afe <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h36368b93a42bc1e0E+0x48> @ imm = #-0x2
 8000afe:      	ldr	r0, [sp]
 8000b00:      	add	sp, #0x30
 8000b02:      	pop	{r7, pc}

08000b04 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h987b62ac35d3049fE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b04:      	push	{r7, lr}
 8000b06:      	mov	r7, sp
 8000b08:      	sub	sp, #0x30
 8000b0a:      	str	r0, [sp, #0x8]
 8000b0c:      	str	r1, [sp, #0xc]
 8000b0e:      	str	r1, [sp, #0x14]
;         OT10_W { w: self }
 8000b10:      	str	r1, [sp, #0x10]
;     }
 8000b12:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b14:      	str	r0, [sp]
 8000b16:      	b	0x8000b18 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h987b62ac35d3049fE+0x14> @ imm = #-0x2
 8000b18:      	ldr	r1, [sp]
 8000b1a:      	str	r1, [sp, #0x1c]
 8000b1c:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000b1e:      	strb	r0, [r7, #-21]
 8000b22:      	ldrb	r0, [r7, #-21]
 8000b26:      	str	r1, [sp, #0x20]
 8000b28:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000b2c:      	bl	0x80011a2 <<T as core::convert::Into<U>>::into::h53f96bf7fb51596d> @ imm = #0x672
 8000b30:      	ldr	r1, [sp]
 8000b32:      	mov	r2, r0
 8000b34:      	str	r1, [sp, #0x28]
 8000b36:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 10)) | (((value as u32) & 0x01) << 10);
 8000b3a:      	ldr	r0, [r1]
 8000b3c:      	bic	r0, r0, #0x400
 8000b40:      	orr.w	r0, r0, r2, lsl #10
 8000b44:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b46:      	b	0x8000b48 <_ZN13stm32f3xx_hal4gpio5gpioe16PE10$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h987b62ac35d3049fE+0x44> @ imm = #-0x2
 8000b48:      	ldr	r0, [sp]
 8000b4a:      	add	sp, #0x30
 8000b4c:      	pop	{r7, pc}

08000b4e <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h5d076789e8cecd90E>:
;                             pub fn into_push_pull_output(
 8000b4e:      	push	{r7, lr}
 8000b50:      	mov	r7, sp
 8000b52:      	sub	sp, #0x70
 8000b54:      	str	r1, [sp, #0x4]
 8000b56:      	str	r0, [sp, #0x10]
 8000b58:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b5a:      	bl	0x80012f4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h94bdec6e809f5bad> @ imm = #0x796
 8000b5e:      	str	r0, [sp, #0x8]
 8000b60:      	b	0x8000b62 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h5d076789e8cecd90E+0x14> @ imm = #-0x2
 8000b62:      	ldr	r0, [sp, #0x8]
 8000b64:      	str	r0, [sp, #0x28]
 8000b66:      	str	r0, [sp, #0x30]
 8000b68:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000b6a:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0xb28
;         let bits = self.register.get();
 8000b6e:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000b70:      	str	r0, [sp, #0x20]
 8000b72:      	str	r0, [sp, #0x24]
 8000b74:      	add	r0, sp, #0x20
 8000b76:      	str	r0, [sp, #0x18]
 8000b78:      	add	r0, sp, #0x24
 8000b7a:      	str	r0, [sp, #0x1c]
 8000b7c:      	ldr	r0, [sp, #0x18]
 8000b7e:      	ldr	r1, [sp, #0x1c]
 8000b80:      	bl	0x8000c22 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7f853c3e2dfbf140E> @ imm = #0x9e
 8000b84:      	mov	r1, r0
 8000b86:      	ldr	r0, [sp, #0x8]
 8000b88:      	ldr	r1, [r1]
 8000b8a:      	str	r0, [sp, #0x38]
 8000b8c:      	str	r1, [sp, #0x3c]
 8000b8e:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000b90:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x9b6
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000b94:      	b	0x8000b96 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h5d076789e8cecd90E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000b96:      	ldr	r0, [sp, #0x4]
 8000b98:      	bl	0x8001306 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h8faa8f8b7a5cd11a> @ imm = #0x76a
 8000b9c:      	str	r0, [sp]
 8000b9e:      	b	0x8000ba0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h5d076789e8cecd90E+0x52> @ imm = #-0x2
 8000ba0:      	ldr	r0, [sp]
 8000ba2:      	str	r0, [sp, #0x54]
 8000ba4:      	str	r0, [sp, #0x5c]
 8000ba6:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000ba8:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0xaea
;         let bits = self.register.get();
 8000bac:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000bae:      	str	r0, [sp, #0x4c]
 8000bb0:      	str	r0, [sp, #0x50]
 8000bb2:      	add	r0, sp, #0x4c
 8000bb4:      	str	r0, [sp, #0x44]
 8000bb6:      	add	r0, sp, #0x50
 8000bb8:      	str	r0, [sp, #0x48]
 8000bba:      	ldr	r0, [sp, #0x44]
 8000bbc:      	ldr	r1, [sp, #0x48]
 8000bbe:      	bl	0x8000bd8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7ceaaf9ca3c67822E> @ imm = #0x16
 8000bc2:      	mov	r1, r0
 8000bc4:      	ldr	r0, [sp]
 8000bc6:      	ldr	r1, [r1]
 8000bc8:      	str	r0, [sp, #0x64]
 8000bca:      	str	r1, [sp, #0x68]
 8000bcc:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000bce:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x978
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000bd2:      	b	0x8000bd4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output17h5d076789e8cecd90E+0x86> @ imm = #-0x2
;                             }
 8000bd4:      	add	sp, #0x70
 8000bd6:      	pop	{r7, pc}

08000bd8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7ceaaf9ca3c67822E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000bd8:      	push	{r7, lr}
 8000bda:      	mov	r7, sp
 8000bdc:      	sub	sp, #0x30
 8000bde:      	str	r0, [sp, #0x8]
 8000be0:      	str	r1, [sp, #0xc]
 8000be2:      	str	r1, [sp, #0x14]
;         OT11_W { w: self }
 8000be4:      	str	r1, [sp, #0x10]
;     }
 8000be6:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000be8:      	str	r0, [sp]
 8000bea:      	b	0x8000bec <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7ceaaf9ca3c67822E+0x14> @ imm = #-0x2
 8000bec:      	ldr	r1, [sp]
 8000bee:      	str	r1, [sp, #0x1c]
 8000bf0:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000bf2:      	strb	r0, [r7, #-21]
 8000bf6:      	ldrb	r0, [r7, #-21]
 8000bfa:      	str	r1, [sp, #0x20]
 8000bfc:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000c00:      	bl	0x80011a2 <<T as core::convert::Into<U>>::into::h53f96bf7fb51596d> @ imm = #0x59e
 8000c04:      	ldr	r1, [sp]
 8000c06:      	mov	r2, r0
 8000c08:      	str	r1, [sp, #0x28]
 8000c0a:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 11)) | (((value as u32) & 0x01) << 11);
 8000c0e:      	ldr	r0, [r1]
 8000c10:      	bic	r0, r0, #0x800
 8000c14:      	orr.w	r0, r0, r2, lsl #11
 8000c18:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000c1a:      	b	0x8000c1c <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7ceaaf9ca3c67822E+0x44> @ imm = #-0x2
 8000c1c:      	ldr	r0, [sp]
 8000c1e:      	add	sp, #0x30
 8000c20:      	pop	{r7, pc}

08000c22 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7f853c3e2dfbf140E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c22:      	push	{r7, lr}
 8000c24:      	mov	r7, sp
 8000c26:      	sub	sp, #0x30
 8000c28:      	str	r0, [sp, #0x8]
 8000c2a:      	str	r1, [sp, #0xc]
 8000c2c:      	str	r1, [sp, #0x14]
;         MODER11_W { w: self }
 8000c2e:      	str	r1, [sp, #0x10]
;     }
 8000c30:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c32:      	str	r0, [sp]
 8000c34:      	b	0x8000c36 <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7f853c3e2dfbf140E+0x14> @ imm = #-0x2
 8000c36:      	ldr	r1, [sp]
 8000c38:      	str	r1, [sp, #0x1c]
 8000c3a:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000c3c:      	strb	r0, [r7, #-21]
 8000c40:      	ldrb	r0, [r7, #-21]
 8000c44:      	str	r1, [sp, #0x20]
 8000c46:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000c4a:      	bl	0x800118c <<T as core::convert::Into<U>>::into::h5ca7d979b3d99e53> @ imm = #0x53e
 8000c4e:      	ldr	r1, [sp]
 8000c50:      	mov	r2, r0
 8000c52:      	str	r1, [sp, #0x28]
 8000c54:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 22)) | (((value as u32) & 0x03) << 22);
 8000c58:      	ldr	r0, [r1]
 8000c5a:      	bic	r0, r0, #0xc00000
 8000c5e:      	and	r2, r2, #0x3
 8000c62:      	orr.w	r0, r0, r2, lsl #22
 8000c66:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c68:      	b	0x8000c6a <_ZN13stm32f3xx_hal4gpio5gpioe16PE11$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h7f853c3e2dfbf140E+0x48> @ imm = #-0x2
 8000c6a:      	ldr	r0, [sp]
 8000c6c:      	add	sp, #0x30
 8000c6e:      	pop	{r7, pc}

08000c70 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h75c11794dde01080E>:
;                             pub fn into_push_pull_output(
 8000c70:      	push	{r7, lr}
 8000c72:      	mov	r7, sp
 8000c74:      	sub	sp, #0x70
 8000c76:      	str	r1, [sp, #0x4]
 8000c78:      	str	r0, [sp, #0x10]
 8000c7a:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000c7c:      	bl	0x80012f4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h94bdec6e809f5bad> @ imm = #0x674
 8000c80:      	str	r0, [sp, #0x8]
 8000c82:      	b	0x8000c84 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h75c11794dde01080E+0x14> @ imm = #-0x2
 8000c84:      	ldr	r0, [sp, #0x8]
 8000c86:      	str	r0, [sp, #0x28]
 8000c88:      	str	r0, [sp, #0x30]
 8000c8a:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000c8c:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0xa06
;         let bits = self.register.get();
 8000c90:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000c92:      	str	r0, [sp, #0x20]
 8000c94:      	str	r0, [sp, #0x24]
 8000c96:      	add	r0, sp, #0x20
 8000c98:      	str	r0, [sp, #0x18]
 8000c9a:      	add	r0, sp, #0x24
 8000c9c:      	str	r0, [sp, #0x1c]
 8000c9e:      	ldr	r0, [sp, #0x18]
 8000ca0:      	ldr	r1, [sp, #0x1c]
 8000ca2:      	bl	0x8000cfa <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h44a32b155dd58a8bE> @ imm = #0x54
 8000ca6:      	mov	r1, r0
 8000ca8:      	ldr	r0, [sp, #0x8]
 8000caa:      	ldr	r1, [r1]
 8000cac:      	str	r0, [sp, #0x38]
 8000cae:      	str	r1, [sp, #0x3c]
 8000cb0:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000cb2:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x894
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000cb6:      	b	0x8000cb8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h75c11794dde01080E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000cb8:      	ldr	r0, [sp, #0x4]
 8000cba:      	bl	0x8001306 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h8faa8f8b7a5cd11a> @ imm = #0x648
 8000cbe:      	str	r0, [sp]
 8000cc0:      	b	0x8000cc2 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h75c11794dde01080E+0x52> @ imm = #-0x2
 8000cc2:      	ldr	r0, [sp]
 8000cc4:      	str	r0, [sp, #0x54]
 8000cc6:      	str	r0, [sp, #0x5c]
 8000cc8:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000cca:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0x9c8
;         let bits = self.register.get();
 8000cce:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000cd0:      	str	r0, [sp, #0x4c]
 8000cd2:      	str	r0, [sp, #0x50]
 8000cd4:      	add	r0, sp, #0x4c
 8000cd6:      	str	r0, [sp, #0x44]
 8000cd8:      	add	r0, sp, #0x50
 8000cda:      	str	r0, [sp, #0x48]
 8000cdc:      	ldr	r0, [sp, #0x44]
 8000cde:      	ldr	r1, [sp, #0x48]
 8000ce0:      	bl	0x8000d48 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf61ee71d21666f7fE> @ imm = #0x64
 8000ce4:      	mov	r1, r0
 8000ce6:      	ldr	r0, [sp]
 8000ce8:      	ldr	r1, [r1]
 8000cea:      	str	r0, [sp, #0x64]
 8000cec:      	str	r1, [sp, #0x68]
 8000cee:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000cf0:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x856
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000cf4:      	b	0x8000cf6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output17h75c11794dde01080E+0x86> @ imm = #-0x2
;                             }
 8000cf6:      	add	sp, #0x70
 8000cf8:      	pop	{r7, pc}

08000cfa <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h44a32b155dd58a8bE>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000cfa:      	push	{r7, lr}
 8000cfc:      	mov	r7, sp
 8000cfe:      	sub	sp, #0x30
 8000d00:      	str	r0, [sp, #0x8]
 8000d02:      	str	r1, [sp, #0xc]
 8000d04:      	str	r1, [sp, #0x14]
;         MODER12_W { w: self }
 8000d06:      	str	r1, [sp, #0x10]
;     }
 8000d08:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d0a:      	str	r0, [sp]
 8000d0c:      	b	0x8000d0e <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h44a32b155dd58a8bE+0x14> @ imm = #-0x2
 8000d0e:      	ldr	r1, [sp]
 8000d10:      	str	r1, [sp, #0x1c]
 8000d12:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000d14:      	strb	r0, [r7, #-21]
 8000d18:      	ldrb	r0, [r7, #-21]
 8000d1c:      	str	r1, [sp, #0x20]
 8000d1e:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000d22:      	bl	0x800118c <<T as core::convert::Into<U>>::into::h5ca7d979b3d99e53> @ imm = #0x466
 8000d26:      	ldr	r1, [sp]
 8000d28:      	mov	r2, r0
 8000d2a:      	str	r1, [sp, #0x28]
 8000d2c:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 24)) | (((value as u32) & 0x03) << 24);
 8000d30:      	ldr	r0, [r1]
 8000d32:      	bic	r0, r0, #0x3000000
 8000d36:      	and	r2, r2, #0x3
 8000d3a:      	orr.w	r0, r0, r2, lsl #24
 8000d3e:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d40:      	b	0x8000d42 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h44a32b155dd58a8bE+0x48> @ imm = #-0x2
 8000d42:      	ldr	r0, [sp]
 8000d44:      	add	sp, #0x30
 8000d46:      	pop	{r7, pc}

08000d48 <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf61ee71d21666f7fE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d48:      	push	{r7, lr}
 8000d4a:      	mov	r7, sp
 8000d4c:      	sub	sp, #0x30
 8000d4e:      	str	r0, [sp, #0x8]
 8000d50:      	str	r1, [sp, #0xc]
 8000d52:      	str	r1, [sp, #0x14]
;         OT12_W { w: self }
 8000d54:      	str	r1, [sp, #0x10]
;     }
 8000d56:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d58:      	str	r0, [sp]
 8000d5a:      	b	0x8000d5c <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf61ee71d21666f7fE+0x14> @ imm = #-0x2
 8000d5c:      	ldr	r1, [sp]
 8000d5e:      	str	r1, [sp, #0x1c]
 8000d60:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000d62:      	strb	r0, [r7, #-21]
 8000d66:      	ldrb	r0, [r7, #-21]
 8000d6a:      	str	r1, [sp, #0x20]
 8000d6c:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000d70:      	bl	0x80011a2 <<T as core::convert::Into<U>>::into::h53f96bf7fb51596d> @ imm = #0x42e
 8000d74:      	ldr	r1, [sp]
 8000d76:      	mov	r2, r0
 8000d78:      	str	r1, [sp, #0x28]
 8000d7a:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 12)) | (((value as u32) & 0x01) << 12);
 8000d7e:      	ldr	r0, [r1]
 8000d80:      	bic	r0, r0, #0x1000
 8000d84:      	orr.w	r0, r0, r2, lsl #12
 8000d88:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000d8a:      	b	0x8000d8c <_ZN13stm32f3xx_hal4gpio5gpioe16PE12$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hf61ee71d21666f7fE+0x44> @ imm = #-0x2
 8000d8c:      	ldr	r0, [sp]
 8000d8e:      	add	sp, #0x30
 8000d90:      	pop	{r7, pc}

08000d92 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h69ae0882e2a77d7cE>:
;                             pub fn into_push_pull_output(
 8000d92:      	push	{r7, lr}
 8000d94:      	mov	r7, sp
 8000d96:      	sub	sp, #0x70
 8000d98:      	str	r1, [sp, #0x4]
 8000d9a:      	str	r0, [sp, #0x10]
 8000d9c:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000d9e:      	bl	0x80012f4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h94bdec6e809f5bad> @ imm = #0x552
 8000da2:      	str	r0, [sp, #0x8]
 8000da4:      	b	0x8000da6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h69ae0882e2a77d7cE+0x14> @ imm = #-0x2
 8000da6:      	ldr	r0, [sp, #0x8]
 8000da8:      	str	r0, [sp, #0x28]
 8000daa:      	str	r0, [sp, #0x30]
 8000dac:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000dae:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0x8e4
;         let bits = self.register.get();
 8000db2:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000db4:      	str	r0, [sp, #0x20]
 8000db6:      	str	r0, [sp, #0x24]
 8000db8:      	add	r0, sp, #0x20
 8000dba:      	str	r0, [sp, #0x18]
 8000dbc:      	add	r0, sp, #0x24
 8000dbe:      	str	r0, [sp, #0x1c]
 8000dc0:      	ldr	r0, [sp, #0x18]
 8000dc2:      	ldr	r1, [sp, #0x1c]
 8000dc4:      	bl	0x8000e66 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hecbaec80785bee32E> @ imm = #0x9e
 8000dc8:      	mov	r1, r0
 8000dca:      	ldr	r0, [sp, #0x8]
 8000dcc:      	ldr	r1, [r1]
 8000dce:      	str	r0, [sp, #0x38]
 8000dd0:      	str	r1, [sp, #0x3c]
 8000dd2:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000dd4:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x772
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000dd8:      	b	0x8000dda <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h69ae0882e2a77d7cE+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000dda:      	ldr	r0, [sp, #0x4]
 8000ddc:      	bl	0x8001306 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h8faa8f8b7a5cd11a> @ imm = #0x526
 8000de0:      	str	r0, [sp]
 8000de2:      	b	0x8000de4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h69ae0882e2a77d7cE+0x52> @ imm = #-0x2
 8000de4:      	ldr	r0, [sp]
 8000de6:      	str	r0, [sp, #0x54]
 8000de8:      	str	r0, [sp, #0x5c]
 8000dea:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000dec:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0x8a6
;         let bits = self.register.get();
 8000df0:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000df2:      	str	r0, [sp, #0x4c]
 8000df4:      	str	r0, [sp, #0x50]
 8000df6:      	add	r0, sp, #0x4c
 8000df8:      	str	r0, [sp, #0x44]
 8000dfa:      	add	r0, sp, #0x50
 8000dfc:      	str	r0, [sp, #0x48]
 8000dfe:      	ldr	r0, [sp, #0x44]
 8000e00:      	ldr	r1, [sp, #0x48]
 8000e02:      	bl	0x8000e1c <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5484fb2fdd4c028eE> @ imm = #0x16
 8000e06:      	mov	r1, r0
 8000e08:      	ldr	r0, [sp]
 8000e0a:      	ldr	r1, [r1]
 8000e0c:      	str	r0, [sp, #0x64]
 8000e0e:      	str	r1, [sp, #0x68]
 8000e10:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000e12:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x734
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e16:      	b	0x8000e18 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output17h69ae0882e2a77d7cE+0x86> @ imm = #-0x2
;                             }
 8000e18:      	add	sp, #0x70
 8000e1a:      	pop	{r7, pc}

08000e1c <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5484fb2fdd4c028eE>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e1c:      	push	{r7, lr}
 8000e1e:      	mov	r7, sp
 8000e20:      	sub	sp, #0x30
 8000e22:      	str	r0, [sp, #0x8]
 8000e24:      	str	r1, [sp, #0xc]
 8000e26:      	str	r1, [sp, #0x14]
;         OT13_W { w: self }
 8000e28:      	str	r1, [sp, #0x10]
;     }
 8000e2a:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e2c:      	str	r0, [sp]
 8000e2e:      	b	0x8000e30 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5484fb2fdd4c028eE+0x14> @ imm = #-0x2
 8000e30:      	ldr	r1, [sp]
 8000e32:      	str	r1, [sp, #0x1c]
 8000e34:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000e36:      	strb	r0, [r7, #-21]
 8000e3a:      	ldrb	r0, [r7, #-21]
 8000e3e:      	str	r1, [sp, #0x20]
 8000e40:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000e44:      	bl	0x80011a2 <<T as core::convert::Into<U>>::into::h53f96bf7fb51596d> @ imm = #0x35a
 8000e48:      	ldr	r1, [sp]
 8000e4a:      	mov	r2, r0
 8000e4c:      	str	r1, [sp, #0x28]
 8000e4e:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 13)) | (((value as u32) & 0x01) << 13);
 8000e52:      	ldr	r0, [r1]
 8000e54:      	bic	r0, r0, #0x2000
 8000e58:      	orr.w	r0, r0, r2, lsl #13
 8000e5c:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000e5e:      	b	0x8000e60 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5484fb2fdd4c028eE+0x44> @ imm = #-0x2
 8000e60:      	ldr	r0, [sp]
 8000e62:      	add	sp, #0x30
 8000e64:      	pop	{r7, pc}

08000e66 <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hecbaec80785bee32E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e66:      	push	{r7, lr}
 8000e68:      	mov	r7, sp
 8000e6a:      	sub	sp, #0x30
 8000e6c:      	str	r0, [sp, #0x8]
 8000e6e:      	str	r1, [sp, #0xc]
 8000e70:      	str	r1, [sp, #0x14]
;         MODER13_W { w: self }
 8000e72:      	str	r1, [sp, #0x10]
;     }
 8000e74:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000e76:      	str	r0, [sp]
 8000e78:      	b	0x8000e7a <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hecbaec80785bee32E+0x14> @ imm = #-0x2
 8000e7a:      	ldr	r1, [sp]
 8000e7c:      	str	r1, [sp, #0x1c]
 8000e7e:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000e80:      	strb	r0, [r7, #-21]
 8000e84:      	ldrb	r0, [r7, #-21]
 8000e88:      	str	r1, [sp, #0x20]
 8000e8a:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000e8e:      	bl	0x800118c <<T as core::convert::Into<U>>::into::h5ca7d979b3d99e53> @ imm = #0x2fa
 8000e92:      	ldr	r1, [sp]
 8000e94:      	mov	r2, r0
 8000e96:      	str	r1, [sp, #0x28]
 8000e98:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 26)) | (((value as u32) & 0x03) << 26);
 8000e9c:      	ldr	r0, [r1]
 8000e9e:      	bic	r0, r0, #0xc000000
 8000ea2:      	and	r2, r2, #0x3
 8000ea6:      	orr.w	r0, r0, r2, lsl #26
 8000eaa:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000eac:      	b	0x8000eae <_ZN13stm32f3xx_hal4gpio5gpioe16PE13$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17hecbaec80785bee32E+0x48> @ imm = #-0x2
 8000eae:      	ldr	r0, [sp]
 8000eb0:      	add	sp, #0x30
 8000eb2:      	pop	{r7, pc}

08000eb4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hff079aa60e517a12E>:
;                             pub fn into_push_pull_output(
 8000eb4:      	push	{r7, lr}
 8000eb6:      	mov	r7, sp
 8000eb8:      	sub	sp, #0x70
 8000eba:      	str	r1, [sp, #0x4]
 8000ebc:      	str	r0, [sp, #0x10]
 8000ebe:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000ec0:      	bl	0x80012f4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h94bdec6e809f5bad> @ imm = #0x430
 8000ec4:      	str	r0, [sp, #0x8]
 8000ec6:      	b	0x8000ec8 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hff079aa60e517a12E+0x14> @ imm = #-0x2
 8000ec8:      	ldr	r0, [sp, #0x8]
 8000eca:      	str	r0, [sp, #0x28]
 8000ecc:      	str	r0, [sp, #0x30]
 8000ece:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000ed0:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0x7c2
;         let bits = self.register.get();
 8000ed4:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000ed6:      	str	r0, [sp, #0x20]
 8000ed8:      	str	r0, [sp, #0x24]
 8000eda:      	add	r0, sp, #0x20
 8000edc:      	str	r0, [sp, #0x18]
 8000ede:      	add	r0, sp, #0x24
 8000ee0:      	str	r0, [sp, #0x1c]
 8000ee2:      	ldr	r0, [sp, #0x18]
 8000ee4:      	ldr	r1, [sp, #0x1c]
 8000ee6:      	bl	0x8000f3e <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h06ddedf682d663f4E> @ imm = #0x54
 8000eea:      	mov	r1, r0
 8000eec:      	ldr	r0, [sp, #0x8]
 8000eee:      	ldr	r1, [r1]
 8000ef0:      	str	r0, [sp, #0x38]
 8000ef2:      	str	r1, [sp, #0x3c]
 8000ef4:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000ef6:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x650
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000efa:      	b	0x8000efc <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hff079aa60e517a12E+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000efc:      	ldr	r0, [sp, #0x4]
 8000efe:      	bl	0x8001306 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h8faa8f8b7a5cd11a> @ imm = #0x404
 8000f02:      	str	r0, [sp]
 8000f04:      	b	0x8000f06 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hff079aa60e517a12E+0x52> @ imm = #-0x2
 8000f06:      	ldr	r0, [sp]
 8000f08:      	str	r0, [sp, #0x54]
 8000f0a:      	str	r0, [sp, #0x5c]
 8000f0c:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000f0e:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0x784
;         let bits = self.register.get();
 8000f12:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000f14:      	str	r0, [sp, #0x4c]
 8000f16:      	str	r0, [sp, #0x50]
 8000f18:      	add	r0, sp, #0x4c
 8000f1a:      	str	r0, [sp, #0x44]
 8000f1c:      	add	r0, sp, #0x50
 8000f1e:      	str	r0, [sp, #0x48]
 8000f20:      	ldr	r0, [sp, #0x44]
 8000f22:      	ldr	r1, [sp, #0x48]
 8000f24:      	bl	0x8000f8c <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5fee6c207f4e1641E> @ imm = #0x64
 8000f28:      	mov	r1, r0
 8000f2a:      	ldr	r0, [sp]
 8000f2c:      	ldr	r1, [r1]
 8000f2e:      	str	r0, [sp, #0x64]
 8000f30:      	str	r1, [sp, #0x68]
 8000f32:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8000f34:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x612
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f38:      	b	0x8000f3a <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output17hff079aa60e517a12E+0x86> @ imm = #-0x2
;                             }
 8000f3a:      	add	sp, #0x70
 8000f3c:      	pop	{r7, pc}

08000f3e <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h06ddedf682d663f4E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f3e:      	push	{r7, lr}
 8000f40:      	mov	r7, sp
 8000f42:      	sub	sp, #0x30
 8000f44:      	str	r0, [sp, #0x8]
 8000f46:      	str	r1, [sp, #0xc]
 8000f48:      	str	r1, [sp, #0x14]
;         MODER14_W { w: self }
 8000f4a:      	str	r1, [sp, #0x10]
;     }
 8000f4c:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f4e:      	str	r0, [sp]
 8000f50:      	b	0x8000f52 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h06ddedf682d663f4E+0x14> @ imm = #-0x2
 8000f52:      	ldr	r1, [sp]
 8000f54:      	str	r1, [sp, #0x1c]
 8000f56:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 8000f58:      	strb	r0, [r7, #-21]
 8000f5c:      	ldrb	r0, [r7, #-21]
 8000f60:      	str	r1, [sp, #0x20]
 8000f62:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8000f66:      	bl	0x800118c <<T as core::convert::Into<U>>::into::h5ca7d979b3d99e53> @ imm = #0x222
 8000f6a:      	ldr	r1, [sp]
 8000f6c:      	mov	r2, r0
 8000f6e:      	str	r1, [sp, #0x28]
 8000f70:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 28)) | (((value as u32) & 0x03) << 28);
 8000f74:      	ldr	r0, [r1]
 8000f76:      	bic	r0, r0, #0x30000000
 8000f7a:      	and	r2, r2, #0x3
 8000f7e:      	orr.w	r0, r0, r2, lsl #28
 8000f82:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000f84:      	b	0x8000f86 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h06ddedf682d663f4E+0x48> @ imm = #-0x2
 8000f86:      	ldr	r0, [sp]
 8000f88:      	add	sp, #0x30
 8000f8a:      	pop	{r7, pc}

08000f8c <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5fee6c207f4e1641E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f8c:      	push	{r7, lr}
 8000f8e:      	mov	r7, sp
 8000f90:      	sub	sp, #0x30
 8000f92:      	str	r0, [sp, #0x8]
 8000f94:      	str	r1, [sp, #0xc]
 8000f96:      	str	r1, [sp, #0x14]
;         OT14_W { w: self }
 8000f98:      	str	r1, [sp, #0x10]
;     }
 8000f9a:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000f9c:      	str	r0, [sp]
 8000f9e:      	b	0x8000fa0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5fee6c207f4e1641E+0x14> @ imm = #-0x2
 8000fa0:      	ldr	r1, [sp]
 8000fa2:      	str	r1, [sp, #0x1c]
 8000fa4:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 8000fa6:      	strb	r0, [r7, #-21]
 8000faa:      	ldrb	r0, [r7, #-21]
 8000fae:      	str	r1, [sp, #0x20]
 8000fb0:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 8000fb4:      	bl	0x80011a2 <<T as core::convert::Into<U>>::into::h53f96bf7fb51596d> @ imm = #0x1ea
 8000fb8:      	ldr	r1, [sp]
 8000fba:      	mov	r2, r0
 8000fbc:      	str	r1, [sp, #0x28]
 8000fbe:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 14)) | (((value as u32) & 0x01) << 14);
 8000fc2:      	ldr	r0, [r1]
 8000fc4:      	bic	r0, r0, #0x4000
 8000fc8:      	orr.w	r0, r0, r2, lsl #14
 8000fcc:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 8000fce:      	b	0x8000fd0 <_ZN13stm32f3xx_hal4gpio5gpioe16PE14$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5fee6c207f4e1641E+0x44> @ imm = #-0x2
 8000fd0:      	ldr	r0, [sp]
 8000fd2:      	add	sp, #0x30
 8000fd4:      	pop	{r7, pc}

08000fd6 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h3db4d70856de266cE>:
;                             pub fn into_push_pull_output(
 8000fd6:      	push	{r7, lr}
 8000fd8:      	mov	r7, sp
 8000fda:      	sub	sp, #0x70
 8000fdc:      	str	r1, [sp, #0x4]
 8000fde:      	str	r0, [sp, #0x10]
 8000fe0:      	str	r1, [sp, #0x14]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8000fe2:      	bl	0x80012f4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h94bdec6e809f5bad> @ imm = #0x30e
 8000fe6:      	str	r0, [sp, #0x8]
 8000fe8:      	b	0x8000fea <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h3db4d70856de266cE+0x14> @ imm = #-0x2
 8000fea:      	ldr	r0, [sp, #0x8]
 8000fec:      	str	r0, [sp, #0x28]
 8000fee:      	str	r0, [sp, #0x30]
 8000ff0:      	str	r0, [sp, #0x34]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8000ff2:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0x6a0
;         let bits = self.register.get();
 8000ff6:      	str	r0, [sp, #0x2c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8000ff8:      	str	r0, [sp, #0x20]
 8000ffa:      	str	r0, [sp, #0x24]
 8000ffc:      	add	r0, sp, #0x20
 8000ffe:      	str	r0, [sp, #0x18]
 8001000:      	add	r0, sp, #0x24
 8001002:      	str	r0, [sp, #0x1c]
 8001004:      	ldr	r0, [sp, #0x18]
 8001006:      	ldr	r1, [sp, #0x1c]
 8001008:      	bl	0x8001060 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h24d434375ce71cb5E> @ imm = #0x54
 800100c:      	mov	r1, r0
 800100e:      	ldr	r0, [sp, #0x8]
 8001010:      	ldr	r1, [r1]
 8001012:      	str	r0, [sp, #0x38]
 8001014:      	str	r1, [sp, #0x3c]
 8001016:      	str	r0, [sp, #0x40]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001018:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x52e
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 800101c:      	b	0x800101e <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h3db4d70856de266cE+0x48> @ imm = #-0x2
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800101e:      	ldr	r0, [sp, #0x4]
 8001020:      	bl	0x8001306 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h8faa8f8b7a5cd11a> @ imm = #0x2e2
 8001024:      	str	r0, [sp]
 8001026:      	b	0x8001028 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h3db4d70856de266cE+0x52> @ imm = #-0x2
 8001028:      	ldr	r0, [sp]
 800102a:      	str	r0, [sp, #0x54]
 800102c:      	str	r0, [sp, #0x5c]
 800102e:      	str	r0, [sp, #0x60]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001030:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0x662
;         let bits = self.register.get();
 8001034:      	str	r0, [sp, #0x58]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 8001036:      	str	r0, [sp, #0x4c]
 8001038:      	str	r0, [sp, #0x50]
 800103a:      	add	r0, sp, #0x4c
 800103c:      	str	r0, [sp, #0x44]
 800103e:      	add	r0, sp, #0x50
 8001040:      	str	r0, [sp, #0x48]
 8001042:      	ldr	r0, [sp, #0x44]
 8001044:      	ldr	r1, [sp, #0x48]
 8001046:      	bl	0x80010aa <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5f8a963353ca62e9E> @ imm = #0x60
 800104a:      	mov	r1, r0
 800104c:      	ldr	r0, [sp]
 800104e:      	ldr	r1, [r1]
 8001050:      	str	r0, [sp, #0x64]
 8001052:      	str	r1, [sp, #0x68]
 8001054:      	str	r0, [sp, #0x6c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 8001056:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x4f0
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 800105a:      	b	0x800105c <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output17h3db4d70856de266cE+0x86> @ imm = #-0x2
;                             }
 800105c:      	add	sp, #0x70
 800105e:      	pop	{r7, pc}

08001060 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h24d434375ce71cb5E>:
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001060:      	push	{r7, lr}
 8001062:      	mov	r7, sp
 8001064:      	sub	sp, #0x30
 8001066:      	str	r0, [sp, #0x8]
 8001068:      	str	r1, [sp, #0xc]
 800106a:      	str	r1, [sp, #0x14]
;         MODER15_W { w: self }
 800106c:      	str	r1, [sp, #0x10]
;     }
 800106e:      	ldr	r0, [sp, #0x10]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 8001070:      	str	r0, [sp]
 8001072:      	b	0x8001074 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h24d434375ce71cb5E+0x14> @ imm = #-0x2
 8001074:      	ldr	r1, [sp]
 8001076:      	str	r1, [sp, #0x1c]
 8001078:      	movs	r0, #0x1
;         self.variant(MODER15_A::OUTPUT)
 800107a:      	strb	r0, [r7, #-21]
 800107e:      	ldrb	r0, [r7, #-21]
 8001082:      	str	r1, [sp, #0x20]
 8001084:      	strb	r0, [r7, #-9]
;             self.bits(variant.into())
 8001088:      	bl	0x800118c <<T as core::convert::Into<U>>::into::h5ca7d979b3d99e53> @ imm = #0x100
 800108c:      	ldr	r1, [sp]
 800108e:      	mov	r2, r0
 8001090:      	str	r1, [sp, #0x28]
 8001092:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x03 << 30)) | (((value as u32) & 0x03) << 30);
 8001096:      	ldr	r0, [r1]
 8001098:      	bic	r0, r0, #0xc0000000
 800109c:      	orr.w	r0, r0, r2, lsl #30
 80010a0:      	str	r0, [r1]
;                                 moder.moder().modify(|_, w| w.$moderi().output());
 80010a2:      	b	0x80010a4 <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h24d434375ce71cb5E+0x44> @ imm = #-0x2
 80010a4:      	ldr	r0, [sp]
 80010a6:      	add	sp, #0x30
 80010a8:      	pop	{r7, pc}

080010aa <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5f8a963353ca62e9E>:
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80010aa:      	push	{r7, lr}
 80010ac:      	mov	r7, sp
 80010ae:      	sub	sp, #0x30
 80010b0:      	str	r0, [sp, #0x8]
 80010b2:      	str	r1, [sp, #0xc]
 80010b4:      	str	r1, [sp, #0x14]
;         OT15_W { w: self }
 80010b6:      	str	r1, [sp, #0x10]
;     }
 80010b8:      	ldr	r0, [sp, #0x10]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80010ba:      	str	r0, [sp]
 80010bc:      	b	0x80010be <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5f8a963353ca62e9E+0x14> @ imm = #-0x2
 80010be:      	ldr	r1, [sp]
 80010c0:      	str	r1, [sp, #0x1c]
 80010c2:      	movs	r0, #0x0
;         self.variant(OT15_A::PUSHPULL)
 80010c4:      	strb	r0, [r7, #-21]
 80010c8:      	ldrb	r0, [r7, #-21]
 80010cc:      	str	r1, [sp, #0x20]
 80010ce:      	strb	r0, [r7, #-9]
;             self.bit(variant.into())
 80010d2:      	bl	0x80011a2 <<T as core::convert::Into<U>>::into::h53f96bf7fb51596d> @ imm = #0xcc
 80010d6:      	ldr	r1, [sp]
 80010d8:      	mov	r2, r0
 80010da:      	str	r1, [sp, #0x28]
 80010dc:      	strb	r2, [r7, #-1]
;         self.w.bits = (self.w.bits & !(0x01 << 15)) | (((value as u32) & 0x01) << 15);
 80010e0:      	ldr	r0, [r1]
 80010e2:      	bic	r0, r0, #0x8000
 80010e6:      	orr.w	r0, r0, r2, lsl #15
 80010ea:      	str	r0, [r1]
;                                 otyper.otyper().modify(|_, w| w.$oti().push_pull());
 80010ec:      	b	0x80010ee <_ZN13stm32f3xx_hal4gpio5gpioe16PE15$LT$MODE$GT$21into_push_pull_output28_$u7b$$u7b$closure$u7d$$u7d$17h5f8a963353ca62e9E+0x44> @ imm = #-0x2
 80010ee:      	ldr	r0, [sp]
 80010f0:      	add	sp, #0x30
 80010f2:      	pop	{r7, pc}

080010f4 <_ZN13stm32f3xx_hal4gpio5gpioe50PE8$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h213ab082cd3a8003E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 80010f4:      	sub	sp, #0x8
 80010f6:      	movs	r0, #0x8
; gpio!([
 80010f8:      	strb.w	r0, [sp, #0x3]
;                             }
 80010fc:      	ldrb.w	r0, [sp, #0x3]
 8001100:      	add	sp, #0x8
 8001102:      	bx	lr

08001104 <_ZN13stm32f3xx_hal4gpio5gpioe50PE9$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hbf490ec7c286b300E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001104:      	sub	sp, #0x8
 8001106:      	movs	r0, #0x9
; gpio!([
 8001108:      	strb.w	r0, [sp, #0x3]
;                             }
 800110c:      	ldrb.w	r0, [sp, #0x3]
 8001110:      	add	sp, #0x8
 8001112:      	bx	lr

08001114 <_ZN13stm32f3xx_hal4gpio5gpioe51PE10$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hce74f8a3746740d3E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001114:      	sub	sp, #0x8
 8001116:      	movs	r0, #0xa
; gpio!([
 8001118:      	strb.w	r0, [sp, #0x3]
;                             }
 800111c:      	ldrb.w	r0, [sp, #0x3]
 8001120:      	add	sp, #0x8
 8001122:      	bx	lr

08001124 <_ZN13stm32f3xx_hal4gpio5gpioe51PE11$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17ha16bc0e0b011f8e5E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001124:      	sub	sp, #0x8
 8001126:      	movs	r0, #0xb
; gpio!([
 8001128:      	strb.w	r0, [sp, #0x3]
;                             }
 800112c:      	ldrb.w	r0, [sp, #0x3]
 8001130:      	add	sp, #0x8
 8001132:      	bx	lr

08001134 <_ZN13stm32f3xx_hal4gpio5gpioe51PE12$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17h13072bb1af1ce5f8E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001134:      	sub	sp, #0x8
 8001136:      	movs	r0, #0xc
; gpio!([
 8001138:      	strb.w	r0, [sp, #0x3]
;                             }
 800113c:      	ldrb.w	r0, [sp, #0x3]
 8001140:      	add	sp, #0x8
 8001142:      	bx	lr

08001144 <_ZN13stm32f3xx_hal4gpio5gpioe51PE13$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hfa3636a8eba8d2b8E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001144:      	sub	sp, #0x8
 8001146:      	movs	r0, #0xd
; gpio!([
 8001148:      	strb.w	r0, [sp, #0x3]
;                             }
 800114c:      	ldrb.w	r0, [sp, #0x3]
 8001150:      	add	sp, #0x8
 8001152:      	bx	lr

08001154 <_ZN13stm32f3xx_hal4gpio5gpioe51PE14$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hf8efac1edf3c4b6aE>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001154:      	sub	sp, #0x8
 8001156:      	movs	r0, #0xe
; gpio!([
 8001158:      	strb.w	r0, [sp, #0x3]
;                             }
 800115c:      	ldrb.w	r0, [sp, #0x3]
 8001160:      	add	sp, #0x8
 8001162:      	bx	lr

08001164 <_ZN13stm32f3xx_hal4gpio5gpioe51PE15$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$9downgrade17hb09fc3b771be22d3E>:
;                             pub fn downgrade(self) -> $PXx<Output<MODE>> {
 8001164:      	sub	sp, #0x8
 8001166:      	movs	r0, #0xf
; gpio!([
 8001168:      	strb.w	r0, [sp, #0x3]
;                             }
 800116c:      	ldrb.w	r0, [sp, #0x3]
 8001170:      	add	sp, #0x8
 8001172:      	bx	lr

08001174 <<T as switch_hal::IntoSwitch>::into_switch::h754b68476c85e2bf>:
;     fn into_switch<ActiveLevel>(self) -> Switch<Self, ActiveLevel> {
 8001174:      	push	{r7, lr}
 8001176:      	mov	r7, sp
 8001178:      	sub	sp, #0x8
 800117a:      	strb	r0, [r7, #-1]
;         Switch::<Self, ActiveLevel>::new(self)
 800117e:      	bl	0x800124c <switch_hal::Switch<IoPin,ActiveLevel>::new::hf86f2efeca0290d4> @ imm = #0xca
 8001182:      	str	r0, [sp]
 8001184:      	b	0x8001186 <<T as switch_hal::IntoSwitch>::into_switch::h754b68476c85e2bf+0x12> @ imm = #-0x2
;     }
 8001186:      	ldr	r0, [sp]
 8001188:      	add	sp, #0x8
 800118a:      	pop	{r7, pc}

0800118c <<T as core::convert::Into<U>>::into::h5ca7d979b3d99e53>:
 800118c:      	sub	sp, #0x8
 800118e:      	mov	r1, r0
 8001190:      	str	r1, [sp]
 8001192:      	strb.w	r0, [sp, #0x6]
 8001196:      	strb.w	r0, [sp, #0x7]
 800119a:      	b	0x800119c <<T as core::convert::Into<U>>::into::h5ca7d979b3d99e53+0x10> @ imm = #-0x2
 800119c:      	ldr	r0, [sp]
 800119e:      	add	sp, #0x8
 80011a0:      	bx	lr

080011a2 <<T as core::convert::Into<U>>::into::h53f96bf7fb51596d>:
 80011a2:      	sub	sp, #0x8
 80011a4:      	mov	r1, r0
 80011a6:      	str	r1, [sp]
 80011a8:      	strb.w	r0, [sp, #0x6]
 80011ac:      	strb.w	r0, [sp, #0x7]
 80011b0:      	b	0x80011b2 <<T as core::convert::Into<U>>::into::h53f96bf7fb51596d+0x10> @ imm = #-0x2
 80011b2:      	ldr	r0, [sp]
 80011b4:      	and	r0, r0, #0x1
 80011b8:      	add	sp, #0x8
 80011ba:      	bx	lr

080011bc <cortex_m::peripheral::Peripherals::take::h4ca3e33c416185d5>:
;     pub fn take() -> Option<Self> {
 80011bc:      	push	{r7, lr}
 80011be:      	mov	r7, sp
 80011c0:      	sub	sp, #0x8
;         interrupt::free(|_| {
 80011c2:      	bl	0x80002d8 <cortex_m::interrupt::free::h06692d10e85fc913> @ imm = #-0xeee
 80011c6:      	str	r0, [sp, #0x4]
 80011c8:      	b	0x80011ca <cortex_m::peripheral::Peripherals::take::h4ca3e33c416185d5+0xe> @ imm = #-0x2
;     }
 80011ca:      	ldr	r0, [sp, #0x4]
 80011cc:      	and	r0, r0, #0x1
 80011d0:      	add	sp, #0x8
 80011d2:      	pop	{r7, pc}

080011d4 <cortex_m::peripheral::Peripherals::take::hcbcfe4bf89336bde>:
;     pub fn take() -> Option<Self> {
 80011d4:      	push	{r7, lr}
 80011d6:      	mov	r7, sp
 80011d8:      	sub	sp, #0x8
;         interrupt::free(|_| match cortex_m_0_7::peripheral::Peripherals::take() {
 80011da:      	bl	0x800038c <cortex_m::interrupt::free::hafc75dd6b5770ee3> @ imm = #-0xe52
 80011de:      	str	r0, [sp, #0x4]
 80011e0:      	b	0x80011e2 <cortex_m::peripheral::Peripherals::take::hcbcfe4bf89336bde+0xe> @ imm = #-0x2
;     }
 80011e2:      	ldr	r0, [sp, #0x4]
 80011e4:      	and	r0, r0, #0x1
 80011e8:      	add	sp, #0x8
 80011ea:      	pop	{r7, pc}

080011ec <cortex_m::peripheral::Peripherals::steal::h000fb384fca93ad7>:
;     pub unsafe fn steal() -> Self {
 80011ec:      	push	{r7, lr}
 80011ee:      	mov	r7, sp
;         cortex_m_0_7::peripheral::Peripherals::steal();
 80011f0:      	bl	0x80011fa <cortex_m::peripheral::Peripherals::steal::h1ec715ebdfce3bf6> @ imm = #0x6
 80011f4:      	b	0x80011f6 <cortex_m::peripheral::Peripherals::steal::h000fb384fca93ad7+0xa> @ imm = #-0x2
;         core::mem::transmute(())
 80011f6:      	b	0x80011f8 <cortex_m::peripheral::Peripherals::steal::h000fb384fca93ad7+0xc> @ imm = #-0x2
;     }
 80011f8:      	pop	{r7, pc}

080011fa <cortex_m::peripheral::Peripherals::steal::h1ec715ebdfce3bf6>:
;         TAKEN = true;
 80011fa:      	movw	r1, #0x1
 80011fe:      	movt	r1, #0x2000
 8001202:      	movs	r0, #0x1
 8001204:      	strb	r0, [r1]
;     }
 8001206:      	bx	lr

08001208 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE>:
 8001208:      	sub	sp, #0x8
 800120a:      	movs	r0, #0x1
 800120c:      	cbnz	r0, 0x8001214 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE+0xc> @ imm = #0x4
 800120e:      	b	0x8001210 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE+0x8> @ imm = #-0x2
 8001210:      	b	0x800121c <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE+0x14> @ imm = #0x8
 8001212:      	trap
 8001214:      	movs	r0, #0x1
 8001216:      	strb.w	r0, [sp, #0x3]
 800121a:      	b	0x8001224 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE+0x1c> @ imm = #0x6
 800121c:      	movs	r0, #0x0
 800121e:      	strb.w	r0, [sp, #0x3]
 8001222:      	b	0x8001224 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE+0x1c> @ imm = #-0x2
 8001224:      	movs	r0, #0x0
 8001226:      	cbnz	r0, 0x8001232 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE+0x2a> @ imm = #0x8
 8001228:      	b	0x800122a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE+0x22> @ imm = #-0x2
 800122a:      	ldrb.w	r0, [sp, #0x3]
 800122e:      	add	sp, #0x8
 8001230:      	bx	lr
 8001232:      	b	0x800122a <_ZN4core6result19Result$LT$T$C$E$GT$2ok17he1cc28ab92e5b6ddE+0x22> @ imm = #-0xc

08001234 <cortex_m::interrupt::enable::h53b80abc78445410>:
; pub unsafe fn enable() {
 8001234:      	push	{r7, lr}
 8001236:      	mov	r7, sp
;     call_asm!(__cpsie());
 8001238:      	bl	0x8001810 <__cpsie>     @ imm = #0x5d4
 800123c:      	b	0x800123e <cortex_m::interrupt::enable::h53b80abc78445410+0xa> @ imm = #-0x2
; }
 800123e:      	pop	{r7, pc}

08001240 <cortex_m::interrupt::disable::hb517683cd27cee1f>:
; pub fn disable() {
 8001240:      	push	{r7, lr}
 8001242:      	mov	r7, sp
;     call_asm!(__cpsid());
 8001244:      	bl	0x800180c <__cpsid>     @ imm = #0x5c4
 8001248:      	b	0x800124a <cortex_m::interrupt::disable::hb517683cd27cee1f+0xa> @ imm = #-0x2
; }
 800124a:      	pop	{r7, pc}

0800124c <switch_hal::Switch<IoPin,ActiveLevel>::new::hf86f2efeca0290d4>:
;     pub fn new(pin: IoPin) -> Self {
 800124c:      	sub	sp, #0x4
 800124e:      	strb.w	r0, [sp, #0x3]
;         Switch {
 8001252:      	strb.w	r0, [sp, #0x2]
;     }
 8001256:      	ldrb.w	r0, [sp, #0x2]
 800125a:      	add	sp, #0x4
 800125c:      	bx	lr

0800125e <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h539b9ef31fa02bf6>:
;     fn off(&mut self) -> Result<(), Self::Error> {
 800125e:      	push	{r7, lr}
 8001260:      	mov	r7, sp
 8001262:      	sub	sp, #0x8
 8001264:      	str	r0, [sp, #0x4]
;         self.pin.set_low()
 8001266:      	bl	0x8000730 <_ZN135_$LT$stm32f3xx_hal..gpio..gpioe..PEx$LT$stm32f3xx_hal..gpio..Output$LT$MODE$GT$$GT$$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17hd0ea03679639aacbE> @ imm = #-0xb3a
 800126a:      	b	0x800126c <switch_hal::output::<impl switch_hal::OutputSwitch for switch_hal::Switch<T,switch_hal::ActiveHigh>>::off::h539b9ef31fa02bf6+0xe> @ imm = #-0x2
;     }
 800126c:      	add	sp, #0x8
 800126e:      	pop	{r7, pc}

08001270 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hc35734eb53394fe7E>:
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001270:      	sub	sp, #0x24
 8001272:      	str	r0, [sp, #0x8]
 8001274:      	str	r1, [sp, #0xc]
 8001276:      	str	r1, [sp, #0x14]
;         IOPEEN_W { w: self }
 8001278:      	str	r1, [sp, #0x10]
;     }
 800127a:      	ldr	r0, [sp, #0x10]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 800127c:      	str	r0, [sp]
 800127e:      	b	0x8001280 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hc35734eb53394fe7E+0x10> @ imm = #-0x2
 8001280:      	ldr	r1, [sp]
 8001282:      	str	r1, [sp, #0x18]
 8001284:      	str	r1, [sp, #0x1c]
 8001286:      	movs	r0, #0x1
 8001288:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 800128c:      	ldr	r0, [r1]
 800128e:      	orr	r0, r0, #0x200000
 8001292:      	str	r0, [r1]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001294:      	b	0x8001296 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hc35734eb53394fe7E+0x26> @ imm = #-0x2
 8001296:      	ldr	r0, [sp]
 8001298:      	add	sp, #0x24
 800129a:      	bx	lr

0800129c <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hce522f9481f7ebd1E>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 800129c:      	sub	sp, #0x24
 800129e:      	str	r0, [sp, #0x8]
 80012a0:      	str	r1, [sp, #0xc]
 80012a2:      	str	r1, [sp, #0x14]
;         IOPERST_W { w: self }
 80012a4:      	str	r1, [sp, #0x10]
;     }
 80012a6:      	ldr	r0, [sp, #0x10]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80012a8:      	str	r0, [sp]
 80012aa:      	b	0x80012ac <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hce522f9481f7ebd1E+0x10> @ imm = #-0x2
 80012ac:      	ldr	r1, [sp]
 80012ae:      	str	r1, [sp, #0x18]
 80012b0:      	str	r1, [sp, #0x1c]
 80012b2:      	movs	r0, #0x1
 80012b4:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80012b8:      	ldr	r0, [r1]
 80012ba:      	orr	r0, r0, #0x200000
 80012be:      	str	r0, [r1]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80012c0:      	b	0x80012c2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hce522f9481f7ebd1E+0x26> @ imm = #-0x2
 80012c2:      	ldr	r0, [sp]
 80012c4:      	add	sp, #0x24
 80012c6:      	bx	lr

080012c8 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hfb3f79ab0610a800E>:
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80012c8:      	sub	sp, #0x24
 80012ca:      	str	r0, [sp, #0x8]
 80012cc:      	str	r1, [sp, #0xc]
 80012ce:      	str	r1, [sp, #0x14]
;         IOPERST_W { w: self }
 80012d0:      	str	r1, [sp, #0x10]
;     }
 80012d2:      	ldr	r0, [sp, #0x10]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80012d4:      	str	r0, [sp]
 80012d6:      	b	0x80012d8 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hfb3f79ab0610a800E+0x10> @ imm = #-0x2
 80012d8:      	ldr	r1, [sp]
 80012da:      	str	r1, [sp, #0x18]
 80012dc:      	str	r1, [sp, #0x1c]
 80012de:      	movs	r0, #0x0
 80012e0:      	strb.w	r0, [sp, #0x23]
;         self.w.bits = (self.w.bits & !(0x01 << 21)) | (((value as u32) & 0x01) << 21);
 80012e4:      	ldr	r0, [r1]
 80012e6:      	bic	r0, r0, #0x200000
 80012ea:      	str	r0, [r1]
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80012ec:      	b	0x80012ee <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hfb3f79ab0610a800E+0x26> @ imm = #-0x2
 80012ee:      	ldr	r0, [sp]
 80012f0:      	add	sp, #0x24
 80012f2:      	bx	lr

080012f4 <stm32f3xx_hal::gpio::gpioe::MODER::moder::h94bdec6e809f5bad>:
;                         pub(crate) fn moder(&mut self) -> &$gpioy::MODER {
 80012f4:      	sub	sp, #0x4
 80012f6:      	str	r0, [sp]
; gpio!([
 80012f8:      	b	0x80012fa <stm32f3xx_hal::gpio::gpioe::MODER::moder::h94bdec6e809f5bad+0x6> @ imm = #-0x2
 80012fa:      	movw	r0, #0x1000
 80012fe:      	movt	r0, #0x4800
;                         }
 8001302:      	add	sp, #0x4
 8001304:      	bx	lr

08001306 <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h8faa8f8b7a5cd11a>:
;                         pub(crate) fn otyper(&mut self) -> &$gpioy::OTYPER {
 8001306:      	sub	sp, #0x4
 8001308:      	str	r0, [sp]
; gpio!([
 800130a:      	b	0x800130c <stm32f3xx_hal::gpio::gpioe::OTYPER::otyper::h8faa8f8b7a5cd11a+0x6> @ imm = #-0x2
 800130c:      	movw	r0, #0x1004
 8001310:      	movt	r0, #0x4800
;                         }
 8001314:      	add	sp, #0x4
 8001316:      	bx	lr

08001318 <<bool as core::default::Default>::default::h025aa2e2efa36ccc>:
 8001318:      	movs	r0, #0x0
 800131a:      	bx	lr

0800131c <<core::option::Option<T> as core::default::Default>::default::h35af15744d293891>:
 800131c:      	sub	sp, #0x8
 800131e:      	movs	r0, #0x0
 8001320:      	str	r0, [sp]
 8001322:      	ldr	r0, [sp]
 8001324:      	ldr	r1, [sp, #0x4]
 8001326:      	add	sp, #0x8
 8001328:      	bx	lr

0800132a <stm32f3xx_hal::rcc::AHB::enr::h71a2f4092e0da1a8>:
;     pub(crate) fn enr(&mut self) -> &rcc::AHBENR {
 800132a:      	sub	sp, #0x4
 800132c:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbenr }
 800132e:      	b	0x8001330 <stm32f3xx_hal::rcc::AHB::enr::h71a2f4092e0da1a8+0x6> @ imm = #-0x2
 8001330:      	movw	r0, #0x1014
 8001334:      	movt	r0, #0x4002
;     }
 8001338:      	add	sp, #0x4
 800133a:      	bx	lr

0800133c <stm32f3xx_hal::rcc::AHB::rstr::hbe8fddaf7b5578fc>:
;     pub(crate) fn rstr(&mut self) -> &rcc::AHBRSTR {
 800133c:      	sub	sp, #0x4
 800133e:      	str	r0, [sp]
;         unsafe { &(*RCC::ptr()).ahbrstr }
 8001340:      	b	0x8001342 <stm32f3xx_hal::rcc::AHB::rstr::hbe8fddaf7b5578fc+0x6> @ imm = #-0x2
 8001342:      	movw	r0, #0x1028
 8001346:      	movt	r0, #0x4002
;     }
 800134a:      	add	sp, #0x4
 800134c:      	bx	lr

0800134e <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h8521493cf2ece277>:
; #[derive(Default)]
 800134e:      	push	{r4, r5, r6, r7, lr}
 8001350:      	add	r7, sp, #0xc
 8001352:      	push.w	{r8, r9, r10, r11}
 8001356:      	sub	sp, #0x34
;     hse: Option<u32>,
 8001358:      	str	r0, [sp, #0x28]
 800135a:      	bl	0x800131c <<core::option::Option<T> as core::default::Default>::default::h35af15744d293891> @ imm = #-0x42
 800135e:      	str	r0, [sp, #0x2c]
 8001360:      	str	r1, [sp, #0x30]
 8001362:      	b	0x8001364 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h8521493cf2ece277+0x16> @ imm = #-0x2
;     hse_bypass: bool,
 8001364:      	bl	0x8001318 <<bool as core::default::Default>::default::h025aa2e2efa36ccc> @ imm = #-0x50
 8001368:      	str	r0, [sp, #0x24]
 800136a:      	b	0x800136c <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h8521493cf2ece277+0x1e> @ imm = #-0x2
;     css: bool,
 800136c:      	bl	0x8001318 <<bool as core::default::Default>::default::h025aa2e2efa36ccc> @ imm = #-0x58
 8001370:      	str	r0, [sp, #0x20]
 8001372:      	b	0x8001374 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h8521493cf2ece277+0x26> @ imm = #-0x2
;     hclk: Option<u32>,
 8001374:      	bl	0x800131c <<core::option::Option<T> as core::default::Default>::default::h35af15744d293891> @ imm = #-0x5c
 8001378:      	str	r0, [sp, #0x18]
 800137a:      	str	r1, [sp, #0x1c]
 800137c:      	b	0x800137e <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h8521493cf2ece277+0x30> @ imm = #-0x2
;     pclk1: Option<u32>,
 800137e:      	bl	0x800131c <<core::option::Option<T> as core::default::Default>::default::h35af15744d293891> @ imm = #-0x66
 8001382:      	str	r0, [sp, #0x10]
 8001384:      	str	r1, [sp, #0x14]
 8001386:      	b	0x8001388 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h8521493cf2ece277+0x3a> @ imm = #-0x2
;     pclk2: Option<u32>,
 8001388:      	bl	0x800131c <<core::option::Option<T> as core::default::Default>::default::h35af15744d293891> @ imm = #-0x70
 800138c:      	str	r0, [sp, #0x8]
 800138e:      	str	r1, [sp, #0xc]
 8001390:      	b	0x8001392 <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h8521493cf2ece277+0x44> @ imm = #-0x2
;     sysclk: Option<u32>,
 8001392:      	bl	0x800131c <<core::option::Option<T> as core::default::Default>::default::h35af15744d293891> @ imm = #-0x7a
 8001396:      	str	r0, [sp]
 8001398:      	str	r1, [sp, #0x4]
 800139a:      	b	0x800139c <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h8521493cf2ece277+0x4e> @ imm = #-0x2
; #[derive(Default)]
 800139c:      	ldr	r0, [sp, #0x4]
 800139e:      	ldr	r1, [sp, #0x28]
 80013a0:      	ldr	r2, [sp]
 80013a2:      	ldr	r3, [sp, #0xc]
 80013a4:      	ldr.w	r12, [sp, #0x8]
 80013a8:      	ldr.w	lr, [sp, #0x14]
 80013ac:      	ldr	r4, [sp, #0x10]
 80013ae:      	ldr	r5, [sp, #0x1c]
 80013b0:      	ldr	r6, [sp, #0x18]
 80013b2:      	ldr.w	r8, [sp, #0x20]
 80013b6:      	ldr.w	r9, [sp, #0x24]
 80013ba:      	ldr.w	r10, [sp, #0x30]
 80013be:      	ldr.w	r11, [sp, #0x2c]
 80013c2:      	str.w	r11, [r1]
 80013c6:      	str.w	r10, [r1, #0x4]
 80013ca:      	and	r9, r9, #0x1
 80013ce:      	strb.w	r9, [r1, #0x28]
 80013d2:      	and	r8, r8, #0x1
 80013d6:      	strb.w	r8, [r1, #0x29]
 80013da:      	str	r6, [r1, #0x8]
 80013dc:      	str	r5, [r1, #0xc]
 80013de:      	str	r4, [r1, #0x10]
 80013e0:      	str.w	lr, [r1, #0x14]
 80013e4:      	str.w	r12, [r1, #0x18]
 80013e8:      	str	r3, [r1, #0x1c]
 80013ea:      	str	r2, [r1, #0x20]
 80013ec:      	str	r0, [r1, #0x24]
 80013ee:      	add	sp, #0x34
 80013f0:      	pop.w	{r8, r9, r10, r11}
 80013f4:      	pop	{r4, r5, r6, r7, pc}

080013f6 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::hc7c64c876e6bbb17>:
;     fn constrain(self) -> Rcc {
 80013f6:      	push	{r4, r5, r7, lr}
 80013f8:      	add	r7, sp, #0x8
 80013fa:      	sub	sp, #0x38
;             cfgr: CFGR::default(),
 80013fc:      	str	r0, [sp, #0x4]
 80013fe:      	add	r0, sp, #0x8
 8001400:      	bl	0x800134e <<stm32f3xx_hal::rcc::CFGR as core::default::Default>::default::h8521493cf2ece277> @ imm = #-0xb6
 8001404:      	b	0x8001406 <<stm32f3::stm32f303::RCC as stm32f3xx_hal::rcc::RccExt>::constrain::hc7c64c876e6bbb17+0x10> @ imm = #-0x2
 8001406:      	ldr	r0, [sp, #0x4]
 8001408:      	add	r1, sp, #0x8
;         Rcc {
 800140a:      	ldm.w	r1!, {r2, r3, r4, r12, lr}
 800140e:      	stm.w	r0!, {r2, r3, r4, r12, lr}
 8001412:      	ldm.w	r1, {r2, r3, r4, r5, r12, lr}
 8001416:      	stm.w	r0, {r2, r3, r4, r5, r12, lr}
;     }
 800141a:      	add	sp, #0x38
 800141c:      	pop	{r4, r5, r7, pc}

0800141e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hc314f1d1abfee0fbE>:
;                         fn split(self, ahb: &mut AHB) -> Parts {
 800141e:      	push	{r7, lr}
 8001420:      	mov	r7, sp
 8001422:      	sub	sp, #0xa0
 8001424:      	str	r0, [sp, #0xc]
 8001426:      	str	r0, [sp, #0x18]
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001428:      	bl	0x800132a <stm32f3xx_hal::rcc::AHB::enr::h71a2f4092e0da1a8> @ imm = #-0x102
 800142c:      	str	r0, [sp, #0x10]
 800142e:      	b	0x8001430 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hc314f1d1abfee0fbE+0x12> @ imm = #-0x2
 8001430:      	ldr	r0, [sp, #0x10]
 8001432:      	str	r0, [sp, #0x2c]
 8001434:      	str	r0, [sp, #0x34]
 8001436:      	str	r0, [sp, #0x38]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001438:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0x25a
;         let bits = self.register.get();
 800143c:      	str	r0, [sp, #0x30]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800143e:      	str	r0, [sp, #0x24]
 8001440:      	str	r0, [sp, #0x28]
 8001442:      	add	r0, sp, #0x24
 8001444:      	str	r0, [sp, #0x1c]
 8001446:      	add	r0, sp, #0x28
 8001448:      	str	r0, [sp, #0x20]
 800144a:      	ldr	r0, [sp, #0x1c]
 800144c:      	ldr	r1, [sp, #0x20]
 800144e:      	bl	0x8001270 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hc35734eb53394fe7E> @ imm = #-0x1e2
 8001452:      	mov	r1, r0
 8001454:      	ldr	r0, [sp, #0x10]
 8001456:      	ldr	r1, [r1]
 8001458:      	str	r0, [sp, #0x3c]
 800145a:      	str	r1, [sp, #0x40]
 800145c:      	str	r0, [sp, #0x44]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800145e:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0xe8
;                             ahb.enr().modify(|_, w| w.$iopxenr().set_bit());
 8001462:      	b	0x8001464 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hc314f1d1abfee0fbE+0x46> @ imm = #-0x2
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 8001464:      	ldr	r0, [sp, #0xc]
 8001466:      	bl	0x800133c <stm32f3xx_hal::rcc::AHB::rstr::hbe8fddaf7b5578fc> @ imm = #-0x12e
 800146a:      	str	r0, [sp, #0x8]
 800146c:      	b	0x800146e <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hc314f1d1abfee0fbE+0x50> @ imm = #-0x2
 800146e:      	ldr	r0, [sp, #0x8]
 8001470:      	str	r0, [sp, #0x58]
 8001472:      	str	r0, [sp, #0x60]
 8001474:      	str	r0, [sp, #0x64]
;         unsafe { ptr::read_volatile(self.value.get()) }
 8001476:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0x21c
;         let bits = self.register.get();
 800147a:      	str	r0, [sp, #0x5c]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 800147c:      	str	r0, [sp, #0x50]
 800147e:      	str	r0, [sp, #0x54]
 8001480:      	add	r0, sp, #0x50
 8001482:      	str	r0, [sp, #0x48]
 8001484:      	add	r0, sp, #0x54
 8001486:      	str	r0, [sp, #0x4c]
 8001488:      	ldr	r0, [sp, #0x48]
 800148a:      	ldr	r1, [sp, #0x4c]
 800148c:      	bl	0x800129c <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hce522f9481f7ebd1E> @ imm = #-0x1f4
 8001490:      	mov	r1, r0
 8001492:      	ldr	r0, [sp, #0x8]
 8001494:      	ldr	r1, [r1]
 8001496:      	str	r0, [sp, #0x68]
 8001498:      	str	r1, [sp, #0x6c]
 800149a:      	str	r0, [sp, #0x70]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 800149c:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0xaa
;                             ahb.rstr().modify(|_, w| w.$iopxrst().set_bit());
 80014a0:      	b	0x80014a2 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hc314f1d1abfee0fbE+0x84> @ imm = #-0x2
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80014a2:      	ldr	r0, [sp, #0xc]
 80014a4:      	bl	0x800133c <stm32f3xx_hal::rcc::AHB::rstr::hbe8fddaf7b5578fc> @ imm = #-0x16c
 80014a8:      	str	r0, [sp, #0x4]
 80014aa:      	b	0x80014ac <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hc314f1d1abfee0fbE+0x8e> @ imm = #-0x2
 80014ac:      	ldr	r0, [sp, #0x4]
 80014ae:      	str	r0, [sp, #0x84]
 80014b0:      	str	r0, [sp, #0x8c]
 80014b2:      	str	r0, [sp, #0x90]
;         unsafe { ptr::read_volatile(self.value.get()) }
 80014b4:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #0x1de
;         let bits = self.register.get();
 80014b8:      	str	r0, [sp, #0x88]
;         self.register.set(f(&R {bits, _reg: marker::PhantomData}, &mut W {bits, _reg: marker::PhantomData}).bits);
 80014ba:      	str	r0, [sp, #0x7c]
 80014bc:      	str	r0, [sp, #0x80]
 80014be:      	add	r0, sp, #0x7c
 80014c0:      	str	r0, [sp, #0x74]
 80014c2:      	add	r0, sp, #0x80
 80014c4:      	str	r0, [sp, #0x78]
 80014c6:      	ldr	r0, [sp, #0x74]
 80014c8:      	ldr	r1, [sp, #0x78]
 80014ca:      	bl	0x80012c8 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split28_$u7b$$u7b$closure$u7d$$u7d$17hfb3f79ab0610a800E> @ imm = #-0x206
 80014ce:      	mov	r1, r0
 80014d0:      	ldr	r0, [sp, #0x4]
 80014d2:      	ldr	r1, [r1]
 80014d4:      	str	r0, [sp, #0x94]
 80014d6:      	str	r1, [sp, #0x98]
 80014d8:      	str	r0, [sp, #0x9c]
;         unsafe { ptr::write_volatile(self.value.get(), value) }
 80014da:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #0x6c
;                             ahb.rstr().modify(|_, w| w.$iopxrst().clear_bit());
 80014de:      	b	0x80014e0 <_ZN13stm32f3xx_hal4gpio5gpioe84_$LT$impl$u20$stm32f3xx_hal..gpio..GpioExt$u20$for$u20$stm32f3..stm32f303..GPIOE$GT$5split17hc314f1d1abfee0fbE+0xc2> @ imm = #-0x2
;                         }
 80014e0:      	add	sp, #0xa0
 80014e2:      	pop	{r7, pc}

080014e4 <ResetTrampoline>:
;             fn trampoline() -> ! {
 80014e4:      	push	{r7, lr}
 80014e6:      	mov	r7, sp
;                 unsafe { main() }
 80014e8:      	bl	0x80001ec <main>        @ imm = #-0x1300
 80014ec:      	trap

080014ee <WWDG>:
; pub unsafe extern "C" fn DefaultHandler_() -> ! {
 80014ee:      	push	{r7, lr}
 80014f0:      	mov	r7, sp
 80014f2:      	sub	sp, #0x8
;     loop {
 80014f4:      	b	0x80014f6 <WWDG+0x8>    @ imm = #-0x2
 80014f6:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 80014f8:      	strb	r0, [r7, #-1]
 80014fc:      	ldrb	r0, [r7, #-1]
 8001500:      	bl	0x8001508 <core::sync::atomic::compiler_fence::hb1882d50ead4a622> @ imm = #0x4
 8001504:      	b	0x80014f6 <WWDG+0x8>    @ imm = #-0x12

08001506 <__pre_init>:
; pub unsafe extern "C" fn DefaultPreInit() {}
 8001506:      	bx	lr

08001508 <core::sync::atomic::compiler_fence::hb1882d50ead4a622>:
 8001508:      	push	{r7, lr}
 800150a:      	mov	r7, sp
 800150c:      	sub	sp, #0x8
 800150e:      	strb	r0, [r7, #-1]
 8001512:      	ldrb	r0, [r7, #-1]
 8001516:      	str	r0, [sp]
 8001518:      	ldr	r1, [sp]
 800151a:      	tbb	[pc, r1]

0800151e <$d.1>:
 800151e:	04 10 11 12	.word	0x12111004
 8001522:	13 00		.short	0x0013

08001524 <$t.2>:
 8001524:      	trap
 8001526:      	movw	r0, #0x3263
 800152a:      	movt	r0, #0x800
 800152e:      	movw	r2, #0x32e4
 8001532:      	movt	r2, #0x800
 8001536:      	movs	r1, #0x32
 8001538:      	bl	0x8001928 <core::panicking::panic::hd499c3017018cd48> @ imm = #0x3ec
 800153c:      	trap
 800153e:      	b	0x8001546 <$t.2+0x22>   @ imm = #0x4
 8001540:      	b	0x8001546 <$t.2+0x22>   @ imm = #0x2
 8001542:      	b	0x8001546 <$t.2+0x22>   @ imm = #0x0
 8001544:      	b	0x8001546 <$t.2+0x22>   @ imm = #-0x2
 8001546:      	add	sp, #0x8
 8001548:      	pop	{r7, pc}

0800154a <core::ptr::write_volatile::hb0d3638208f55210>:
 800154a:      	sub	sp, #0x8
 800154c:      	str	r0, [sp]
 800154e:      	str	r1, [sp, #0x4]
 8001550:      	str	r1, [r0]
 8001552:      	b	0x8001554 <core::ptr::write_volatile::hb0d3638208f55210+0xa> @ imm = #-0x2
 8001554:      	add	sp, #0x8
 8001556:      	bx	lr

08001558 <core::ptr::read::hb91ea42ace4fa6d1>:
 8001558:      	sub	sp, #0x20
 800155a:      	str	r0, [sp, #0x4]
 800155c:      	str	r0, [sp, #0xc]
 800155e:      	ldr	r0, [sp, #0x10]
 8001560:      	str	r0, [sp, #0x8]
 8001562:      	b	0x8001564 <core::ptr::read::hb91ea42ace4fa6d1+0xc> @ imm = #-0x2
 8001564:      	add	r0, sp, #0x8
 8001566:      	str	r0, [sp, #0x1c]
 8001568:      	b	0x800156a <core::ptr::read::hb91ea42ace4fa6d1+0x12> @ imm = #-0x2
 800156a:      	ldr	r0, [sp, #0x4]
 800156c:      	ldr	r0, [r0]
 800156e:      	str	r0, [sp, #0x8]
 8001570:      	ldr	r0, [sp, #0x8]
 8001572:      	str	r0, [sp]
 8001574:      	str	r0, [sp, #0x14]
 8001576:      	str	r0, [sp, #0x18]
 8001578:      	b	0x800157a <core::ptr::read::hb91ea42ace4fa6d1+0x22> @ imm = #-0x2
 800157a:      	ldr	r0, [sp]
 800157c:      	add	sp, #0x20
 800157e:      	bx	lr

08001580 <core::ptr::write::h504ed4cc7a5fb10a>:
 8001580:      	sub	sp, #0xc
 8001582:      	str	r1, [sp]
 8001584:      	mov	r1, r0
 8001586:      	ldr	r0, [sp]
 8001588:      	str	r0, [sp, #0x4]
 800158a:      	str	r1, [sp, #0x8]
 800158c:      	ldr	r0, [sp, #0x4]
 800158e:      	str	r0, [r1]
 8001590:      	add	sp, #0xc
 8001592:      	bx	lr

08001594 <r0::zero_bss::ha4adf96a20249341>:
; pub unsafe fn zero_bss<T>(mut sbss: *mut T, ebss: *mut T)
 8001594:      	push	{r7, lr}
 8001596:      	mov	r7, sp
 8001598:      	sub	sp, #0x30
 800159a:      	str	r1, [sp, #0x10]
 800159c:      	str	r0, [sp, #0x14]
 800159e:      	str	r1, [sp, #0x18]
;     while sbss < ebss {
 80015a0:      	b	0x80015a2 <r0::zero_bss::ha4adf96a20249341+0xe> @ imm = #-0x2
 80015a2:      	ldr	r1, [sp, #0x10]
 80015a4:      	ldr	r0, [sp, #0x14]
 80015a6:      	cmp	r0, r1
 80015a8:      	blo	0x80015b0 <r0::zero_bss::ha4adf96a20249341+0x1c> @ imm = #0x4
 80015aa:      	b	0x80015ac <r0::zero_bss::ha4adf96a20249341+0x18> @ imm = #-0x2
; }
 80015ac:      	add	sp, #0x30
 80015ae:      	pop	{r7, pc}
;         ptr::write_volatile(sbss, mem::zeroed());
 80015b0:      	ldr	r0, [sp, #0x14]
 80015b2:      	str	r0, [sp, #0x8]
 80015b4:      	bl	0x8001648 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::hbf5354edf8473dd8> @ imm = #0x90
 80015b8:      	mov	r1, r0
 80015ba:      	str	r1, [sp, #0xc]
 80015bc:      	str	r0, [sp, #0x1c]
 80015be:      	str	r0, [sp, #0x20]
;         ptr::write_volatile(sbss, mem::zeroed());
 80015c0:      	b	0x80015c2 <r0::zero_bss::ha4adf96a20249341+0x2e> @ imm = #-0x2
 80015c2:      	ldr	r1, [sp, #0xc]
 80015c4:      	ldr	r0, [sp, #0x8]
 80015c6:      	bl	0x800154a <core::ptr::write_volatile::hb0d3638208f55210> @ imm = #-0x80
 80015ca:      	b	0x80015cc <r0::zero_bss::ha4adf96a20249341+0x38> @ imm = #-0x2
;         sbss = sbss.offset(1);
 80015cc:      	ldr	r0, [sp, #0x14]
 80015ce:      	str	r0, [sp, #0x24]
 80015d0:      	movs	r1, #0x1
 80015d2:      	str	r1, [sp, #0x28]
 80015d4:      	adds	r0, #0x4
 80015d6:      	str	r0, [sp, #0x2c]
 80015d8:      	ldr	r0, [sp, #0x2c]
;         sbss = sbss.offset(1);
 80015da:      	str	r0, [sp, #0x4]
 80015dc:      	b	0x80015de <r0::zero_bss::ha4adf96a20249341+0x4a> @ imm = #-0x2
 80015de:      	ldr	r0, [sp, #0x4]
 80015e0:      	str	r0, [sp, #0x14]
;     while sbss < ebss {
 80015e2:      	b	0x80015a2 <r0::zero_bss::ha4adf96a20249341+0xe> @ imm = #-0x44

080015e4 <r0::init_data::h919b81018fbec209>:
; pub unsafe fn init_data<T>(
 80015e4:      	push	{r7, lr}
 80015e6:      	mov	r7, sp
 80015e8:      	sub	sp, #0x38
 80015ea:      	str	r1, [sp, #0x10]
 80015ec:      	str	r0, [sp, #0x14]
 80015ee:      	str	r2, [sp, #0x18]
 80015f0:      	str	r1, [sp, #0x1c]
;     while sdata < edata {
 80015f2:      	b	0x80015f4 <r0::init_data::h919b81018fbec209+0x10> @ imm = #-0x2
 80015f4:      	ldr	r1, [sp, #0x10]
 80015f6:      	ldr	r0, [sp, #0x14]
 80015f8:      	cmp	r0, r1
 80015fa:      	blo	0x8001602 <r0::init_data::h919b81018fbec209+0x1e> @ imm = #0x4
 80015fc:      	b	0x80015fe <r0::init_data::h919b81018fbec209+0x1a> @ imm = #-0x2
; }
 80015fe:      	add	sp, #0x38
 8001600:      	pop	{r7, pc}
;         ptr::write(sdata, ptr::read(sidata));
 8001602:      	ldr	r0, [sp, #0x14]
 8001604:      	str	r0, [sp, #0x8]
 8001606:      	ldr	r0, [sp, #0x18]
 8001608:      	bl	0x8001558 <core::ptr::read::hb91ea42ace4fa6d1> @ imm = #-0xb4
 800160c:      	str	r0, [sp, #0xc]
 800160e:      	b	0x8001610 <r0::init_data::h919b81018fbec209+0x2c> @ imm = #-0x2
 8001610:      	ldr	r1, [sp, #0xc]
 8001612:      	ldr	r0, [sp, #0x8]
 8001614:      	bl	0x8001580 <core::ptr::write::h504ed4cc7a5fb10a> @ imm = #-0x98
 8001618:      	b	0x800161a <r0::init_data::h919b81018fbec209+0x36> @ imm = #-0x2
;         sdata = sdata.offset(1);
 800161a:      	ldr	r0, [sp, #0x14]
 800161c:      	str	r0, [sp, #0x20]
 800161e:      	movs	r1, #0x1
 8001620:      	str	r1, [sp, #0x24]
 8001622:      	adds	r0, #0x4
 8001624:      	str	r0, [sp, #0x28]
 8001626:      	ldr	r0, [sp, #0x28]
;         sdata = sdata.offset(1);
 8001628:      	str	r0, [sp, #0x4]
 800162a:      	b	0x800162c <r0::init_data::h919b81018fbec209+0x48> @ imm = #-0x2
 800162c:      	ldr	r0, [sp, #0x4]
 800162e:      	str	r0, [sp, #0x14]
;         sidata = sidata.offset(1);
 8001630:      	ldr	r0, [sp, #0x18]
 8001632:      	str	r0, [sp, #0x2c]
 8001634:      	movs	r1, #0x1
 8001636:      	str	r1, [sp, #0x30]
 8001638:      	adds	r0, #0x4
 800163a:      	str	r0, [sp, #0x34]
 800163c:      	ldr	r0, [sp, #0x34]
;         sidata = sidata.offset(1);
 800163e:      	str	r0, [sp]
 8001640:      	b	0x8001642 <r0::init_data::h919b81018fbec209+0x5e> @ imm = #-0x2
 8001642:      	ldr	r0, [sp]
 8001644:      	str	r0, [sp, #0x18]
;     while sdata < edata {
 8001646:      	b	0x80015f4 <r0::init_data::h919b81018fbec209+0x10> @ imm = #-0x56

08001648 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::hbf5354edf8473dd8>:
 8001648:      	push	{r7, lr}
 800164a:      	mov	r7, sp
 800164c:      	sub	sp, #0x18
 800164e:      	ldr	r0, [sp, #0x4]
 8001650:      	str	r0, [sp]
 8001652:      	b	0x8001654 <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::hbf5354edf8473dd8+0xc> @ imm = #-0x2
 8001654:      	mov	r0, sp
 8001656:      	str	r0, [sp, #0x14]
 8001658:      	b	0x800165a <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::hbf5354edf8473dd8+0x12> @ imm = #-0x2
 800165a:      	mov	r0, sp
 800165c:      	str	r0, [sp, #0x8]
 800165e:      	movs	r1, #0x0
 8001660:      	strb	r1, [r7, #-9]
 8001664:      	movs	r2, #0x1
 8001666:      	str	r2, [sp, #0x10]
 8001668:      	bl	0x8001674 <core::intrinsics::write_bytes::h82d0df112ce9ab7d> @ imm = #0x8
 800166c:      	b	0x800166e <core::mem::maybe_uninit::MaybeUninit<T>::zeroed::hbf5354edf8473dd8+0x26> @ imm = #-0x2
 800166e:      	ldr	r0, [sp]
 8001670:      	add	sp, #0x18
 8001672:      	pop	{r7, pc}

08001674 <core::intrinsics::write_bytes::h82d0df112ce9ab7d>:
 8001674:      	push	{r7, lr}
 8001676:      	mov	r7, sp
 8001678:      	sub	sp, #0x10
 800167a:      	str	r2, [sp]
 800167c:      	mov	r2, r1
 800167e:      	ldr	r1, [sp]
 8001680:      	str	r0, [sp, #0x4]
 8001682:      	strb	r2, [r7, #-5]
 8001686:      	str	r1, [sp, #0xc]
 8001688:      	lsls	r1, r1, #0x2
 800168a:      	uxtb	r2, r2
 800168c:      	bl	0x8003056 <__aeabi_memset4> @ imm = #0x19c6
 8001690:      	b	0x8001692 <core::intrinsics::write_bytes::h82d0df112ce9ab7d+0x1e> @ imm = #-0x2
 8001692:      	add	sp, #0x10
 8001694:      	pop	{r7, pc}

08001696 <core::ptr::read_volatile::hced004c4f1adace7>:
 8001696:      	sub	sp, #0xc
 8001698:      	str	r0, [sp, #0x4]
 800169a:      	ldr	r0, [r0]
 800169c:      	str	r0, [sp, #0x8]
 800169e:      	ldr	r0, [sp, #0x8]
 80016a0:      	str	r0, [sp]
 80016a2:      	b	0x80016a4 <core::ptr::read_volatile::hced004c4f1adace7+0xe> @ imm = #-0x2
 80016a4:      	ldr	r0, [sp]
 80016a6:      	add	sp, #0xc
 80016a8:      	bx	lr

080016aa <core::ptr::write_volatile::h5e58d7fcb1beabbf>:
 80016aa:      	sub	sp, #0x8
 80016ac:      	str	r0, [sp]
 80016ae:      	strb.w	r1, [sp, #0x7]
 80016b2:      	strb	r1, [r0]
 80016b4:      	b	0x80016b6 <core::ptr::write_volatile::h5e58d7fcb1beabbf+0xc> @ imm = #-0x2
 80016b6:      	add	sp, #0x8
 80016b8:      	bx	lr

080016ba <core::ptr::write_volatile::h88226d858decc3f9>:
 80016ba:      	sub	sp, #0x8
 80016bc:      	str	r0, [sp]
 80016be:      	str	r1, [sp, #0x4]
 80016c0:      	str	r1, [r0]
 80016c2:      	b	0x80016c4 <core::ptr::write_volatile::h88226d858decc3f9+0xa> @ imm = #-0x2
 80016c4:      	add	sp, #0x8
 80016c6:      	bx	lr

080016c8 <core::ptr::write_volatile::hf14590950d69b22f>:
 80016c8:      	sub	sp, #0x8
 80016ca:      	str	r0, [sp]
 80016cc:      	strh.w	r1, [sp, #0x6]
 80016d0:      	strh	r1, [r0]
 80016d2:      	b	0x80016d4 <core::ptr::write_volatile::hf14590950d69b22f+0xc> @ imm = #-0x2
 80016d4:      	add	sp, #0x8
 80016d6:      	bx	lr

080016d8 <core::ptr::slice_from_raw_parts::h0c1332e177cd7772>:
 80016d8:      	push	{r7, lr}
 80016da:      	mov	r7, sp
 80016dc:      	sub	sp, #0x18
 80016de:      	str	r1, [sp, #0x8]
 80016e0:      	str	r0, [sp, #0x10]
 80016e2:      	str	r1, [sp, #0x14]
 80016e4:      	bl	0x80017fc <core::ptr::const_ptr::<impl *const T>::cast::h09dee41577615b9f> @ imm = #0x114
 80016e8:      	str	r0, [sp, #0xc]
 80016ea:      	b	0x80016ec <core::ptr::slice_from_raw_parts::h0c1332e177cd7772+0x14> @ imm = #-0x2
 80016ec:      	ldr	r1, [sp, #0x8]
 80016ee:      	ldr	r0, [sp, #0xc]
 80016f0:      	bl	0x80017e2 <core::ptr::metadata::from_raw_parts::hfedf785ed07b7383> @ imm = #0xee
 80016f4:      	str	r0, [sp]
 80016f6:      	str	r1, [sp, #0x4]
 80016f8:      	b	0x80016fa <core::ptr::slice_from_raw_parts::h0c1332e177cd7772+0x22> @ imm = #-0x2
 80016fa:      	ldr	r1, [sp, #0x4]
 80016fc:      	ldr	r0, [sp]
 80016fe:      	add	sp, #0x18
 8001700:      	pop	{r7, pc}

08001702 <core::ptr::slice_from_raw_parts::h51e69d37151844aa>:
 8001702:      	push	{r7, lr}
 8001704:      	mov	r7, sp
 8001706:      	sub	sp, #0x18
 8001708:      	str	r1, [sp, #0x8]
 800170a:      	str	r0, [sp, #0x10]
 800170c:      	str	r1, [sp, #0x14]
 800170e:      	bl	0x8001804 <core::ptr::const_ptr::<impl *const T>::cast::hce0ecb24dd391176> @ imm = #0xf2
 8001712:      	str	r0, [sp, #0xc]
 8001714:      	b	0x8001716 <core::ptr::slice_from_raw_parts::h51e69d37151844aa+0x14> @ imm = #-0x2
 8001716:      	ldr	r1, [sp, #0x8]
 8001718:      	ldr	r0, [sp, #0xc]
 800171a:      	bl	0x80017c8 <core::ptr::metadata::from_raw_parts::hef062499fdc86e21> @ imm = #0xaa
 800171e:      	str	r0, [sp]
 8001720:      	str	r1, [sp, #0x4]
 8001722:      	b	0x8001724 <core::ptr::slice_from_raw_parts::h51e69d37151844aa+0x22> @ imm = #-0x2
 8001724:      	ldr	r1, [sp, #0x4]
 8001726:      	ldr	r0, [sp]
 8001728:      	add	sp, #0x18
 800172a:      	pop	{r7, pc}

0800172c <core::ptr::read::h374e35dbeac2a2e8>:
 800172c:      	sub	sp, #0x20
 800172e:      	str	r0, [sp, #0x4]
 8001730:      	str	r0, [sp, #0xc]
 8001732:      	ldr	r0, [sp, #0x10]
 8001734:      	str	r0, [sp, #0x8]
 8001736:      	b	0x8001738 <core::ptr::read::h374e35dbeac2a2e8+0xc> @ imm = #-0x2
 8001738:      	add	r0, sp, #0x8
 800173a:      	str	r0, [sp, #0x1c]
 800173c:      	b	0x800173e <core::ptr::read::h374e35dbeac2a2e8+0x12> @ imm = #-0x2
 800173e:      	ldr	r0, [sp, #0x4]
 8001740:      	ldr	r0, [r0]
 8001742:      	str	r0, [sp, #0x8]
 8001744:      	ldr	r0, [sp, #0x8]
 8001746:      	str	r0, [sp]
 8001748:      	str	r0, [sp, #0x14]
 800174a:      	str	r0, [sp, #0x18]
 800174c:      	b	0x800174e <core::ptr::read::h374e35dbeac2a2e8+0x22> @ imm = #-0x2
 800174e:      	ldr	r0, [sp]
 8001750:      	add	sp, #0x20
 8001752:      	bx	lr

08001754 <core::ptr::read::h55452b78f330b10c>:
 8001754:      	sub	sp, #0x20
 8001756:      	str	r0, [sp, #0x4]
 8001758:      	str	r0, [sp, #0xc]
 800175a:      	ldr	r0, [sp, #0x10]
 800175c:      	str	r0, [sp, #0x8]
 800175e:      	b	0x8001760 <core::ptr::read::h55452b78f330b10c+0xc> @ imm = #-0x2
 8001760:      	add	r0, sp, #0x8
 8001762:      	str	r0, [sp, #0x1c]
 8001764:      	b	0x8001766 <core::ptr::read::h55452b78f330b10c+0x12> @ imm = #-0x2
 8001766:      	ldr	r0, [sp, #0x4]
 8001768:      	ldr	r0, [r0]
 800176a:      	str	r0, [sp, #0x8]
 800176c:      	ldr	r0, [sp, #0x8]
 800176e:      	str	r0, [sp]
 8001770:      	str	r0, [sp, #0x14]
 8001772:      	str	r0, [sp, #0x18]
 8001774:      	b	0x8001776 <core::ptr::read::h55452b78f330b10c+0x22> @ imm = #-0x2
 8001776:      	ldr	r0, [sp]
 8001778:      	add	sp, #0x20
 800177a:      	bx	lr

0800177c <core::ptr::read::hd069c41edc936268>:
 800177c:      	sub	sp, #0x1c
 800177e:      	str	r0, [sp, #0x4]
 8001780:      	str	r0, [sp, #0xc]
 8001782:      	ldrh.w	r0, [sp, #0x12]
 8001786:      	strh.w	r0, [sp, #0xa]
 800178a:      	b	0x800178c <core::ptr::read::hd069c41edc936268+0x10> @ imm = #-0x2
 800178c:      	add.w	r0, sp, #0xa
 8001790:      	str	r0, [sp, #0x18]
 8001792:      	b	0x8001794 <core::ptr::read::hd069c41edc936268+0x18> @ imm = #-0x2
 8001794:      	ldr	r0, [sp, #0x4]
 8001796:      	ldrh	r0, [r0]
 8001798:      	strh.w	r0, [sp, #0xa]
 800179c:      	ldrh.w	r0, [sp, #0xa]
 80017a0:      	mov	r1, r0
 80017a2:      	str	r1, [sp]
 80017a4:      	strh.w	r0, [sp, #0x14]
 80017a8:      	strh.w	r0, [sp, #0x16]
 80017ac:      	b	0x80017ae <core::ptr::read::hd069c41edc936268+0x32> @ imm = #-0x2
 80017ae:      	ldr	r0, [sp]
 80017b0:      	add	sp, #0x1c
 80017b2:      	bx	lr

080017b4 <core::ptr::write::h5fca35581300ff3f>:
 80017b4:      	sub	sp, #0xc
 80017b6:      	str	r1, [sp]
 80017b8:      	mov	r1, r0
 80017ba:      	ldr	r0, [sp]
 80017bc:      	str	r0, [sp, #0x4]
 80017be:      	str	r1, [sp, #0x8]
 80017c0:      	ldr	r0, [sp, #0x4]
 80017c2:      	str	r0, [r1]
 80017c4:      	add	sp, #0xc
 80017c6:      	bx	lr

080017c8 <core::ptr::metadata::from_raw_parts::hef062499fdc86e21>:
 80017c8:      	sub	sp, #0x18
 80017ca:      	str	r0, [sp, #0x10]
 80017cc:      	str	r1, [sp, #0x14]
 80017ce:      	str	r0, [sp, #0x8]
 80017d0:      	str	r1, [sp, #0xc]
 80017d2:      	ldr	r1, [sp, #0x8]
 80017d4:      	ldr	r0, [sp, #0xc]
 80017d6:      	str	r1, [sp]
 80017d8:      	str	r0, [sp, #0x4]
 80017da:      	ldr	r0, [sp]
 80017dc:      	ldr	r1, [sp, #0x4]
 80017de:      	add	sp, #0x18
 80017e0:      	bx	lr

080017e2 <core::ptr::metadata::from_raw_parts::hfedf785ed07b7383>:
 80017e2:      	sub	sp, #0x18
 80017e4:      	str	r0, [sp, #0x10]
 80017e6:      	str	r1, [sp, #0x14]
 80017e8:      	str	r0, [sp, #0x8]
 80017ea:      	str	r1, [sp, #0xc]
 80017ec:      	ldr	r1, [sp, #0x8]
 80017ee:      	ldr	r0, [sp, #0xc]
 80017f0:      	str	r1, [sp]
 80017f2:      	str	r0, [sp, #0x4]
 80017f4:      	ldr	r0, [sp]
 80017f6:      	ldr	r1, [sp, #0x4]
 80017f8:      	add	sp, #0x18
 80017fa:      	bx	lr

080017fc <core::ptr::const_ptr::<impl *const T>::cast::h09dee41577615b9f>:
 80017fc:      	sub	sp, #0x4
 80017fe:      	str	r0, [sp]
 8001800:      	add	sp, #0x4
 8001802:      	bx	lr

08001804 <core::ptr::const_ptr::<impl *const T>::cast::hce0ecb24dd391176>:
 8001804:      	sub	sp, #0x4
 8001806:      	str	r0, [sp]
 8001808:      	add	sp, #0x4
 800180a:      	bx	lr

0800180c <__cpsid>:
 800180c:      	cpsid i
 800180e:      	bx	lr

08001810 <__cpsie>:
 8001810:      	cpsie i
 8001812:      	bx	lr

08001814 <__primask_r>:
 8001814:      	mrs	r0, primask
 8001818:      	bx	lr

0800181a <bare_metal::CriticalSection::new::hbefe2a4915cca58e>:
;     }
 800181a:      	bx	lr

0800181c <core::ops::function::FnOnce::call_once::hc1f1aa328bfcb169>:
 800181c:      	ldr	r0, [r0]
 800181e:      	b	0x800181e <core::ops::function::FnOnce::call_once::hc1f1aa328bfcb169+0x2> @ imm = #-0x4

08001820 <core::ptr::drop_in_place<&core::iter::adapters::copied::Copied<core::slice::iter::Iter<u8>>>::hda90baf15865d9c4>:
 8001820:      	bx	lr

08001822 <<T as core::any::Any>::type_id::h73579ccd4cb5b209>:
 8001822:      	movw	r0, #0x208f
 8001826:      	movw	r1, #0x70d7
 800182a:      	movt	r0, #0x9257
 800182e:      	movt	r1, #0xefa8
 8001832:      	bx	lr

08001834 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::heaeb2fdf521e0fc8>:
 8001834:      	push	{r4, r5, r6, r7, lr}
 8001836:      	add	r7, sp, #0xc
 8001838:      	str	r8, [sp, #-4]!
 800183c:      	sub	sp, #0x38
 800183e:      	ldrd	r4, r5, [r1, #24]
 8001842:      	movw	r1, #0x3330
 8001846:      	ldr	r3, [r5, #0xc]
 8001848:      	mov	r8, r0
 800184a:      	movt	r1, #0x800
 800184e:      	movs	r2, #0xc
 8001850:      	mov	r0, r4
 8001852:      	blx	r3
 8001854:      	cbz	r0, 0x8001862 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::heaeb2fdf521e0fc8+0x2e> @ imm = #0xa
 8001856:      	movs	r6, #0x1
 8001858:      	mov	r0, r6
 800185a:      	add	sp, #0x38
 800185c:      	ldr	r8, [sp], #4
 8001860:      	pop	{r4, r5, r6, r7, pc}
 8001862:      	ldr.w	r0, [r8, #0x8]
 8001866:      	cbz	r0, 0x8001874 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::heaeb2fdf521e0fc8+0x40> @ imm = #0xa
 8001868:      	str	r0, [sp, #0x4]
 800186a:      	movw	r0, #0x2385
 800186e:      	movt	r0, #0x800
 8001872:      	b	0x80018a0 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::heaeb2fdf521e0fc8+0x6c> @ imm = #0x2a
 8001874:      	ldrd	r6, r0, [r8]
 8001878:      	ldr	r1, [r0, #0xc]
 800187a:      	mov	r0, r6
 800187c:      	blx	r1
 800187e:      	movw	r2, #0xa91e
 8001882:      	movt	r2, #0x7ef2
 8001886:      	eors	r1, r2
 8001888:      	movw	r2, #0xbcf4
 800188c:      	movt	r2, #0xecc7
 8001890:      	eors	r0, r2
 8001892:      	orrs	r0, r1
 8001894:      	bne	0x80018d0 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::heaeb2fdf521e0fc8+0x9c> @ imm = #0x38
 8001896:      	movw	r0, #0x23bd
 800189a:      	str	r6, [sp, #0x4]
 800189c:      	movt	r0, #0x800
 80018a0:      	str	r0, [sp, #0xc]
 80018a2:      	add	r0, sp, #0x4
 80018a4:      	str	r0, [sp, #0x8]
 80018a6:      	add	r0, sp, #0x8
 80018a8:      	str	r0, [sp, #0x30]
 80018aa:      	movs	r0, #0x0
 80018ac:      	str	r0, [sp, #0x2c]
 80018ae:      	add	r2, sp, #0x20
 80018b0:      	str	r0, [sp, #0x28]
 80018b2:      	movs	r0, #0x2
 80018b4:      	str	r0, [sp, #0x24]
 80018b6:      	movw	r0, #0x3340
 80018ba:      	movt	r0, #0x800
 80018be:      	movs	r6, #0x1
 80018c0:      	str	r0, [sp, #0x20]
 80018c2:      	mov	r0, r4
 80018c4:      	mov	r1, r5
 80018c6:      	str	r6, [sp, #0x34]
 80018c8:      	bl	0x800197e <core::fmt::write::h57ce06a461283b3c> @ imm = #0xb2
 80018cc:      	cmp	r0, #0x0
 80018ce:      	bne	0x8001858 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::heaeb2fdf521e0fc8+0x24> @ imm = #-0x7a
 80018d0:      	ldr.w	r0, [r8, #0xc]
 80018d4:      	movw	r1, #0x2295
 80018d8:      	movt	r1, #0x800
 80018dc:      	add.w	r2, r0, #0xc
 80018e0:      	str	r1, [sp, #0x1c]
 80018e2:      	strd	r1, r2, [sp, #20]
 80018e6:      	add.w	r1, r0, #0x8
 80018ea:      	str	r1, [sp, #0x10]
 80018ec:      	movw	r1, #0x23b1
 80018f0:      	movt	r1, #0x800
 80018f4:      	add	r2, sp, #0x20
 80018f6:      	strd	r0, r1, [sp, #8]
 80018fa:      	add	r1, sp, #0x8
 80018fc:      	movs	r0, #0x3
 80018fe:      	str	r1, [sp, #0x30]
 8001900:      	movs	r1, #0x0
 8001902:      	str	r0, [sp, #0x34]
 8001904:      	strd	r0, r1, [sp, #36]
 8001908:      	movw	r0, #0x3308
 800190c:      	movt	r0, #0x800
 8001910:      	str	r1, [sp, #0x2c]
 8001912:      	str	r0, [sp, #0x20]
 8001914:      	mov	r0, r4
 8001916:      	mov	r1, r5
 8001918:      	bl	0x800197e <core::fmt::write::h57ce06a461283b3c> @ imm = #0x62
 800191c:      	mov	r6, r0
 800191e:      	mov	r0, r6
 8001920:      	add	sp, #0x38
 8001922:      	ldr	r8, [sp], #4
 8001926:      	pop	{r4, r5, r6, r7, pc}

08001928 <core::panicking::panic::hd499c3017018cd48>:
 8001928:      	push	{r7, lr}
 800192a:      	mov	r7, sp
 800192c:      	sub	sp, #0x20
 800192e:      	mov	r12, r2
 8001930:      	movw	r2, #0x32f4
 8001934:      	movt	r2, #0x800
 8001938:      	movs	r3, #0x0
 800193a:      	strd	r0, r1, [sp, #24]
 800193e:      	mov	r0, sp
 8001940:      	str	r2, [sp, #0x10]
 8001942:      	movs	r2, #0x1
 8001944:      	mov	r1, r12
 8001946:      	str	r2, [sp, #0x4]
 8001948:      	add	r2, sp, #0x18
 800194a:      	str	r3, [sp, #0x14]
 800194c:      	strd	r3, r3, [sp, #8]
 8001950:      	str	r2, [sp]
 8001952:      	bl	0x8001958 <core::panicking::panic_fmt::h46301c7d62ff248a> @ imm = #0x2
 8001956:      	trap

08001958 <core::panicking::panic_fmt::h46301c7d62ff248a>:
 8001958:      	push	{r7, lr}
 800195a:      	mov	r7, sp
 800195c:      	sub	sp, #0x10
 800195e:      	strd	r0, r1, [sp, #8]
 8001962:      	movw	r0, #0x3320
 8001966:      	movt	r0, #0x800
 800196a:      	str	r0, [sp, #0x4]
 800196c:      	movw	r0, #0x32f4
 8001970:      	movt	r0, #0x800
 8001974:      	str	r0, [sp]
 8001976:      	mov	r0, sp
 8001978:      	bl	0x80023ca <rust_begin_unwind> @ imm = #0xa4e
 800197c:      	trap

0800197e <core::fmt::write::h57ce06a461283b3c>:
 800197e:      	push	{r4, r5, r6, r7, lr}
 8001980:      	add	r7, sp, #0xc
 8001982:      	push.w	{r8, r9, r10, r11}
 8001986:      	sub	sp, #0x2c
 8001988:      	mov	r11, r2
 800198a:      	movs	r2, #0x3
 800198c:      	ldr.w	r10, [r11, #0x8]
 8001990:      	strb.w	r2, [sp, #0x28]
 8001994:      	movs	r2, #0x20
 8001996:      	str	r2, [sp, #0xc]
 8001998:      	movs	r2, #0x0
 800199a:      	cmp.w	r10, #0x0
 800199e:      	str	r2, [sp, #0x8]
 80019a0:      	str	r1, [sp, #0x24]
 80019a2:      	str	r0, [sp, #0x20]
 80019a4:      	str	r2, [sp, #0x18]
 80019a6:      	str	r2, [sp, #0x10]
 80019a8:      	beq	0x8001a84 <core::fmt::write::h57ce06a461283b3c+0x106> @ imm = #0xd8
 80019aa:      	ldr.w	r0, [r11, #0xc]
 80019ae:      	cmp	r0, #0x0
 80019b0:      	beq.w	0x8001ad2 <core::fmt::write::h57ce06a461283b3c+0x154> @ imm = #0x11e
 80019b4:      	mvn	r1, #0x1f
 80019b8:      	ldr.w	r9, [r11]
 80019bc:      	add.w	r1, r1, r0, lsl #5
 80019c0:      	lsls	r0, r0, #0x5
 80019c2:      	movs	r4, #0x0
 80019c4:      	mov.w	r8, #0x0
 80019c8:      	movs	r2, #0x1
 80019ca:      	add.w	r1, r2, r1, lsr #5
 80019ce:      	str	r1, [sp]
 80019d0:      	str	r0, [sp, #0x4]
 80019d2:      	add.w	r0, r9, r8
 80019d6:      	ldr	r2, [r0, #0x4]
 80019d8:      	cbz	r2, 0x80019ec <core::fmt::write::h57ce06a461283b3c+0x6e> @ imm = #0x10
 80019da:      	ldrd	r0, r3, [sp, #32]
 80019de:      	ldr.w	r1, [r9, r8]
 80019e2:      	ldr	r3, [r3, #0xc]
 80019e4:      	blx	r3
 80019e6:      	cmp	r0, #0x0
 80019e8:      	bne.w	0x8001af4 <core::fmt::write::h57ce06a461283b3c+0x176> @ imm = #0x108
 80019ec:      	add.w	r0, r10, r8, lsl #2
 80019f0:      	ldr.w	r1, [r11, #0x10]
 80019f4:      	ldrd	r5, r6, [r0, #4]
 80019f8:      	ldrd	r2, r3, [r0, #20]
 80019fc:      	strd	r6, r5, [sp, #8]
 8001a00:      	ldrb	r6, [r0, #0x1c]
 8001a02:      	strb.w	r6, [sp, #0x28]
 8001a06:      	cbz	r2, 0x8001a28 <core::fmt::write::h57ce06a461283b3c+0xaa> @ imm = #0x1e
 8001a08:      	cmp	r2, #0x1
 8001a0a:      	bne	0x8001a1e <core::fmt::write::h57ce06a461283b3c+0xa0> @ imm = #0x10
 8001a0c:      	add.w	r2, r1, r3, lsl #3
 8001a10:      	movw	r6, #0x181d
 8001a14:      	movt	r6, #0x800
 8001a18:      	ldr	r2, [r2, #0x4]
 8001a1a:      	cmp	r2, r6
 8001a1c:      	beq	0x8001a22 <core::fmt::write::h57ce06a461283b3c+0xa4> @ imm = #0x2
 8001a1e:      	movs	r5, #0x0
 8001a20:      	b	0x8001a2a <core::fmt::write::h57ce06a461283b3c+0xac> @ imm = #0x6
 8001a22:      	ldr.w	r2, [r1, r3, lsl #3]
 8001a26:      	ldr	r3, [r2]
 8001a28:      	movs	r5, #0x1
 8001a2a:      	add.w	r2, r10, r4
 8001a2e:      	strd	r5, r3, [sp, #16]
 8001a32:      	ldr	r3, [r0, #0xc]
 8001a34:      	ldr	r0, [r2, #0x10]
 8001a36:      	cbz	r3, 0x8001a58 <core::fmt::write::h57ce06a461283b3c+0xda> @ imm = #0x1e
 8001a38:      	cmp	r3, #0x1
 8001a3a:      	bne	0x8001a4e <core::fmt::write::h57ce06a461283b3c+0xd0> @ imm = #0x10
 8001a3c:      	add.w	r3, r1, r0, lsl #3
 8001a40:      	movw	r6, #0x181d
 8001a44:      	movt	r6, #0x800
 8001a48:      	ldr	r3, [r3, #0x4]
 8001a4a:      	cmp	r3, r6
 8001a4c:      	beq	0x8001a52 <core::fmt::write::h57ce06a461283b3c+0xd4> @ imm = #0x2
 8001a4e:      	movs	r3, #0x0
 8001a50:      	b	0x8001a5a <core::fmt::write::h57ce06a461283b3c+0xdc> @ imm = #0x6
 8001a52:      	ldr.w	r0, [r1, r0, lsl #3]
 8001a56:      	ldr	r0, [r0]
 8001a58:      	movs	r3, #0x1
 8001a5a:      	ldr	r2, [r2]
 8001a5c:      	str	r0, [sp, #0x1c]
 8001a5e:      	ldr.w	r0, [r1, r2, lsl #3]
 8001a62:      	add.w	r1, r1, r2, lsl #3
 8001a66:      	ldr	r2, [r1, #0x4]
 8001a68:      	add	r1, sp, #0x8
 8001a6a:      	str	r3, [sp, #0x18]
 8001a6c:      	blx	r2
 8001a6e:      	cmp	r0, #0x0
 8001a70:      	bne	0x8001af4 <core::fmt::write::h57ce06a461283b3c+0x176> @ imm = #0x80
 8001a72:      	ldr	r0, [sp, #0x4]
 8001a74:      	adds	r4, #0x20
 8001a76:      	add.w	r8, r8, #0x8
 8001a7a:      	cmp	r0, r4
 8001a7c:      	bne	0x80019d2 <core::fmt::write::h57ce06a461283b3c+0x54> @ imm = #-0xae
 8001a7e:      	ldr.w	r9, [sp]
 8001a82:      	b	0x8001ad6 <core::fmt::write::h57ce06a461283b3c+0x158> @ imm = #0x50
 8001a84:      	ldr.w	r0, [r11, #0x14]
 8001a88:      	cbz	r0, 0x8001ad2 <core::fmt::write::h57ce06a461283b3c+0x154> @ imm = #0x46
 8001a8a:      	mvn	r1, #0x7
 8001a8e:      	add.w	r0, r1, r0, lsl #3
 8001a92:      	ldr.w	r2, [r11]
 8001a96:      	movs	r1, #0x1
 8001a98:      	ldr.w	r3, [r11, #0x10]
 8001a9c:      	add.w	r5, r1, r0, lsr #3
 8001aa0:      	adds	r6, r2, #0x4
 8001aa2:      	add.w	r8, sp, #0x8
 8001aa6:      	adds	r4, r3, #0x4
 8001aa8:      	mov	r9, r5
 8001aaa:      	ldr	r2, [r6]
 8001aac:      	cbz	r2, 0x8001abc <core::fmt::write::h57ce06a461283b3c+0x13e> @ imm = #0xc
 8001aae:      	ldrd	r0, r3, [sp, #32]
 8001ab2:      	ldr	r1, [r6, #-4]
 8001ab6:      	ldr	r3, [r3, #0xc]
 8001ab8:      	blx	r3
 8001aba:      	cbnz	r0, 0x8001af4 <core::fmt::write::h57ce06a461283b3c+0x176> @ imm = #0x36
 8001abc:      	ldr	r0, [r4, #-4]
 8001ac0:      	mov	r1, r8
 8001ac2:      	ldr	r2, [r4]
 8001ac4:      	blx	r2
 8001ac6:      	cbnz	r0, 0x8001af4 <core::fmt::write::h57ce06a461283b3c+0x176> @ imm = #0x2a
 8001ac8:      	adds	r4, #0x8
 8001aca:      	adds	r6, #0x8
 8001acc:      	subs	r5, #0x1
 8001ace:      	bne	0x8001aaa <core::fmt::write::h57ce06a461283b3c+0x12c> @ imm = #-0x28
 8001ad0:      	b	0x8001ad6 <core::fmt::write::h57ce06a461283b3c+0x158> @ imm = #0x2
 8001ad2:      	mov.w	r9, #0x0
 8001ad6:      	ldrd	r0, r1, [r11]
 8001ada:      	movs	r2, #0x0
 8001adc:      	cmp	r9, r1
 8001ade:      	it	lo
 8001ae0:      	addlo.w	r2, r0, r9, lsl #3
 8001ae4:      	bhs	0x8001afe <core::fmt::write::h57ce06a461283b3c+0x180> @ imm = #0x16
 8001ae6:      	ldrd	r0, r3, [sp, #32]
 8001aea:      	ldrd	r1, r2, [r2]
 8001aee:      	ldr	r3, [r3, #0xc]
 8001af0:      	blx	r3
 8001af2:      	cbz	r0, 0x8001afe <core::fmt::write::h57ce06a461283b3c+0x180> @ imm = #0x8
 8001af4:      	movs	r0, #0x1
 8001af6:      	add	sp, #0x2c
 8001af8:      	pop.w	{r8, r9, r10, r11}
 8001afc:      	pop	{r4, r5, r6, r7, pc}
 8001afe:      	movs	r0, #0x0
 8001b00:      	add	sp, #0x2c
 8001b02:      	pop.w	{r8, r9, r10, r11}
 8001b06:      	pop	{r4, r5, r6, r7, pc}

08001b08 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f>:
 8001b08:      	push	{r4, r5, r6, r7, lr}
 8001b0a:      	add	r7, sp, #0xc
 8001b0c:      	push.w	{r8, r9, r10, r11}
 8001b10:      	sub	sp, #0x1c
 8001b12:      	ldr	r4, [r7, #0xc]
 8001b14:      	mov	r11, r3
 8001b16:      	mov	r9, r0
 8001b18:      	cbz	r1, 0x8001b56 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x4e> @ imm = #0x3a
 8001b1a:      	ldr.w	lr, [r9]
 8001b1e:      	movs	r1, #0x2b
 8001b20:      	ands	r0, lr, #0x1
 8001b24:      	it	eq
 8001b26:      	moveq.w	r1, #0x110000
 8001b2a:      	add.w	r10, r0, r4
 8001b2e:      	ldr	r6, [r7, #0x8]
 8001b30:      	lsls.w	r0, lr, #0x1d
 8001b34:      	bpl	0x8001b68 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x60> @ imm = #0x30
 8001b36:      	cmp.w	r11, #0x0
 8001b3a:      	beq	0x8001b86 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x7e> @ imm = #0x48
 8001b3c:      	sub.w	r0, r11, #0x1
 8001b40:      	and	r12, r11, #0x3
 8001b44:      	cmp	r0, #0x3
 8001b46:      	bhs	0x8001b8c <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x84> @ imm = #0x42
 8001b48:      	mov.w	r8, #0x0
 8001b4c:      	mov	r3, r2
 8001b4e:      	cmp.w	r12, #0x0
 8001b52:      	bne	0x8001bea <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0xe2> @ imm = #0x94
 8001b54:      	b	0x8001c20 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x118> @ imm = #0xc8
 8001b56:      	ldr.w	lr, [r9]
 8001b5a:      	add.w	r10, r4, #0x1
 8001b5e:      	movs	r1, #0x2d
 8001b60:      	ldr	r6, [r7, #0x8]
 8001b62:      	lsls.w	r0, lr, #0x1d
 8001b66:      	bmi	0x8001b36 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2e> @ imm = #-0x34
 8001b68:      	movs	r2, #0x0
 8001b6a:      	mov.w	r11, #0x0
 8001b6e:      	ldr.w	r0, [r9, #0x8]
 8001b72:      	cmp	r0, #0x1
 8001b74:      	beq	0x8001c2a <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x122> @ imm = #0xb2
 8001b76:      	mov	r0, r9
 8001b78:      	mov	r3, r11
 8001b7a:      	bl	0x8001dea <core::fmt::Formatter::pad_integral::write_prefix::hde7a5d3a01013f37> @ imm = #0x26c
 8001b7e:      	cmp	r0, #0x0
 8001b80:      	beq	0x8001c6a <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x162> @ imm = #0xe6
 8001b82:      	movs	r5, #0x1
 8001b84:      	b	0x8001ca6 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x19e> @ imm = #0x11e
 8001b86:      	mov.w	r8, #0x0
 8001b8a:      	b	0x8001c20 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x118> @ imm = #0x92
 8001b8c:      	str	r6, [sp, #0x18]
 8001b8e:      	mov	r3, r2
 8001b90:      	strd	r4, r1, [sp, #16]
 8001b94:      	bic	r1, r11, #0x3
 8001b98:      	rsbs	r5, r1, #0
 8001b9a:      	mov.w	r8, #0x0
 8001b9e:      	mov	r1, r2
 8001ba0:      	ldrsb.w	r2, [r3, #0x2]
 8001ba4:      	ldrsb.w	r4, [r3, #0x3]
 8001ba8:      	ldrsb	r6, [r3], #4
 8001bac:      	ldrsb	r0, [r3, #-3]
 8001bb0:      	cmn.w	r6, #0x41
 8001bb4:      	it	gt
 8001bb6:      	addgt.w	r8, r8, #0x1
 8001bba:      	cmn.w	r0, #0x41
 8001bbe:      	it	gt
 8001bc0:      	addgt.w	r8, r8, #0x1
 8001bc4:      	cmn.w	r2, #0x41
 8001bc8:      	it	gt
 8001bca:      	addgt.w	r8, r8, #0x1
 8001bce:      	cmn.w	r4, #0x41
 8001bd2:      	it	gt
 8001bd4:      	addgt.w	r8, r8, #0x1
 8001bd8:      	adds	r5, #0x4
 8001bda:      	bne	0x8001ba0 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x98> @ imm = #-0x3e
 8001bdc:      	mov	r2, r1
 8001bde:      	ldr	r4, [sp, #0x10]
 8001be0:      	ldr	r6, [sp, #0x18]
 8001be2:      	ldr	r1, [sp, #0x14]
 8001be4:      	cmp.w	r12, #0x0
 8001be8:      	beq	0x8001c20 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x118> @ imm = #0x34
 8001bea:      	ldrsb.w	r0, [r3]
 8001bee:      	cmn.w	r0, #0x41
 8001bf2:      	it	gt
 8001bf4:      	addgt.w	r8, r8, #0x1
 8001bf8:      	cmp.w	r12, #0x1
 8001bfc:      	beq	0x8001c20 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x118> @ imm = #0x20
 8001bfe:      	ldrsb.w	r0, [r3, #0x1]
 8001c02:      	cmn.w	r0, #0x41
 8001c06:      	it	gt
 8001c08:      	addgt.w	r8, r8, #0x1
 8001c0c:      	cmp.w	r12, #0x2
 8001c10:      	beq	0x8001c20 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x118> @ imm = #0xc
 8001c12:      	ldrsb.w	r0, [r3, #0x2]
 8001c16:      	cmn.w	r0, #0x41
 8001c1a:      	it	gt
 8001c1c:      	addgt.w	r8, r8, #0x1
 8001c20:      	add	r10, r8
 8001c22:      	ldr.w	r0, [r9, #0x8]
 8001c26:      	cmp	r0, #0x1
 8001c28:      	bne	0x8001b76 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x6e> @ imm = #-0xb6
 8001c2a:      	ldr.w	r8, [r9, #0xc]
 8001c2e:      	cmp	r8, r10
 8001c30:      	bls	0x8001c5c <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x154> @ imm = #0x28
 8001c32:      	lsls.w	r0, lr, #0x1c
 8001c36:      	bmi	0x8001c84 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x17c> @ imm = #0x4a
 8001c38:      	ldrb.w	r5, [r9, #0x20]
 8001c3c:      	sub.w	r0, r8, r10
 8001c40:      	cmp	r5, #0x3
 8001c42:      	it	eq
 8001c44:      	moveq	r5, #0x1
 8001c46:      	lsls	r3, r5, #0x1e
 8001c48:      	str	r2, [sp, #0x8]
 8001c4a:      	strd	r1, r6, [sp, #20]
 8001c4e:      	beq	0x8001cd2 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x1ca> @ imm = #0x80
 8001c50:      	cmp	r5, #0x1
 8001c52:      	bne	0x8001cd6 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x1ce> @ imm = #0x80
 8001c54:      	movs	r1, #0x0
 8001c56:      	str	r1, [sp, #0xc]
 8001c58:      	mov	r1, r0
 8001c5a:      	b	0x8001cde <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x1d6> @ imm = #0x80
 8001c5c:      	mov	r0, r9
 8001c5e:      	mov	r3, r11
 8001c60:      	bl	0x8001dea <core::fmt::Formatter::pad_integral::write_prefix::hde7a5d3a01013f37> @ imm = #0x186
 8001c64:      	cmp	r0, #0x0
 8001c66:      	bne.w	0x8001db2 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2aa> @ imm = #0x148
 8001c6a:      	ldr.w	r1, [r9, #0x1c]
 8001c6e:      	mov	r2, r4
 8001c70:      	ldr.w	r0, [r9, #0x18]
 8001c74:      	ldr	r3, [r1, #0xc]
 8001c76:      	mov	r1, r6
 8001c78:      	add	sp, #0x1c
 8001c7a:      	pop.w	{r8, r9, r10, r11}
 8001c7e:      	pop.w	{r4, r5, r6, r7, lr}
 8001c82:      	bx	r3
 8001c84:      	ldr.w	r0, [r9, #0x4]
 8001c88:      	movs	r5, #0x1
 8001c8a:      	str	r0, [sp, #0xc]
 8001c8c:      	movs	r0, #0x30
 8001c8e:      	ldrb.w	r3, [r9, #0x20]
 8001c92:      	str	r3, [sp, #0x4]
 8001c94:      	mov	r3, r11
 8001c96:      	str.w	r0, [r9, #0x4]
 8001c9a:      	mov	r0, r9
 8001c9c:      	strb.w	r5, [r9, #0x20]
 8001ca0:      	bl	0x8001dea <core::fmt::Formatter::pad_integral::write_prefix::hde7a5d3a01013f37> @ imm = #0x146
 8001ca4:      	cbz	r0, 0x8001cb0 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x1a8> @ imm = #0x8
 8001ca6:      	mov	r0, r5
 8001ca8:      	add	sp, #0x1c
 8001caa:      	pop.w	{r8, r9, r10, r11}
 8001cae:      	pop	{r4, r5, r6, r7, pc}
 8001cb0:      	ldrb.w	r0, [r9, #0x20]
 8001cb4:      	sub.w	r1, r8, r10
 8001cb8:      	cmp	r0, #0x3
 8001cba:      	it	eq
 8001cbc:      	moveq	r0, #0x1
 8001cbe:      	lsls	r2, r0, #0x1e
 8001cc0:      	str	r4, [sp, #0x10]
 8001cc2:      	str	r6, [sp, #0x18]
 8001cc4:      	beq	0x8001d4c <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x244> @ imm = #0x84
 8001cc6:      	cmp	r0, #0x1
 8001cc8:      	bne	0x8001d52 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x24a> @ imm = #0x86
 8001cca:      	mov.w	r10, #0x0
 8001cce:      	mov	r0, r1
 8001cd0:      	b	0x8001d5a <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x252> @ imm = #0x86
 8001cd2:      	movs	r1, #0x0
 8001cd4:      	b	0x8001cdc <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x1d4> @ imm = #0x4
 8001cd6:      	lsrs	r1, r0, #0x1
 8001cd8:      	adds	r0, #0x1
 8001cda:      	lsrs	r0, r0, #0x1
 8001cdc:      	str	r0, [sp, #0xc]
 8001cde:      	ldr.w	r5, [r9, #0x4]
 8001ce2:      	add.w	r10, r1, #0x1
 8001ce6:      	ldrd	r8, r6, [r9, #24]
 8001cea:      	subs.w	r10, r10, #0x1
 8001cee:      	beq	0x8001cfe <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x1f6> @ imm = #0xc
 8001cf0:      	ldr	r2, [r6, #0x10]
 8001cf2:      	mov	r0, r8
 8001cf4:      	mov	r1, r5
 8001cf6:      	blx	r2
 8001cf8:      	cmp	r0, #0x0
 8001cfa:      	beq	0x8001cea <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x1e2> @ imm = #-0x14
 8001cfc:      	b	0x8001db2 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2aa> @ imm = #0xb2
 8001cfe:      	subs.w	r6, r5, #0x110000
 8001d02:      	ldr	r0, [sp, #0xc]
 8001d04:      	it	ne
 8001d06:      	movne	r6, r0
 8001d08:      	cmp.w	r5, #0x110000
 8001d0c:      	beq	0x8001db2 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2aa> @ imm = #0xa2
 8001d0e:      	ldr	r1, [sp, #0x14]
 8001d10:      	mov	r0, r9
 8001d12:      	ldr	r2, [sp, #0x8]
 8001d14:      	mov	r3, r11
 8001d16:      	bl	0x8001dea <core::fmt::Formatter::pad_integral::write_prefix::hde7a5d3a01013f37> @ imm = #0xd0
 8001d1a:      	cmp	r0, #0x0
 8001d1c:      	bne	0x8001db2 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2aa> @ imm = #0x92
 8001d1e:      	ldrd	r0, r1, [r9, #24]
 8001d22:      	mov	r2, r4
 8001d24:      	ldr	r3, [r1, #0xc]
 8001d26:      	ldr	r1, [sp, #0x18]
 8001d28:      	blx	r3
 8001d2a:      	cmp	r0, #0x0
 8001d2c:      	bne	0x8001db2 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2aa> @ imm = #0x82
 8001d2e:      	ldrd	r8, r9, [r9, #24]
 8001d32:      	movs	r4, #0x0
 8001d34:      	cmp	r6, r4
 8001d36:      	beq	0x8001dd6 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2ce> @ imm = #0x9c
 8001d38:      	ldr.w	r2, [r9, #0x10]
 8001d3c:      	mov	r0, r8
 8001d3e:      	mov	r1, r5
 8001d40:      	blx	r2
 8001d42:      	adds	r4, #0x1
 8001d44:      	cmp	r0, #0x0
 8001d46:      	beq	0x8001d34 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x22c> @ imm = #-0x16
 8001d48:      	subs	r0, r4, #0x1
 8001d4a:      	b	0x8001dd8 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2d0> @ imm = #0x8a
 8001d4c:      	movs	r0, #0x0
 8001d4e:      	mov	r10, r1
 8001d50:      	b	0x8001d5a <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x252> @ imm = #0x6
 8001d52:      	lsrs	r0, r1, #0x1
 8001d54:      	adds	r1, #0x1
 8001d56:      	lsr.w	r10, r1, #0x1
 8001d5a:      	ldr.w	r11, [r9, #0x4]
 8001d5e:      	adds	r4, r0, #0x1
 8001d60:      	ldrd	r6, r5, [r9, #24]
 8001d64:      	subs	r4, #0x1
 8001d66:      	beq	0x8001d76 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x26e> @ imm = #0xc
 8001d68:      	ldr	r2, [r5, #0x10]
 8001d6a:      	mov	r0, r6
 8001d6c:      	mov	r1, r11
 8001d6e:      	blx	r2
 8001d70:      	cmp	r0, #0x0
 8001d72:      	beq	0x8001d64 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x25c> @ imm = #-0x12
 8001d74:      	b	0x8001db2 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2aa> @ imm = #0x3a
 8001d76:      	subs.w	r8, r11, #0x110000
 8001d7a:      	it	ne
 8001d7c:      	movne	r8, r10
 8001d7e:      	cmp.w	r11, #0x110000
 8001d82:      	beq	0x8001db2 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2aa> @ imm = #0x2c
 8001d84:      	ldrd	r0, r1, [r9, #24]
 8001d88:      	ldr	r3, [r1, #0xc]
 8001d8a:      	ldr	r1, [sp, #0x18]
 8001d8c:      	ldr	r2, [sp, #0x10]
 8001d8e:      	blx	r3
 8001d90:      	cbnz	r0, 0x8001db2 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2aa> @ imm = #0x1e
 8001d92:      	ldrd	r4, r10, [r9, #24]
 8001d96:      	movs	r6, #0x0
 8001d98:      	cmp	r8, r6
 8001d9a:      	beq	0x8001dbe <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2b6> @ imm = #0x20
 8001d9c:      	ldr.w	r2, [r10, #0x10]
 8001da0:      	mov	r0, r4
 8001da2:      	mov	r1, r11
 8001da4:      	blx	r2
 8001da6:      	adds	r6, #0x1
 8001da8:      	cmp	r0, #0x0
 8001daa:      	beq	0x8001d98 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x290> @ imm = #-0x16
 8001dac:      	subs	r0, r6, #0x1
 8001dae:      	cmp	r0, r8
 8001db0:      	bhs	0x8001dbe <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f+0x2b6> @ imm = #0xa
 8001db2:      	movs	r5, #0x1
 8001db4:      	mov	r0, r5
 8001db6:      	add	sp, #0x1c
 8001db8:      	pop.w	{r8, r9, r10, r11}
 8001dbc:      	pop	{r4, r5, r6, r7, pc}
 8001dbe:      	ldr	r0, [sp, #0x4]
 8001dc0:      	movs	r5, #0x0
 8001dc2:      	strb.w	r0, [r9, #0x20]
 8001dc6:      	ldr	r0, [sp, #0xc]
 8001dc8:      	str.w	r0, [r9, #0x4]
 8001dcc:      	mov	r0, r5
 8001dce:      	add	sp, #0x1c
 8001dd0:      	pop.w	{r8, r9, r10, r11}
 8001dd4:      	pop	{r4, r5, r6, r7, pc}
 8001dd6:      	mov	r0, r6
 8001dd8:      	movs	r5, #0x0
 8001dda:      	cmp	r0, r6
 8001ddc:      	it	lo
 8001dde:      	movlo	r5, #0x1
 8001de0:      	mov	r0, r5
 8001de2:      	add	sp, #0x1c
 8001de4:      	pop.w	{r8, r9, r10, r11}
 8001de8:      	pop	{r4, r5, r6, r7, pc}

08001dea <core::fmt::Formatter::pad_integral::write_prefix::hde7a5d3a01013f37>:
 8001dea:      	push	{r4, r5, r6, r7, lr}
 8001dec:      	add	r7, sp, #0xc
 8001dee:      	str	r11, [sp, #-4]!
 8001df2:      	mov	r4, r3
 8001df4:      	mov	r5, r2
 8001df6:      	mov	r6, r0
 8001df8:      	cmp.w	r1, #0x110000
 8001dfc:      	beq	0x8001e10 <core::fmt::Formatter::pad_integral::write_prefix::hde7a5d3a01013f37+0x26> @ imm = #0x10
 8001dfe:      	ldrd	r0, r2, [r6, #24]
 8001e02:      	ldr	r2, [r2, #0x10]
 8001e04:      	blx	r2
 8001e06:      	cbz	r0, 0x8001e10 <core::fmt::Formatter::pad_integral::write_prefix::hde7a5d3a01013f37+0x26> @ imm = #0x6
 8001e08:      	movs	r0, #0x1
 8001e0a:      	ldr	r11, [sp], #4
 8001e0e:      	pop	{r4, r5, r6, r7, pc}
 8001e10:      	cbz	r5, 0x8001e26 <core::fmt::Formatter::pad_integral::write_prefix::hde7a5d3a01013f37+0x3c> @ imm = #0x12
 8001e12:      	ldrd	r0, r1, [r6, #24]
 8001e16:      	mov	r2, r4
 8001e18:      	ldr	r3, [r1, #0xc]
 8001e1a:      	mov	r1, r5
 8001e1c:      	ldr	r11, [sp], #4
 8001e20:      	pop.w	{r4, r5, r6, r7, lr}
 8001e24:      	bx	r3
 8001e26:      	movs	r0, #0x0
 8001e28:      	ldr	r11, [sp], #4
 8001e2c:      	pop	{r4, r5, r6, r7, pc}

08001e2e <core::fmt::Formatter::pad::h8e88ca98b16c2f5b>:
 8001e2e:      	push	{r4, r5, r6, r7, lr}
 8001e30:      	add	r7, sp, #0xc
 8001e32:      	push.w	{r8, r9, r10, r11}
 8001e36:      	sub	sp, #0x4
 8001e38:      	mov	r4, r1
 8001e3a:      	ldr.w	lr, [r0, #0x8]
 8001e3e:      	ldr	r1, [r0, #0x10]
 8001e40:      	mov	r9, r2
 8001e42:      	cmp.w	lr, #0x1
 8001e46:      	bne	0x8001e72 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x44> @ imm = #0x28
 8001e48:      	cmp	r1, #0x1
 8001e4a:      	beq	0x8001e78 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x4a> @ imm = #0x2a
 8001e4c:      	ldr.w	lr, [r0, #0xc]
 8001e50:      	cmp.w	r9, #0x0
 8001e54:      	beq.w	0x80020e8 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x2ba> @ imm = #0x290
 8001e58:      	sub.w	r2, r9, #0x1
 8001e5c:      	and	r12, r9, #0x3
 8001e60:      	cmp	r2, #0x3
 8001e62:      	bhs	0x8001f3c <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x10e> @ imm = #0xd6
 8001e64:      	movs	r2, #0x0
 8001e66:      	mov	r6, r4
 8001e68:      	cmp.w	r12, #0x0
 8001e6c:      	bne.w	0x8001f84 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x156> @ imm = #0x114
 8001e70:      	b	0x8001fb4 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x186> @ imm = #0x140
 8001e72:      	cmp	r1, #0x1
 8001e74:      	bne.w	0x80020f0 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x2c2> @ imm = #0x278
 8001e78:      	ldr	r6, [r0, #0x14]
 8001e7a:      	add.w	r8, r4, r9
 8001e7e:      	movs	r2, #0x0
 8001e80:      	str	r4, [sp]
 8001e82:      	cbnz	r6, 0x8001ee2 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0xb4> @ imm = #0x5c
 8001e84:      	cmp	r4, r8
 8001e86:      	beq.w	0x80020d0 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x2a2> @ imm = #0x246
 8001e8a:      	mov	r6, r4
 8001e8c:      	ldrsb	r3, [r6], #1
 8001e90:      	cmp.w	r3, #0xffffffff
 8001e94:      	ble.w	0x8002028 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x1fa> @ imm = #0x190
 8001e98:      	ldr	r4, [sp]
 8001e9a:      	cmp	r2, #0x0
 8001e9c:      	beq.w	0x8002044 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x216> @ imm = #0x1a4
 8001ea0:      	cmp	r2, r9
 8001ea2:      	bhs.w	0x800203e <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x210> @ imm = #0x198
 8001ea6:      	ldrsb	r1, [r4, r2]
 8001ea8:      	cmn.w	r1, #0x40
 8001eac:      	bge.w	0x8002044 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x216> @ imm = #0x194
 8001eb0:      	movs	r1, #0x0
 8001eb2:      	movs	r2, #0x0
 8001eb4:      	b	0x8002046 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x218> @ imm = #0x18e
 8001eb6:      	ldrb	r1, [r4], #1
 8001eba:      	and	r12, r1, #0x3f
 8001ebe:      	mov.w	r1, #0x1c0000
 8001ec2:      	and.w	r1, r1, r5, lsl #18
 8001ec6:      	orr.w	r1, r1, r10, lsl #12
 8001eca:      	orr.w	r1, r1, r11, lsl #6
 8001ece:      	add	r1, r12
 8001ed0:      	cmp.w	r1, #0x110000
 8001ed4:      	beq.w	0x80020d0 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x2a2> @ imm = #0x1f8
 8001ed8:      	subs	r1, r2, r3
 8001eda:      	subs	r6, #0x1
 8001edc:      	add.w	r2, r1, r4
 8001ee0:      	beq	0x8001e84 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x56> @ imm = #-0x60
 8001ee2:      	cmp	r4, r8
 8001ee4:      	beq.w	0x80020d0 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x2a2> @ imm = #0x1e8
 8001ee8:      	mov	r3, r4
 8001eea:      	ldrsb	r5, [r4], #1
 8001eee:      	cmp.w	r5, #0xffffffff
 8001ef2:      	bgt	0x8001ed8 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0xaa> @ imm = #-0x1e
 8001ef4:      	cmp	r4, r8
 8001ef6:      	beq	0x8001f08 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0xda> @ imm = #0xe
 8001ef8:      	ldrb	r1, [r3, #0x1]
 8001efa:      	adds	r4, r3, #0x2
 8001efc:      	and	r10, r1, #0x3f
 8001f00:      	uxtb	r5, r5
 8001f02:      	cmp	r5, #0xe0
 8001f04:      	blo	0x8001ed8 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0xaa> @ imm = #-0x30
 8001f06:      	b	0x8001f14 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0xe6> @ imm = #0xa
 8001f08:      	mov.w	r10, #0x0
 8001f0c:      	mov	r4, r8
 8001f0e:      	uxtb	r5, r5
 8001f10:      	cmp	r5, #0xe0
 8001f12:      	blo	0x8001ed8 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0xaa> @ imm = #-0x3e
 8001f14:      	cmp	r4, r8
 8001f16:      	beq	0x8001f26 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0xf8> @ imm = #0xc
 8001f18:      	ldrb	r1, [r4], #1
 8001f1c:      	and	r11, r1, #0x3f
 8001f20:      	cmp	r5, #0xf0
 8001f22:      	blo	0x8001ed8 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0xaa> @ imm = #-0x4e
 8001f24:      	b	0x8001f30 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x102> @ imm = #0x8
 8001f26:      	mov.w	r11, #0x0
 8001f2a:      	mov	r4, r8
 8001f2c:      	cmp	r5, #0xf0
 8001f2e:      	blo	0x8001ed8 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0xaa> @ imm = #-0x5a
 8001f30:      	cmp	r4, r8
 8001f32:      	bne	0x8001eb6 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x88> @ imm = #-0x80
 8001f34:      	mov.w	r12, #0x0
 8001f38:      	mov	r4, r8
 8001f3a:      	b	0x8001ebe <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x90> @ imm = #-0x80
 8001f3c:      	bic	r2, r9, #0x3
 8001f40:      	mov	r10, r4
 8001f42:      	rsbs	r5, r2, #0
 8001f44:      	movs	r2, #0x0
 8001f46:      	mov	r6, r4
 8001f48:      	ldrsb.w	r4, [r6, #0x2]
 8001f4c:      	ldrsb.w	r8, [r6, #0x3]
 8001f50:      	ldrsb	r1, [r6], #4
 8001f54:      	ldrsb	r3, [r6, #-3]
 8001f58:      	cmn.w	r1, #0x41
 8001f5c:      	it	gt
 8001f5e:      	addgt	r2, #0x1
 8001f60:      	cmn.w	r3, #0x41
 8001f64:      	it	gt
 8001f66:      	addgt	r2, #0x1
 8001f68:      	cmn.w	r4, #0x41
 8001f6c:      	it	gt
 8001f6e:      	addgt	r2, #0x1
 8001f70:      	cmn.w	r8, #0x41
 8001f74:      	it	gt
 8001f76:      	addgt	r2, #0x1
 8001f78:      	adds	r5, #0x4
 8001f7a:      	bne	0x8001f48 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x11a> @ imm = #-0x36
 8001f7c:      	mov	r4, r10
 8001f7e:      	cmp.w	r12, #0x0
 8001f82:      	beq	0x8001fb4 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x186> @ imm = #0x2e
 8001f84:      	ldrsb.w	r1, [r6]
 8001f88:      	cmn.w	r1, #0x41
 8001f8c:      	it	gt
 8001f8e:      	addgt	r2, #0x1
 8001f90:      	cmp.w	r12, #0x1
 8001f94:      	beq	0x8001fb4 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x186> @ imm = #0x1c
 8001f96:      	ldrsb.w	r1, [r6, #0x1]
 8001f9a:      	cmn.w	r1, #0x41
 8001f9e:      	it	gt
 8001fa0:      	addgt	r2, #0x1
 8001fa2:      	cmp.w	r12, #0x2
 8001fa6:      	beq	0x8001fb4 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x186> @ imm = #0xa
 8001fa8:      	ldrsb.w	r1, [r6, #0x2]
 8001fac:      	cmn.w	r1, #0x41
 8001fb0:      	it	gt
 8001fb2:      	addgt	r2, #0x1
 8001fb4:      	cmp	lr, r2
 8001fb6:      	bls.w	0x80020f0 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x2c2> @ imm = #0x136
 8001fba:      	ldrb.w	r1, [r0, #0x20]
 8001fbe:      	sub.w	r2, lr, r2
 8001fc2:      	mov	r8, r4
 8001fc4:      	subs	r3, r1, #0x3
 8001fc6:      	it	ne
 8001fc8:      	movne	r3, r1
 8001fca:      	lsls	r1, r3, #0x1e
 8001fcc:      	beq	0x8001fda <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x1ac> @ imm = #0xa
 8001fce:      	cmp	r3, #0x1
 8001fd0:      	bne	0x8001fe0 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x1b2> @ imm = #0xc
 8001fd2:      	mov.w	r10, #0x0
 8001fd6:      	mov	r1, r2
 8001fd8:      	b	0x8001fe8 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x1ba> @ imm = #0xc
 8001fda:      	movs	r1, #0x0
 8001fdc:      	mov	r10, r2
 8001fde:      	b	0x8001fe8 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x1ba> @ imm = #0x6
 8001fe0:      	lsrs	r1, r2, #0x1
 8001fe2:      	adds	r2, #0x1
 8001fe4:      	lsr.w	r10, r2, #0x1
 8001fe8:      	ldr	r6, [r0, #0x4]
 8001fea:      	adds	r4, r1, #0x1
 8001fec:      	ldrd	r11, r5, [r0, #24]
 8001ff0:      	subs	r4, #0x1
 8001ff2:      	beq	0x8002002 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x1d4> @ imm = #0xc
 8001ff4:      	ldr	r2, [r5, #0x10]
 8001ff6:      	mov	r0, r11
 8001ff8:      	mov	r1, r6
 8001ffa:      	blx	r2
 8001ffc:      	cmp	r0, #0x0
 8001ffe:      	beq	0x8001ff0 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x1c2> @ imm = #-0x12
 8002000:      	b	0x800201e <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x1f0> @ imm = #0x1a
 8002002:      	mov	r0, r10
 8002004:      	subs.w	r10, r6, #0x110000
 8002008:      	it	ne
 800200a:      	movne	r10, r0
 800200c:      	cmp.w	r6, #0x110000
 8002010:      	beq	0x800201e <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x1f0> @ imm = #0xa
 8002012:      	ldr	r3, [r5, #0xc]
 8002014:      	mov	r0, r11
 8002016:      	mov	r1, r8
 8002018:      	mov	r2, r9
 800201a:      	blx	r3
 800201c:      	cbz	r0, 0x800205a <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x22c> @ imm = #0x3a
 800201e:      	movs	r0, #0x1
 8002020:      	add	sp, #0x4
 8002022:      	pop.w	{r8, r9, r10, r11}
 8002026:      	pop	{r4, r5, r6, r7, pc}
 8002028:      	uxtb	r3, r3
 800202a:      	cmp	r6, r8
 800202c:      	beq	0x8002072 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x244> @ imm = #0x42
 800202e:      	ldrb	r1, [r4, #0x1]
 8002030:      	adds	r6, r4, #0x2
 8002032:      	and	r1, r1, #0x3f
 8002036:      	lsls	r5, r1, #0x6
 8002038:      	cmp	r3, #0xe0
 800203a:      	bhs	0x800207c <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x24e> @ imm = #0x3e
 800203c:      	b	0x8001e98 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x6a> @ imm = #-0x1a8
 800203e:      	cmp	r2, r9
 8002040:      	bne.w	0x8001eb0 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x82> @ imm = #-0x194
 8002044:      	mov	r1, r4
 8002046:      	cmp	r1, #0x0
 8002048:      	ite	eq
 800204a:      	moveq	r2, r9
 800204c:      	movne	r4, r1
 800204e:      	cmp.w	lr, #0x1
 8002052:      	beq	0x80020da <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x2ac> @ imm = #0x84
 8002054:      	ldrd	r1, r0, [r0, #24]
 8002058:      	b	0x80020f6 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x2c8> @ imm = #0x9a
 800205a:      	movs	r4, #0x0
 800205c:      	cmp	r10, r4
 800205e:      	beq	0x8002090 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x262> @ imm = #0x2e
 8002060:      	ldr	r2, [r5, #0x10]
 8002062:      	mov	r0, r11
 8002064:      	mov	r1, r6
 8002066:      	blx	r2
 8002068:      	adds	r4, #0x1
 800206a:      	cmp	r0, #0x0
 800206c:      	beq	0x800205c <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x22e> @ imm = #-0x14
 800206e:      	subs	r1, r4, #0x1
 8002070:      	b	0x8002092 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x264> @ imm = #0x1e
 8002072:      	movs	r5, #0x0
 8002074:      	mov	r6, r8
 8002076:      	cmp	r3, #0xe0
 8002078:      	blo.w	0x8001e98 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x6a> @ imm = #-0x1e4
 800207c:      	cmp	r6, r8
 800207e:      	beq	0x80020a2 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x274> @ imm = #0x20
 8002080:      	ldrb	r1, [r6], #1
 8002084:      	and	r4, r1, #0x3f
 8002088:      	cmp	r3, #0xf0
 800208a:      	blo.w	0x8001e98 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x6a> @ imm = #-0x1f6
 800208e:      	b	0x80020ac <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x27e> @ imm = #0x1a
 8002090:      	mov	r1, r10
 8002092:      	movs	r0, #0x0
 8002094:      	cmp	r1, r10
 8002096:      	it	lo
 8002098:      	movlo	r0, #0x1
 800209a:      	add	sp, #0x4
 800209c:      	pop.w	{r8, r9, r10, r11}
 80020a0:      	pop	{r4, r5, r6, r7, pc}
 80020a2:      	movs	r4, #0x0
 80020a4:      	mov	r6, r8
 80020a6:      	cmp	r3, #0xf0
 80020a8:      	blo.w	0x8001e98 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x6a> @ imm = #-0x214
 80020ac:      	orrs	r5, r4
 80020ae:      	cmp	r6, r8
 80020b0:      	itte	ne
 80020b2:      	ldrbne	r1, [r6]
 80020b4:      	andne	r1, r1, #0x3f
 80020b8:      	moveq	r1, #0x0
 80020ba:      	mov.w	r6, #0x1c0000
 80020be:      	and.w	r3, r6, r3, lsl #18
 80020c2:      	orr.w	r3, r3, r5, lsl #6
 80020c6:      	add	r1, r3
 80020c8:      	cmp.w	r1, #0x110000
 80020cc:      	bne.w	0x8001e98 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x6a> @ imm = #-0x238
 80020d0:      	ldr	r4, [sp]
 80020d2:      	mov	r2, r9
 80020d4:      	cmp.w	lr, #0x1
 80020d8:      	bne	0x8002054 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x226> @ imm = #-0x88
 80020da:      	mov	r9, r2
 80020dc:      	ldr.w	lr, [r0, #0xc]
 80020e0:      	cmp.w	r9, #0x0
 80020e4:      	bne.w	0x8001e58 <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x2a> @ imm = #-0x290
 80020e8:      	movs	r2, #0x0
 80020ea:      	cmp	lr, r2
 80020ec:      	bhi.w	0x8001fba <core::fmt::Formatter::pad::h8e88ca98b16c2f5b+0x18c> @ imm = #-0x136
 80020f0:      	ldr	r1, [r0, #0x18]
 80020f2:      	mov	r2, r9
 80020f4:      	ldr	r0, [r0, #0x1c]
 80020f6:      	ldr	r3, [r0, #0xc]
 80020f8:      	mov	r0, r1
 80020fa:      	mov	r1, r4
 80020fc:      	add	sp, #0x4
 80020fe:      	pop.w	{r8, r9, r10, r11}
 8002102:      	pop.w	{r4, r5, r6, r7, lr}
 8002106:      	bx	r3

08002108 <core::slice::index::slice_start_index_len_fail::h20b23529f3ac3e6c>:
 8002108:      	push	{r7, lr}
 800210a:      	mov	r7, sp
 800210c:      	sub	sp, #0x30
 800210e:      	strd	r0, r1, [sp]
 8002112:      	add	r1, sp, #0x20
 8002114:      	movs	r0, #0x2
 8002116:      	str	r1, [sp, #0x18]
 8002118:      	movs	r1, #0x0
 800211a:      	str	r0, [sp, #0x1c]
 800211c:      	strd	r0, r1, [sp, #12]
 8002120:      	movw	r0, #0x347c
 8002124:      	movt	r0, #0x800
 8002128:      	str	r1, [sp, #0x14]
 800212a:      	str	r0, [sp, #0x8]
 800212c:      	movw	r0, #0x2295
 8002130:      	add	r1, sp, #0x4
 8002132:      	movt	r0, #0x800
 8002136:      	str	r0, [sp, #0x2c]
 8002138:      	strd	r0, r1, [sp, #36]
 800213c:      	mov	r0, sp
 800213e:      	str	r0, [sp, #0x20]
 8002140:      	add	r0, sp, #0x8
 8002142:      	mov	r1, r2
 8002144:      	bl	0x8001958 <core::panicking::panic_fmt::h46301c7d62ff248a> @ imm = #-0x7f0
 8002148:      	trap

0800214a <core::slice::index::slice_end_index_len_fail::he10988d0807b900d>:
 800214a:      	push	{r7, lr}
 800214c:      	mov	r7, sp
 800214e:      	sub	sp, #0x30
 8002150:      	strd	r0, r1, [sp]
 8002154:      	add	r1, sp, #0x20
 8002156:      	movs	r0, #0x2
 8002158:      	str	r1, [sp, #0x18]
 800215a:      	movs	r1, #0x0
 800215c:      	str	r0, [sp, #0x1c]
 800215e:      	strd	r0, r1, [sp, #12]
 8002162:      	movw	r0, #0x348c
 8002166:      	movt	r0, #0x800
 800216a:      	str	r1, [sp, #0x14]
 800216c:      	str	r0, [sp, #0x8]
 800216e:      	movw	r0, #0x2295
 8002172:      	add	r1, sp, #0x4
 8002174:      	movt	r0, #0x800
 8002178:      	str	r0, [sp, #0x2c]
 800217a:      	strd	r0, r1, [sp, #36]
 800217e:      	mov	r0, sp
 8002180:      	str	r0, [sp, #0x20]
 8002182:      	add	r0, sp, #0x8
 8002184:      	mov	r1, r2
 8002186:      	bl	0x8001958 <core::panicking::panic_fmt::h46301c7d62ff248a> @ imm = #-0x832
 800218a:      	trap

0800218c <core::slice::index::slice_index_order_fail::h75f96ead05845426>:
 800218c:      	push	{r7, lr}
 800218e:      	mov	r7, sp
 8002190:      	sub	sp, #0x30
 8002192:      	strd	r0, r1, [sp]
 8002196:      	add	r1, sp, #0x20
 8002198:      	movs	r0, #0x2
 800219a:      	str	r1, [sp, #0x18]
 800219c:      	movs	r1, #0x0
 800219e:      	str	r0, [sp, #0x1c]
 80021a0:      	strd	r0, r1, [sp, #12]
 80021a4:      	movw	r0, #0x34c0
 80021a8:      	movt	r0, #0x800
 80021ac:      	str	r1, [sp, #0x14]
 80021ae:      	str	r0, [sp, #0x8]
 80021b0:      	movw	r0, #0x2295
 80021b4:      	add	r1, sp, #0x4
 80021b6:      	movt	r0, #0x800
 80021ba:      	str	r0, [sp, #0x2c]
 80021bc:      	strd	r0, r1, [sp, #36]
 80021c0:      	mov	r0, sp
 80021c2:      	str	r0, [sp, #0x20]
 80021c4:      	add	r0, sp, #0x8
 80021c6:      	mov	r1, r2
 80021c8:      	bl	0x8001958 <core::panicking::panic_fmt::h46301c7d62ff248a> @ imm = #-0x874
 80021cc:      	trap

080021ce <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h6c311f30bd91b8b3>:
 80021ce:      	push	{r4, r6, r7, lr}
 80021d0:      	add	r7, sp, #0x8
 80021d2:      	sub	sp, #0x88
 80021d4:      	ldr	r0, [r0]
 80021d6:      	add.w	r12, sp, #0x8
 80021da:      	mov.w	lr, #0x81
 80021de:      	and	r2, r0, #0xf
 80021e2:      	add.w	r3, r12, lr
 80021e6:      	movs	r4, #0x37
 80021e8:      	cmp	r2, #0xa
 80021ea:      	it	lo
 80021ec:      	movlo	r4, #0x30
 80021ee:      	add	r2, r4
 80021f0:      	strb	r2, [r3, #-2]
 80021f4:      	lsrs	r2, r0, #0x4
 80021f6:      	beq	0x8002244 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h6c311f30bd91b8b3+0x76> @ imm = #0x4a
 80021f8:      	and	r2, r2, #0xf
 80021fc:      	movs	r4, #0x37
 80021fe:      	cmp	r2, #0xa
 8002200:      	it	lo
 8002202:      	movlo	r4, #0x30
 8002204:      	add	r2, r4
 8002206:      	strb	r2, [r3, #-3]
 800220a:      	lsrs	r2, r0, #0x8
 800220c:      	beq	0x800224e <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h6c311f30bd91b8b3+0x80> @ imm = #0x3e
 800220e:      	and	r2, r2, #0xf
 8002212:      	movs	r4, #0x37
 8002214:      	cmp	r2, #0xa
 8002216:      	it	lo
 8002218:      	movlo	r4, #0x30
 800221a:      	add	r2, r4
 800221c:      	strb	r2, [r3, #-4]
 8002220:      	lsrs	r2, r0, #0xc
 8002222:      	beq	0x8002258 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h6c311f30bd91b8b3+0x8a> @ imm = #0x32
 8002224:      	and	r2, r2, #0xf
 8002228:      	movs	r4, #0x37
 800222a:      	cmp	r2, #0xa
 800222c:      	sub.w	lr, lr, #0x4
 8002230:      	it	lo
 8002232:      	movlo	r4, #0x30
 8002234:      	lsrs	r0, r0, #0x10
 8002236:      	add	r2, r4
 8002238:      	strb	r2, [r3, #-5]
 800223c:      	bne	0x80021de <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h6c311f30bd91b8b3+0x10> @ imm = #-0x62
 800223e:      	sub.w	r0, lr, #0x1
 8002242:      	b	0x8002260 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h6c311f30bd91b8b3+0x92> @ imm = #0x1a
 8002244:      	sub.w	r0, lr, #0x2
 8002248:      	sub.w	lr, lr, #0x1
 800224c:      	b	0x8002260 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h6c311f30bd91b8b3+0x92> @ imm = #0x10
 800224e:      	sub.w	r0, lr, #0x3
 8002252:      	sub.w	lr, lr, #0x2
 8002256:      	b	0x8002260 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h6c311f30bd91b8b3+0x92> @ imm = #0x6
 8002258:      	sub.w	r0, lr, #0x4
 800225c:      	sub.w	lr, lr, #0x3
 8002260:      	cmp	r0, #0x81
 8002262:      	bhs	0x8002284 <core::fmt::num::<impl core::fmt::UpperHex for usize>::fmt::h6c311f30bd91b8b3+0xb6> @ imm = #0x1e
 8002264:      	rsb.w	r2, lr, #0x81
 8002268:      	add	r0, r12
 800226a:      	movs	r3, #0x2
 800226c:      	strd	r0, r2, [sp]
 8002270:      	movw	r2, #0x337c
 8002274:      	mov	r0, r1
 8002276:      	movt	r2, #0x800
 800227a:      	movs	r1, #0x1
 800227c:      	bl	0x8001b08 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f> @ imm = #-0x778
 8002280:      	add	sp, #0x88
 8002282:      	pop	{r4, r6, r7, pc}
 8002284:      	movw	r2, #0x336c
 8002288:      	movs	r1, #0x80
 800228a:      	movt	r2, #0x800
 800228e:      	bl	0x8002108 <core::slice::index::slice_start_index_len_fail::h20b23529f3ac3e6c> @ imm = #-0x18a
 8002292:      	trap

08002294 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hdf4ca1669be34ad8>:
 8002294:      	push	{r4, r5, r6, r7, lr}
 8002296:      	add	r7, sp, #0xc
 8002298:      	push.w	{r8, r9, r10, r11}
 800229c:      	sub	sp, #0x34
 800229e:      	ldr	r4, [r0]
 80022a0:      	movw	r0, #0x337e
 80022a4:      	movw	lr, #0x2710
 80022a8:      	mov	r5, r1
 80022aa:      	cmp	r4, lr
 80022ac:      	movt	r0, #0x800
 80022b0:      	blo	0x800232c <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hdf4ca1669be34ad8+0x98> @ imm = #0x78
 80022b2:      	movw	r8, #0x1759
 80022b6:      	movw	r3, #0xe0ff
 80022ba:      	add.w	r11, sp, #0xc
 80022be:      	movs	r1, #0x0
 80022c0:      	movt	r8, #0xd1b7
 80022c4:      	movw	r9, #0x147b
 80022c8:      	mov.w	r10, #0x64
 80022cc:      	movt	r3, #0x5f5
 80022d0:      	str	r5, [sp, #0x8]
 80022d2:      	umull	r2, r5, r4, r8
 80022d6:      	add.w	r12, r11, r1
 80022da:      	subs	r1, #0x4
 80022dc:      	cmp	r4, r3
 80022de:      	lsr.w	r2, r5, #0xd
 80022e2:      	mls	r5, r2, lr, r4
 80022e6:      	mov	r4, r2
 80022e8:      	uxth	r6, r5
 80022ea:      	lsr.w	r6, r6, #0x2
 80022ee:      	mul	r6, r6, r9
 80022f2:      	lsr.w	r6, r6, #0x11
 80022f6:      	mls	r5, r6, r10, r5
 80022fa:      	ldrh.w	r6, [r0, r6, lsl #1]
 80022fe:      	strh.w	r6, [r12, #0x23]
 8002302:      	uxth	r5, r5
 8002304:      	ldrh.w	r5, [r0, r5, lsl #1]
 8002308:      	strh.w	r5, [r12, #0x25]
 800230c:      	bhi	0x80022d2 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hdf4ca1669be34ad8+0x3e> @ imm = #-0x3e
 800230e:      	ldr	r5, [sp, #0x8]
 8002310:      	add.w	r3, r1, #0x27
 8002314:      	mov	r4, r2
 8002316:      	cmp	r4, #0x63
 8002318:      	bgt	0x8002332 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hdf4ca1669be34ad8+0x9e> @ imm = #0x16
 800231a:      	mov	r1, r4
 800231c:      	cmp	r1, #0xa
 800231e:      	blt	0x8002354 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hdf4ca1669be34ad8+0xc0> @ imm = #0x32
 8002320:      	ldrh.w	r0, [r0, r1, lsl #1]
 8002324:      	subs	r2, r3, #0x2
 8002326:      	add	r1, sp, #0xc
 8002328:      	strh	r0, [r1, r2]
 800232a:      	b	0x800235e <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hdf4ca1669be34ad8+0xca> @ imm = #0x30
 800232c:      	movs	r3, #0x27
 800232e:      	cmp	r4, #0x63
 8002330:      	ble	0x800231a <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hdf4ca1669be34ad8+0x86> @ imm = #-0x1a
 8002332:      	uxth	r1, r4
 8002334:      	movw	r2, #0x147b
 8002338:      	lsrs	r1, r1, #0x2
 800233a:      	subs	r3, #0x2
 800233c:      	muls	r1, r2, r1
 800233e:      	movs	r2, #0x64
 8002340:      	add	r6, sp, #0xc
 8002342:      	lsrs	r1, r1, #0x11
 8002344:      	mls	r2, r1, r2, r4
 8002348:      	uxth	r2, r2
 800234a:      	ldrh.w	r2, [r0, r2, lsl #1]
 800234e:      	strh	r2, [r6, r3]
 8002350:      	cmp	r1, #0xa
 8002352:      	bge	0x8002320 <core::fmt::num::imp::<impl core::fmt::Display for usize>::fmt::hdf4ca1669be34ad8+0x8c> @ imm = #-0x36
 8002354:      	subs	r2, r3, #0x1
 8002356:      	add.w	r0, r1, #0x30
 800235a:      	add	r1, sp, #0xc
 800235c:      	strb	r0, [r1, r2]
 800235e:      	add	r1, sp, #0xc
 8002360:      	rsb.w	r0, r2, #0x27
 8002364:      	add	r1, r2
 8002366:      	movw	r2, #0x32f4
 800236a:      	strd	r1, r0, [sp]
 800236e:      	movt	r2, #0x800
 8002372:      	mov	r0, r5
 8002374:      	movs	r1, #0x1
 8002376:      	movs	r3, #0x0
 8002378:      	bl	0x8001b08 <core::fmt::Formatter::pad_integral::h65b6fd9b5660cc7f> @ imm = #-0x874
 800237c:      	add	sp, #0x34
 800237e:      	pop.w	{r8, r9, r10, r11}
 8002382:      	pop	{r4, r5, r6, r7, pc}

08002384 <<&T as core::fmt::Display>::fmt::h3d9984686708d6bf>:
 8002384:      	push	{r4, r5, r6, r7, lr}
 8002386:      	add	r7, sp, #0xc
 8002388:      	push.w	{r8, r9, r11}
 800238c:      	sub	sp, #0x18
 800238e:      	ldr.w	lr, [r0]
 8002392:      	mov	r2, sp
 8002394:      	ldrd	r12, r1, [r1, #24]
 8002398:      	mov	r3, r2
 800239a:      	ldm.w	lr, {r0, r4, r5, r6, r8, r9}
 800239e:      	stm.w	r3, {r0, r4, r5, r6, r8, r9}
 80023a2:      	mov	r0, r12
 80023a4:      	bl	0x800197e <core::fmt::write::h57ce06a461283b3c> @ imm = #-0xa2a
 80023a8:      	add	sp, #0x18
 80023aa:      	pop.w	{r8, r9, r11}
 80023ae:      	pop	{r4, r5, r6, r7, pc}

080023b0 <<&T as core::fmt::Display>::fmt::h63ea021ca5429c64>:
 80023b0:      	mov	r3, r1
 80023b2:      	ldrd	r1, r2, [r0]
 80023b6:      	mov	r0, r3
 80023b8:      	b.w	0x8001e2e <core::fmt::Formatter::pad::h8e88ca98b16c2f5b> @ imm = #-0x58e

080023bc <<&T as core::fmt::Display>::fmt::h96a382e6e4e6a291>:
 80023bc:      	ldr	r0, [r0]
 80023be:      	mov	r3, r1
 80023c0:      	ldrd	r1, r2, [r0]
 80023c4:      	mov	r0, r3
 80023c6:      	b.w	0x8001e2e <core::fmt::Formatter::pad::h8e88ca98b16c2f5b> @ imm = #-0x59c

080023ca <rust_begin_unwind>:
; fn panic(info: &PanicInfo) -> ! {
 80023ca:      	push	{r7, lr}
 80023cc:      	mov	r7, sp
 80023ce:      	sub	sp, #0x48
 80023d0:      	str	r0, [sp, #0x10]
;     interrupt::disable();
 80023d2:      	bl	0x800243c <cortex_m::interrupt::disable::h713bc2dabcd6af52> @ imm = #0x66
 80023d6:      	b	0x80023d8 <rust_begin_unwind+0xe> @ imm = #-0x2
;     let itm = unsafe { &mut *ITM::ptr() };
 80023d8:      	b	0x80023da <rust_begin_unwind+0x10> @ imm = #-0x2
 80023da:      	mov.w	r0, #0xe0000000
;     let itm = unsafe { &mut *ITM::ptr() };
 80023de:      	str	r0, [sp, #0x3c]
;     let stim = &mut itm.stim[0];
 80023e0:      	mov	r1, r0
 80023e2:      	str	r1, [sp, #0x4]
 80023e4:      	str	r0, [sp, #0x40]
 80023e6:      	add	r0, sp, #0x10
;     iprintln!(stim, "{}", info);
 80023e8:      	str	r0, [sp, #0x34]
 80023ea:      	ldr	r0, [sp, #0x34]
 80023ec:      	str	r0, [sp, #0x44]
 80023ee:      	movw	r1, #0x2449
 80023f2:      	movt	r1, #0x800
 80023f6:      	bl	0x80024ba <core::fmt::ArgumentV1::new::hf13fd59543021598> @ imm = #0xc0
 80023fa:      	str	r0, [sp, #0x8]
 80023fc:      	str	r1, [sp, #0xc]
 80023fe:      	b	0x8002400 <rust_begin_unwind+0x36> @ imm = #-0x2
 8002400:      	ldr	r0, [sp, #0xc]
 8002402:      	ldr	r1, [sp, #0x8]
 8002404:      	str	r1, [sp, #0x2c]
 8002406:      	str	r0, [sp, #0x30]
 8002408:      	mov	r1, sp
 800240a:      	movs	r0, #0x1
 800240c:      	str	r0, [r1]
 800240e:      	movw	r1, #0x34d4
 8002412:      	movt	r1, #0x800
 8002416:      	add	r0, sp, #0x14
 8002418:      	movs	r2, #0x2
 800241a:      	add	r3, sp, #0x2c
 800241c:      	bl	0x80024e4 <core::fmt::Arguments::new_v1::h58709c59c469008b> @ imm = #0xc4
 8002420:      	b	0x8002422 <rust_begin_unwind+0x58> @ imm = #-0x2
 8002422:      	ldr	r0, [sp, #0x4]
 8002424:      	add	r1, sp, #0x14
 8002426:      	bl	0x8002698 <cortex_m::itm::write_fmt::hf4c5d891f6526ee8> @ imm = #0x26e
 800242a:      	b	0x800242c <rust_begin_unwind+0x62> @ imm = #-0x2
 800242c:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 800242e:      	strb	r0, [r7, #-13]
 8002432:      	ldrb	r0, [r7, #-13]
 8002436:      	bl	0x8002fb4 <core::sync::atomic::compiler_fence::hfe25789965c2759b> @ imm = #0xb7a
 800243a:      	b	0x800242c <rust_begin_unwind+0x62> @ imm = #-0x12

0800243c <cortex_m::interrupt::disable::h713bc2dabcd6af52>:
; pub fn disable() {
 800243c:      	push	{r7, lr}
 800243e:      	mov	r7, sp
;     call_asm!(__cpsid());
 8002440:      	bl	0x800180c <__cpsid>     @ imm = #-0xc38
 8002444:      	b	0x8002446 <cortex_m::interrupt::disable::h713bc2dabcd6af52+0xa> @ imm = #-0x2
; }
 8002446:      	pop	{r7, pc}

08002448 <<&T as core::fmt::Display>::fmt::h22dc43e582dbaec2>:
 8002448:      	push	{r7, lr}
 800244a:      	mov	r7, sp
 800244c:      	sub	sp, #0x10
 800244e:      	str	r0, [sp, #0x8]
 8002450:      	str	r1, [sp, #0xc]
 8002452:      	ldr	r0, [r0]
 8002454:      	bl	0x8001834 <<core::panic::panic_info::PanicInfo as core::fmt::Display>::fmt::heaeb2fdf521e0fc8> @ imm = #-0xc24
 8002458:      	str	r0, [sp, #0x4]
 800245a:      	b	0x800245c <<&T as core::fmt::Display>::fmt::h22dc43e582dbaec2+0x14> @ imm = #-0x2
 800245c:      	ldr	r0, [sp, #0x4]
 800245e:      	and	r0, r0, #0x1
 8002462:      	add	sp, #0x10
 8002464:      	pop	{r7, pc}

08002466 <core::fmt::ArgumentV1::new::h4f22a748c29ed7a2>:
 8002466:      	sub	sp, #0x24
 8002468:      	str	r0, [sp, #0x4]
 800246a:      	str	r0, [sp, #0x14]
 800246c:      	str	r1, [sp, #0x18]
 800246e:      	str	r1, [sp, #0x1c]
 8002470:      	ldr	r0, [sp, #0x1c]
 8002472:      	str	r0, [sp, #0x8]
 8002474:      	b	0x8002476 <core::fmt::ArgumentV1::new::h4f22a748c29ed7a2+0x10> @ imm = #-0x2
 8002476:      	ldr	r0, [sp, #0x4]
 8002478:      	str	r0, [sp, #0x20]
 800247a:      	ldr	r0, [sp, #0x20]
 800247c:      	str	r0, [sp]
 800247e:      	b	0x8002480 <core::fmt::ArgumentV1::new::h4f22a748c29ed7a2+0x1a> @ imm = #-0x2
 8002480:      	ldr	r0, [sp, #0x8]
 8002482:      	ldr	r1, [sp]
 8002484:      	str	r1, [sp, #0xc]
 8002486:      	str	r0, [sp, #0x10]
 8002488:      	ldr	r0, [sp, #0xc]
 800248a:      	ldr	r1, [sp, #0x10]
 800248c:      	add	sp, #0x24
 800248e:      	bx	lr

08002490 <core::fmt::ArgumentV1::new::he9576381d322603c>:
 8002490:      	sub	sp, #0x24
 8002492:      	str	r0, [sp, #0x4]
 8002494:      	str	r0, [sp, #0x14]
 8002496:      	str	r1, [sp, #0x18]
 8002498:      	str	r1, [sp, #0x1c]
 800249a:      	ldr	r0, [sp, #0x1c]
 800249c:      	str	r0, [sp, #0x8]
 800249e:      	b	0x80024a0 <core::fmt::ArgumentV1::new::he9576381d322603c+0x10> @ imm = #-0x2
 80024a0:      	ldr	r0, [sp, #0x4]
 80024a2:      	str	r0, [sp, #0x20]
 80024a4:      	ldr	r0, [sp, #0x20]
 80024a6:      	str	r0, [sp]
 80024a8:      	b	0x80024aa <core::fmt::ArgumentV1::new::he9576381d322603c+0x1a> @ imm = #-0x2
 80024aa:      	ldr	r0, [sp, #0x8]
 80024ac:      	ldr	r1, [sp]
 80024ae:      	str	r1, [sp, #0xc]
 80024b0:      	str	r0, [sp, #0x10]
 80024b2:      	ldr	r0, [sp, #0xc]
 80024b4:      	ldr	r1, [sp, #0x10]
 80024b6:      	add	sp, #0x24
 80024b8:      	bx	lr

080024ba <core::fmt::ArgumentV1::new::hf13fd59543021598>:
 80024ba:      	sub	sp, #0x24
 80024bc:      	str	r0, [sp, #0x4]
 80024be:      	str	r0, [sp, #0x14]
 80024c0:      	str	r1, [sp, #0x18]
 80024c2:      	str	r1, [sp, #0x1c]
 80024c4:      	ldr	r0, [sp, #0x1c]
 80024c6:      	str	r0, [sp, #0x8]
 80024c8:      	b	0x80024ca <core::fmt::ArgumentV1::new::hf13fd59543021598+0x10> @ imm = #-0x2
 80024ca:      	ldr	r0, [sp, #0x4]
 80024cc:      	str	r0, [sp, #0x20]
 80024ce:      	ldr	r0, [sp, #0x20]
 80024d0:      	str	r0, [sp]
 80024d2:      	b	0x80024d4 <core::fmt::ArgumentV1::new::hf13fd59543021598+0x1a> @ imm = #-0x2
 80024d4:      	ldr	r0, [sp, #0x8]
 80024d6:      	ldr	r1, [sp]
 80024d8:      	str	r1, [sp, #0xc]
 80024da:      	str	r0, [sp, #0x10]
 80024dc:      	ldr	r0, [sp, #0xc]
 80024de:      	ldr	r1, [sp, #0x10]
 80024e0:      	add	sp, #0x24
 80024e2:      	bx	lr

080024e4 <core::fmt::Arguments::new_v1::h58709c59c469008b>:
 80024e4:      	push	{r7, lr}
 80024e6:      	mov	r7, sp
 80024e8:      	sub	sp, #0x30
 80024ea:      	str	r3, [sp]
 80024ec:      	str	r2, [sp, #0x4]
 80024ee:      	str	r1, [sp, #0x8]
 80024f0:      	str	r0, [sp, #0xc]
 80024f2:      	ldr	r0, [r7, #0x8]
 80024f4:      	str	r0, [sp, #0x10]
 80024f6:      	str	r1, [sp, #0x20]
 80024f8:      	str	r2, [sp, #0x24]
 80024fa:      	str	r3, [sp, #0x28]
 80024fc:      	str	r0, [sp, #0x2c]
 80024fe:      	cmp	r2, r0
 8002500:      	blo	0x8002518 <core::fmt::Arguments::new_v1::h58709c59c469008b+0x34> @ imm = #0x14
 8002502:      	b	0x8002504 <core::fmt::Arguments::new_v1::h58709c59c469008b+0x20> @ imm = #-0x2
 8002504:      	ldr	r1, [sp, #0x4]
 8002506:      	ldr	r0, [sp, #0x10]
 8002508:      	adds	r2, r0, #0x1
 800250a:      	movs	r0, #0x0
 800250c:      	cmp	r1, r2
 800250e:      	it	hi
 8002510:      	movhi	r0, #0x1
 8002512:      	strb	r0, [r7, #-25]
 8002516:      	b	0x8002520 <core::fmt::Arguments::new_v1::h58709c59c469008b+0x3c> @ imm = #0x6
 8002518:      	movs	r0, #0x1
 800251a:      	strb	r0, [r7, #-25]
 800251e:      	b	0x8002520 <core::fmt::Arguments::new_v1::h58709c59c469008b+0x3c> @ imm = #-0x2
 8002520:      	ldrb	r0, [r7, #-25]
 8002524:      	lsls	r0, r0, #0x1f
 8002526:      	cbnz	r0, 0x8002560 <core::fmt::Arguments::new_v1::h58709c59c469008b+0x7c> @ imm = #0x36
 8002528:      	b	0x800252a <core::fmt::Arguments::new_v1::h58709c59c469008b+0x46> @ imm = #-0x2
 800252a:      	ldr	r0, [sp, #0x10]
 800252c:      	ldr	r1, [sp, #0xc]
 800252e:      	ldr	r2, [sp]
 8002530:      	ldr	r3, [sp, #0x4]
 8002532:      	ldr.w	r12, [sp, #0x8]
 8002536:      	mov.w	lr, #0x0
 800253a:      	str.w	lr, [sp, #0x1c]
 800253e:      	str.w	lr, [sp, #0x18]
 8002542:      	str.w	lr, [sp, #0x18]
 8002546:      	str.w	r12, [r1]
 800254a:      	str	r3, [r1, #0x4]
 800254c:      	ldr.w	r12, [sp, #0x18]
 8002550:      	ldr	r3, [sp, #0x1c]
 8002552:      	str.w	r12, [r1, #0x8]
 8002556:      	str	r3, [r1, #0xc]
 8002558:      	str	r2, [r1, #0x10]
 800255a:      	str	r0, [r1, #0x14]
 800255c:      	add	sp, #0x30
 800255e:      	pop	{r7, pc}
 8002560:      	movw	r0, #0x34e4
 8002564:      	movt	r0, #0x800
 8002568:      	movw	r2, #0x353c
 800256c:      	movt	r2, #0x800
 8002570:      	movs	r1, #0xc
 8002572:      	bl	0x8001928 <core::panicking::panic::hd499c3017018cd48> @ imm = #-0xc4e
 8002576:      	trap

08002578 <core::fmt::Write::write_char::hc548982c2bdfa774>:
 8002578:      	push	{r7, lr}
 800257a:      	mov	r7, sp
 800257c:      	sub	sp, #0x20
 800257e:      	str	r1, [sp, #0x4]
 8002580:      	mov	r1, r0
 8002582:      	ldr	r0, [sp, #0x4]
 8002584:      	str	r1, [sp, #0x8]
 8002586:      	str	r1, [sp, #0x18]
 8002588:      	str	r0, [sp, #0x1c]
 800258a:      	movs	r1, #0x0
 800258c:      	str	r1, [sp, #0x14]
 800258e:      	add	r1, sp, #0x14
 8002590:      	movs	r2, #0x4
 8002592:      	bl	0x80028c0 <core::char::methods::<impl char>::encode_utf8::h44d885552c5736b7> @ imm = #0x32a
 8002596:      	str	r0, [sp, #0xc]
 8002598:      	str	r1, [sp, #0x10]
 800259a:      	b	0x800259c <core::fmt::Write::write_char::hc548982c2bdfa774+0x24> @ imm = #-0x2
 800259c:      	ldr	r2, [sp, #0x10]
 800259e:      	ldr	r1, [sp, #0xc]
 80025a0:      	ldr	r0, [sp, #0x8]
 80025a2:      	bl	0x800265c <<cortex_m::itm::Port as core::fmt::Write>::write_str::h9e88be8596ebb23c> @ imm = #0xb6
 80025a6:      	str	r0, [sp]
 80025a8:      	b	0x80025aa <core::fmt::Write::write_char::hc548982c2bdfa774+0x32> @ imm = #-0x2
 80025aa:      	ldr	r0, [sp]
 80025ac:      	and	r0, r0, #0x1
 80025b0:      	add	sp, #0x20
 80025b2:      	pop	{r7, pc}

080025b4 <core::fmt::Write::write_fmt::he797259dfa8bdbe6>:
 80025b4:      	push	{r4, r5, r6, r7, lr}
 80025b6:      	add	r7, sp, #0xc
 80025b8:      	str	r11, [sp, #-4]!
 80025bc:      	sub	sp, #0x20
 80025be:      	str	r0, [sp, #0x4]
 80025c0:      	add	r2, sp, #0x8
 80025c2:      	mov	r0, r2
 80025c4:      	ldm.w	r1, {r3, r4, r5, r6, r12, lr}
 80025c8:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 80025cc:      	movw	r1, #0x354c
 80025d0:      	movt	r1, #0x800
 80025d4:      	add	r0, sp, #0x4
 80025d6:      	bl	0x800197e <core::fmt::write::h57ce06a461283b3c> @ imm = #-0xc5c
 80025da:      	str	r0, [sp]
 80025dc:      	b	0x80025de <core::fmt::Write::write_fmt::he797259dfa8bdbe6+0x2a> @ imm = #-0x2
 80025de:      	ldr	r0, [sp]
 80025e0:      	and	r0, r0, #0x1
 80025e4:      	add	sp, #0x20
 80025e6:      	ldr	r11, [sp], #4
 80025ea:      	pop	{r4, r5, r6, r7, pc}

080025ec <<&mut W as core::fmt::Write>::write_char::h0d15c40b7cd4d1e8>:
 80025ec:      	push	{r7, lr}
 80025ee:      	mov	r7, sp
 80025f0:      	sub	sp, #0x10
 80025f2:      	str	r0, [sp, #0x8]
 80025f4:      	str	r1, [sp, #0xc]
 80025f6:      	ldr	r0, [r0]
 80025f8:      	bl	0x8002578 <core::fmt::Write::write_char::hc548982c2bdfa774> @ imm = #-0x84
 80025fc:      	str	r0, [sp, #0x4]
 80025fe:      	b	0x8002600 <<&mut W as core::fmt::Write>::write_char::h0d15c40b7cd4d1e8+0x14> @ imm = #-0x2
 8002600:      	ldr	r0, [sp, #0x4]
 8002602:      	and	r0, r0, #0x1
 8002606:      	add	sp, #0x10
 8002608:      	pop	{r7, pc}

0800260a <<&mut W as core::fmt::Write>::write_fmt::h5d76e86e0e1909ef>:
 800260a:      	push	{r4, r5, r6, r7, lr}
 800260c:      	add	r7, sp, #0xc
 800260e:      	str	r8, [sp, #-4]!
 8002612:      	sub	sp, #0x20
 8002614:      	mov	r3, r1
 8002616:      	str	r0, [sp, #0x1c]
 8002618:      	ldr	r0, [r0]
 800261a:      	add	r1, sp, #0x4
 800261c:      	mov	r2, r1
 800261e:      	ldm.w	r3, {r4, r5, r6, r8, r12, lr}
 8002622:      	stm.w	r2, {r4, r5, r6, r8, r12, lr}
 8002626:      	bl	0x80025b4 <core::fmt::Write::write_fmt::he797259dfa8bdbe6> @ imm = #-0x76
 800262a:      	str	r0, [sp]
 800262c:      	b	0x800262e <<&mut W as core::fmt::Write>::write_fmt::h5d76e86e0e1909ef+0x24> @ imm = #-0x2
 800262e:      	ldr	r0, [sp]
 8002630:      	and	r0, r0, #0x1
 8002634:      	add	sp, #0x20
 8002636:      	ldr	r8, [sp], #4
 800263a:      	pop	{r4, r5, r6, r7, pc}

0800263c <<&mut W as core::fmt::Write>::write_str::hb93335f8432a1193>:
 800263c:      	push	{r7, lr}
 800263e:      	mov	r7, sp
 8002640:      	sub	sp, #0x10
 8002642:      	str	r0, [sp, #0x4]
 8002644:      	str	r1, [sp, #0x8]
 8002646:      	str	r2, [sp, #0xc]
 8002648:      	ldr	r0, [r0]
 800264a:      	bl	0x800265c <<cortex_m::itm::Port as core::fmt::Write>::write_str::h9e88be8596ebb23c> @ imm = #0xe
 800264e:      	str	r0, [sp]
 8002650:      	b	0x8002652 <<&mut W as core::fmt::Write>::write_str::hb93335f8432a1193+0x16> @ imm = #-0x2
 8002652:      	ldr	r0, [sp]
 8002654:      	and	r0, r0, #0x1
 8002658:      	add	sp, #0x10
 800265a:      	pop	{r7, pc}

0800265c <<cortex_m::itm::Port as core::fmt::Write>::write_str::h9e88be8596ebb23c>:
;     fn write_str(&mut self, s: &str) -> fmt::Result {
 800265c:      	push	{r7, lr}
 800265e:      	mov	r7, sp
 8002660:      	sub	sp, #0x30
 8002662:      	str	r0, [sp, #0x14]
 8002664:      	str	r1, [sp, #0x18]
 8002666:      	str	r2, [sp, #0x1c]
;         write_all(self.0, s.as_bytes());
 8002668:      	ldr	r0, [r0]
 800266a:      	str	r0, [sp, #0x4]
 800266c:      	str	r1, [sp, #0x20]
 800266e:      	str	r2, [sp, #0x24]
 8002670:      	str	r1, [sp, #0x28]
 8002672:      	str	r2, [sp, #0x2c]
 8002674:      	ldr	r0, [sp, #0x28]
 8002676:      	str	r0, [sp, #0x8]
 8002678:      	ldr	r0, [sp, #0x2c]
;         write_all(self.0, s.as_bytes());
 800267a:      	str	r0, [sp, #0xc]
 800267c:      	b	0x800267e <<cortex_m::itm::Port as core::fmt::Write>::write_str::h9e88be8596ebb23c+0x22> @ imm = #-0x2
 800267e:      	ldr	r2, [sp, #0xc]
 8002680:      	ldr	r1, [sp, #0x8]
 8002682:      	ldr	r0, [sp, #0x4]
 8002684:      	bl	0x8002c60 <cortex_m::itm::write_all::h20c33f2583de3788> @ imm = #0x5d8
 8002688:      	b	0x800268a <<cortex_m::itm::Port as core::fmt::Write>::write_str::h9e88be8596ebb23c+0x2e> @ imm = #-0x2
 800268a:      	movs	r0, #0x0
;         Ok(())
 800268c:      	strb	r0, [r7, #-29]
;     }
 8002690:      	ldrb	r0, [r7, #-29]
 8002694:      	add	sp, #0x30
 8002696:      	pop	{r7, pc}

08002698 <cortex_m::itm::write_fmt::hf4c5d891f6526ee8>:
; pub fn write_fmt(port: &mut Stim, args: fmt::Arguments) {
 8002698:      	push	{r4, r5, r6, r7, lr}
 800269a:      	add	r7, sp, #0xc
 800269c:      	str	r11, [sp, #-4]!
 80026a0:      	sub	sp, #0x28
 80026a2:      	mov	r2, r1
 80026a4:      	str	r0, [sp, #0x24]
;     Port(port).write_fmt(args).ok();
 80026a6:      	str	r0, [sp, #0x8]
 80026a8:      	add	r1, sp, #0xc
 80026aa:      	mov	r0, r1
 80026ac:      	ldm.w	r2, {r3, r4, r5, r6, r12, lr}
 80026b0:      	stm.w	r0, {r3, r4, r5, r6, r12, lr}
 80026b4:      	add	r0, sp, #0x8
 80026b6:      	bl	0x80025b4 <core::fmt::Write::write_fmt::he797259dfa8bdbe6> @ imm = #-0x106
 80026ba:      	str	r0, [sp, #0x4]
 80026bc:      	b	0x80026be <cortex_m::itm::write_fmt::hf4c5d891f6526ee8+0x26> @ imm = #-0x2
 80026be:      	ldr	r0, [sp, #0x4]
 80026c0:      	and	r0, r0, #0x1
 80026c4:      	bl	0x8002f74 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hd8db295fc0498589E> @ imm = #0x8ac
 80026c8:      	b	0x80026ca <cortex_m::itm::write_fmt::hf4c5d891f6526ee8+0x32> @ imm = #-0x2
; }
 80026ca:      	add	sp, #0x28
 80026cc:      	ldr	r11, [sp], #4
 80026d0:      	pop	{r4, r5, r6, r7, pc}
 80026d2:      	bmi	0x800267e <<cortex_m::itm::Port as core::fmt::Write>::write_str::h9e88be8596ebb23c+0x22> @ imm = #-0x58

080026d4 <core::char::methods::encode_utf8_raw::he1ffd6f2b948f74f>:
 80026d4:      	push	{r7, lr}
 80026d6:      	mov	r7, sp
 80026d8:      	sub	sp, #0xd8
 80026da:      	str	r2, [sp, #0x3c]
 80026dc:      	str	r1, [sp, #0x40]
 80026de:      	str	r0, [sp, #0x44]
 80026e0:      	str	r1, [sp, #0x9c]
 80026e2:      	str	r2, [sp, #0xa0]
 80026e4:      	ldr	r0, [sp, #0x44]
 80026e6:      	bl	0x80028ec <core::char::methods::len_utf8::he18751556ea8abb0> @ imm = #0x202
 80026ea:      	str	r0, [sp, #0x48]
 80026ec:      	b	0x80026ee <core::char::methods::encode_utf8_raw::he1ffd6f2b948f74f+0x1a> @ imm = #-0x2
 80026ee:      	ldr	r1, [sp, #0x3c]
 80026f0:      	ldr	r0, [sp, #0x40]
 80026f2:      	ldr	r2, [sp, #0x48]
 80026f4:      	str	r2, [sp, #0x30]
 80026f6:      	movw	r2, #0x35b4
 80026fa:      	movt	r2, #0x800
 80026fe:      	bl	0x800292e <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h0d7bbd2ad0f0c3d2> @ imm = #0x22c
 8002702:      	str	r0, [sp, #0x34]
 8002704:      	str	r1, [sp, #0x38]
 8002706:      	b	0x8002708 <core::char::methods::encode_utf8_raw::he1ffd6f2b948f74f+0x34> @ imm = #-0x2
 8002708:      	ldr	r0, [sp, #0x38]
 800270a:      	ldr	r1, [sp, #0x34]
 800270c:      	ldr	r2, [sp, #0x30]
 800270e:      	str	r2, [sp, #0x4c]
 8002710:      	str	r1, [sp, #0x50]
 8002712:      	str	r0, [sp, #0x54]
 8002714:      	ldr	r0, [sp, #0x4c]
 8002716:      	subs	r0, #0x1
 8002718:      	mov	r1, r0
 800271a:      	str	r1, [sp, #0x2c]
 800271c:      	cmp	r0, #0x3
 800271e:      	bhi	0x800272a <$t.2>        @ imm = #0x8
 8002720:      	ldr	r1, [sp, #0x2c]
 8002722:      	tbb	[pc, r1]

08002726 <$d.1>:
 8002726:	1b 1f 23 27	.word	0x27231f1b

0800272a <$t.2>:
 800272a:      	ldr	r0, [sp, #0x3c]
 800272c:      	str	r0, [sp, #0x94]
 800272e:      	add	r0, sp, #0x48
 8002730:      	str	r0, [sp, #0x88]
 8002732:      	add	r0, sp, #0x44
 8002734:      	str	r0, [sp, #0x8c]
 8002736:      	add	r0, sp, #0x94
 8002738:      	str	r0, [sp, #0x90]
 800273a:      	ldr	r0, [sp, #0x88]
 800273c:      	str	r0, [sp, #0xcc]
 800273e:      	ldr	r1, [sp, #0x8c]
 8002740:      	str	r1, [sp, #0x1c]
 8002742:      	str	r1, [sp, #0xd0]
 8002744:      	ldr	r1, [sp, #0x90]
 8002746:      	str	r1, [sp, #0x20]
 8002748:      	str	r1, [sp, #0xd4]
 800274a:      	movw	r1, #0x2295
 800274e:      	movt	r1, #0x800
 8002752:      	bl	0x8002490 <core::fmt::ArgumentV1::new::he9576381d322603c> @ imm = #-0x2c6
 8002756:      	str	r0, [sp, #0x24]
 8002758:      	str	r1, [sp, #0x28]
 800275a:      	b	0x8002850 <$t.2+0x126>  @ imm = #0xf2
 800275c:      	ldr	r0, [sp, #0x54]
 800275e:      	cmp	r0, #0x0
 8002760:      	bne	0x800283e <$t.2+0x114>  @ imm = #0xda
 8002762:      	b	0x800272a <$t.2>        @ imm = #-0x3c
 8002764:      	ldr	r0, [sp, #0x54]
 8002766:      	cmp	r0, #0x1
 8002768:      	bhi	0x800281a <$t.2+0xf0>   @ imm = #0xae
 800276a:      	b	0x800272a <$t.2>        @ imm = #-0x44
 800276c:      	ldr	r0, [sp, #0x54]
 800276e:      	cmp	r0, #0x2
 8002770:      	bhi	0x80027e4 <$t.2+0xba>   @ imm = #0x70
 8002772:      	b	0x800272a <$t.2>        @ imm = #-0x4c
 8002774:      	ldr	r0, [sp, #0x54]
 8002776:      	cmp	r0, #0x4
 8002778:      	blo	0x800272a <$t.2>        @ imm = #-0x52
 800277a:      	b	0x800277c <$t.2+0x52>   @ imm = #-0x2
 800277c:      	ldr	r2, [sp, #0x50]
 800277e:      	str	r2, [sp, #0xa4]
 8002780:      	ldr.w	r12, [sp, #0x50]
 8002784:      	add.w	r0, r12, #0x1
 8002788:      	str	r0, [sp, #0xa8]
 800278a:      	ldr	r3, [sp, #0x50]
 800278c:      	adds	r0, r3, #0x2
 800278e:      	str	r0, [sp, #0xac]
 8002790:      	ldr	r1, [sp, #0x50]
 8002792:      	adds	r0, r1, #0x3
 8002794:      	str	r0, [sp, #0xb0]
 8002796:      	ldr	r0, [sp, #0x44]
 8002798:      	lsrs	r0, r0, #0x12
 800279a:      	mov.w	lr, #0x1e
 800279e:      	bfi	r0, lr, #3, #29
 80027a2:      	strb	r0, [r2]
 80027a4:      	ldr	r0, [sp, #0x44]
 80027a6:      	lsrs	r0, r0, #0xc
 80027a8:      	movs	r2, #0x2
 80027aa:      	bfi	r0, r2, #6, #26
 80027ae:      	strb.w	r0, [r12, #0x1]
 80027b2:      	ldr	r0, [sp, #0x44]
 80027b4:      	lsrs	r0, r0, #0x6
 80027b6:      	bfi	r0, r2, #6, #26
 80027ba:      	strb	r0, [r3, #0x2]
 80027bc:      	ldrb.w	r0, [sp, #0x44]
 80027c0:      	bfi	r0, r2, #6, #26
 80027c4:      	strb	r0, [r1, #0x3]
 80027c6:      	b	0x80027c8 <$t.2+0x9e>   @ imm = #-0x2
 80027c8:      	ldr	r1, [sp, #0x3c]
 80027ca:      	ldr	r0, [sp, #0x40]
 80027cc:      	ldr	r2, [sp, #0x48]
 80027ce:      	str	r2, [sp, #0x98]
 80027d0:      	ldr	r2, [sp, #0x98]
 80027d2:      	movw	r3, #0x35c4
 80027d6:      	movt	r3, #0x800
 80027da:      	bl	0x800294a <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::hbc4469b2e70fc152> @ imm = #0x16c
 80027de:      	str	r0, [sp, #0x14]
 80027e0:      	str	r1, [sp, #0x18]
 80027e2:      	b	0x8002848 <$t.2+0x11e>  @ imm = #0x62
 80027e4:      	ldr	r2, [sp, #0x50]
 80027e6:      	str	r2, [sp, #0xb4]
 80027e8:      	ldr	r3, [sp, #0x50]
 80027ea:      	adds	r0, r3, #0x1
 80027ec:      	str	r0, [sp, #0xb8]
 80027ee:      	ldr	r1, [sp, #0x50]
 80027f0:      	adds	r0, r1, #0x2
 80027f2:      	str	r0, [sp, #0xbc]
 80027f4:      	ldr	r0, [sp, #0x44]
 80027f6:      	lsrs	r0, r0, #0xc
 80027f8:      	mov.w	r12, #0xe
 80027fc:      	bfi	r0, r12, #4, #28
 8002800:      	strb	r0, [r2]
 8002802:      	ldr	r0, [sp, #0x44]
 8002804:      	lsrs	r0, r0, #0x6
 8002806:      	movs	r2, #0x2
 8002808:      	bfi	r0, r2, #6, #26
 800280c:      	strb	r0, [r3, #0x1]
 800280e:      	ldrb.w	r0, [sp, #0x44]
 8002812:      	bfi	r0, r2, #6, #26
 8002816:      	strb	r0, [r1, #0x2]
 8002818:      	b	0x80027c8 <$t.2+0x9e>   @ imm = #-0x54
 800281a:      	ldr	r2, [sp, #0x50]
 800281c:      	str	r2, [sp, #0xc0]
 800281e:      	ldr	r1, [sp, #0x50]
 8002820:      	adds	r0, r1, #0x1
 8002822:      	str	r0, [sp, #0xc4]
 8002824:      	ldr	r0, [sp, #0x44]
 8002826:      	lsrs	r0, r0, #0x6
 8002828:      	movs	r3, #0x6
 800282a:      	bfi	r0, r3, #5, #27
 800282e:      	strb	r0, [r2]
 8002830:      	ldrb.w	r0, [sp, #0x44]
 8002834:      	movs	r2, #0x2
 8002836:      	bfi	r0, r2, #6, #26
 800283a:      	strb	r0, [r1, #0x1]
 800283c:      	b	0x80027c8 <$t.2+0x9e>   @ imm = #-0x78
 800283e:      	ldr	r1, [sp, #0x50]
 8002840:      	str	r1, [sp, #0xc8]
 8002842:      	ldr	r0, [sp, #0x44]
 8002844:      	strb	r0, [r1]
 8002846:      	b	0x80027c8 <$t.2+0x9e>   @ imm = #-0x82
 8002848:      	ldr	r1, [sp, #0x18]
 800284a:      	ldr	r0, [sp, #0x14]
 800284c:      	add	sp, #0xd8
 800284e:      	pop	{r7, pc}
 8002850:      	ldr	r0, [sp, #0x1c]
 8002852:      	movw	r1, #0x21cf
 8002856:      	movt	r1, #0x800
 800285a:      	bl	0x8002466 <core::fmt::ArgumentV1::new::h4f22a748c29ed7a2> @ imm = #-0x3f8
 800285e:      	str	r0, [sp, #0xc]
 8002860:      	str	r1, [sp, #0x10]
 8002862:      	b	0x8002864 <$t.2+0x13a>  @ imm = #-0x2
 8002864:      	ldr	r0, [sp, #0x20]
 8002866:      	movw	r1, #0x2295
 800286a:      	movt	r1, #0x800
 800286e:      	bl	0x8002490 <core::fmt::ArgumentV1::new::he9576381d322603c> @ imm = #-0x3e2
 8002872:      	str	r0, [sp, #0x4]
 8002874:      	str	r1, [sp, #0x8]
 8002876:      	b	0x8002878 <$t.2+0x14e>  @ imm = #-0x2
 8002878:      	ldr	r0, [sp, #0x8]
 800287a:      	ldr	r1, [sp, #0x4]
 800287c:      	ldr	r2, [sp, #0x10]
 800287e:      	ldr	r3, [sp, #0xc]
 8002880:      	ldr.w	r12, [sp, #0x28]
 8002884:      	ldr.w	lr, [sp, #0x24]
 8002888:      	str.w	lr, [sp, #0x70]
 800288c:      	str.w	r12, [sp, #0x74]
 8002890:      	str	r3, [sp, #0x78]
 8002892:      	str	r2, [sp, #0x7c]
 8002894:      	str	r1, [sp, #0x80]
 8002896:      	str	r0, [sp, #0x84]
 8002898:      	mov	r0, sp
 800289a:      	movs	r2, #0x3
 800289c:      	str	r2, [r0]
 800289e:      	movw	r1, #0x3610
 80028a2:      	movt	r1, #0x800
 80028a6:      	add	r0, sp, #0x58
 80028a8:      	add	r3, sp, #0x70
 80028aa:      	bl	0x80024e4 <core::fmt::Arguments::new_v1::h58709c59c469008b> @ imm = #-0x3ca
 80028ae:      	b	0x80028b0 <$t.2+0x186>  @ imm = #-0x2
 80028b0:      	movw	r1, #0x3628
 80028b4:      	movt	r1, #0x800
 80028b8:      	add	r0, sp, #0x58
 80028ba:      	bl	0x8001958 <core::panicking::panic_fmt::h46301c7d62ff248a> @ imm = #-0xf66
 80028be:      	trap

080028c0 <core::char::methods::<impl char>::encode_utf8::h44d885552c5736b7>:
 80028c0:      	push	{r7, lr}
 80028c2:      	mov	r7, sp
 80028c4:      	sub	sp, #0x20
 80028c6:      	str	r0, [sp, #0x14]
 80028c8:      	str	r1, [sp, #0x18]
 80028ca:      	str	r2, [sp, #0x1c]
 80028cc:      	bl	0x80026d4 <core::char::methods::encode_utf8_raw::he1ffd6f2b948f74f> @ imm = #-0x1fc
 80028d0:      	str	r0, [sp, #0xc]
 80028d2:      	str	r1, [sp, #0x10]
 80028d4:      	b	0x80028d6 <core::char::methods::<impl char>::encode_utf8::h44d885552c5736b7+0x16> @ imm = #-0x2
 80028d6:      	ldr	r1, [sp, #0x10]
 80028d8:      	ldr	r0, [sp, #0xc]
 80028da:      	bl	0x8002a9a <core::str::converts::from_utf8_unchecked_mut::h9055c15bd20aab22> @ imm = #0x1bc
 80028de:      	str	r0, [sp, #0x4]
 80028e0:      	str	r1, [sp, #0x8]
 80028e2:      	b	0x80028e4 <core::char::methods::<impl char>::encode_utf8::h44d885552c5736b7+0x24> @ imm = #-0x2
 80028e4:      	ldr	r1, [sp, #0x8]
 80028e6:      	ldr	r0, [sp, #0x4]
 80028e8:      	add	sp, #0x20
 80028ea:      	pop	{r7, pc}

080028ec <core::char::methods::len_utf8::he18751556ea8abb0>:
 80028ec:      	sub	sp, #0xc
 80028ee:      	str	r0, [sp]
 80028f0:      	str	r0, [sp, #0x8]
 80028f2:      	cmp	r0, #0x80
 80028f4:      	blo	0x8002902 <core::char::methods::len_utf8::he18751556ea8abb0+0x16> @ imm = #0xa
 80028f6:      	b	0x80028f8 <core::char::methods::len_utf8::he18751556ea8abb0+0xc> @ imm = #-0x2
 80028f8:      	ldr	r0, [sp]
 80028fa:      	cmp.w	r0, #0x800
 80028fe:      	blo	0x8002918 <core::char::methods::len_utf8::he18751556ea8abb0+0x2c> @ imm = #0x16
 8002900:      	b	0x800290e <core::char::methods::len_utf8::he18751556ea8abb0+0x22> @ imm = #0xa
 8002902:      	movs	r0, #0x1
 8002904:      	str	r0, [sp, #0x4]
 8002906:      	b	0x8002908 <core::char::methods::len_utf8::he18751556ea8abb0+0x1c> @ imm = #-0x2
 8002908:      	ldr	r0, [sp, #0x4]
 800290a:      	add	sp, #0xc
 800290c:      	bx	lr
 800290e:      	ldr	r0, [sp]
 8002910:      	cmp.w	r0, #0x10000
 8002914:      	blo	0x8002926 <core::char::methods::len_utf8::he18751556ea8abb0+0x3a> @ imm = #0xe
 8002916:      	b	0x8002920 <core::char::methods::len_utf8::he18751556ea8abb0+0x34> @ imm = #0x6
 8002918:      	movs	r0, #0x2
 800291a:      	str	r0, [sp, #0x4]
 800291c:      	b	0x800291e <core::char::methods::len_utf8::he18751556ea8abb0+0x32> @ imm = #-0x2
 800291e:      	b	0x8002908 <core::char::methods::len_utf8::he18751556ea8abb0+0x1c> @ imm = #-0x1a
 8002920:      	movs	r0, #0x4
 8002922:      	str	r0, [sp, #0x4]
 8002924:      	b	0x800292c <core::char::methods::len_utf8::he18751556ea8abb0+0x40> @ imm = #0x4
 8002926:      	movs	r0, #0x3
 8002928:      	str	r0, [sp, #0x4]
 800292a:      	b	0x800292c <core::char::methods::len_utf8::he18751556ea8abb0+0x40> @ imm = #-0x2
 800292c:      	b	0x800291e <core::char::methods::len_utf8::he18751556ea8abb0+0x32> @ imm = #-0x12

0800292e <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h0d7bbd2ad0f0c3d2>:
 800292e:      	push	{r7, lr}
 8002930:      	mov	r7, sp
 8002932:      	sub	sp, #0x18
 8002934:      	str	r0, [sp, #0xc]
 8002936:      	str	r1, [sp, #0x10]
 8002938:      	bl	0x8002a4e <<core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index_mut::hfffd41ece3c35d03> @ imm = #0x112
 800293c:      	str	r0, [sp, #0x4]
 800293e:      	str	r1, [sp, #0x8]
 8002940:      	b	0x8002942 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h0d7bbd2ad0f0c3d2+0x14> @ imm = #-0x2
 8002942:      	ldr	r1, [sp, #0x8]
 8002944:      	ldr	r0, [sp, #0x4]
 8002946:      	add	sp, #0x18
 8002948:      	pop	{r7, pc}

0800294a <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::hbc4469b2e70fc152>:
 800294a:      	push	{r7, lr}
 800294c:      	mov	r7, sp
 800294e:      	sub	sp, #0x18
 8002950:      	str	r2, [sp]
 8002952:      	mov	r2, r1
 8002954:      	mov	r1, r0
 8002956:      	ldr	r0, [sp]
 8002958:      	str	r1, [sp, #0xc]
 800295a:      	str	r2, [sp, #0x10]
 800295c:      	str	r0, [sp, #0x14]
 800295e:      	bl	0x8002a1a <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h78772b91ea6482a9> @ imm = #0xb8
 8002962:      	str	r0, [sp, #0x4]
 8002964:      	str	r1, [sp, #0x8]
 8002966:      	b	0x8002968 <core::slice::index::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::hbc4469b2e70fc152+0x1e> @ imm = #-0x2
 8002968:      	ldr	r1, [sp, #0x8]
 800296a:      	ldr	r0, [sp, #0x4]
 800296c:      	add	sp, #0x18
 800296e:      	pop	{r7, pc}

08002970 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hfea5415643230941>:
 8002970:      	push	{r7, lr}
 8002972:      	mov	r7, sp
 8002974:      	sub	sp, #0x48
 8002976:      	str	r1, [sp, #0x10]
 8002978:      	str	r0, [sp, #0x14]
 800297a:      	str	r0, [sp, #0x1c]
 800297c:      	str	r1, [sp, #0x20]
 800297e:      	str	r2, [sp, #0x24]
 8002980:      	str	r3, [sp, #0x28]
 8002982:      	str	r2, [sp, #0x2c]
 8002984:      	str	r3, [sp, #0x30]
 8002986:      	str	r2, [sp, #0x18]
 8002988:      	b	0x800298a <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hfea5415643230941+0x1a> @ imm = #-0x2
 800298a:      	ldr	r0, [sp, #0x18]
 800298c:      	ldr	r1, [sp, #0x14]
 800298e:      	str	r0, [sp, #0x34]
 8002990:      	str	r1, [sp, #0x38]
 8002992:      	str	r0, [sp, #0x3c]
 8002994:      	str	r1, [sp, #0x40]
 8002996:      	add	r0, r1
 8002998:      	str	r0, [sp, #0x44]
 800299a:      	ldr	r0, [sp, #0x44]
 800299c:      	str	r0, [sp, #0xc]
 800299e:      	b	0x80029a0 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hfea5415643230941+0x30> @ imm = #-0x2
 80029a0:      	ldr	r0, [sp, #0xc]
 80029a2:      	ldr	r1, [sp, #0x10]
 80029a4:      	ldr	r2, [sp, #0x14]
 80029a6:      	subs	r1, r1, r2
 80029a8:      	bl	0x8002a58 <core::ptr::slice_from_raw_parts_mut::h670265fab4850cf2> @ imm = #0xac
 80029ac:      	str	r0, [sp, #0x4]
 80029ae:      	str	r1, [sp, #0x8]
 80029b0:      	b	0x80029b2 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hfea5415643230941+0x42> @ imm = #-0x2
 80029b2:      	ldr	r1, [sp, #0x8]
 80029b4:      	ldr	r0, [sp, #0x4]
 80029b6:      	add	sp, #0x48
 80029b8:      	pop	{r7, pc}

080029ba <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h8c12cebee6a6a1a7>:
 80029ba:      	push	{r7, lr}
 80029bc:      	mov	r7, sp
 80029be:      	sub	sp, #0x30
 80029c0:      	str	r3, [sp, #0xc]
 80029c2:      	str	r2, [sp, #0x10]
 80029c4:      	str	r1, [sp, #0x14]
 80029c6:      	str	r0, [sp, #0x18]
 80029c8:      	ldr.w	r12, [r7, #0x8]
 80029cc:      	str.w	r12, [sp, #0x1c]
 80029d0:      	str	r0, [sp, #0x20]
 80029d2:      	str	r1, [sp, #0x24]
 80029d4:      	str	r2, [sp, #0x28]
 80029d6:      	str	r3, [sp, #0x2c]
 80029d8:      	cmp	r0, r1
 80029da:      	bhi	0x80029e8 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h8c12cebee6a6a1a7+0x2e> @ imm = #0xa
 80029dc:      	b	0x80029de <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h8c12cebee6a6a1a7+0x24> @ imm = #-0x2
 80029de:      	ldr	r0, [sp, #0x14]
 80029e0:      	ldr	r1, [sp, #0xc]
 80029e2:      	cmp	r0, r1
 80029e4:      	bhi	0x8002a06 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h8c12cebee6a6a1a7+0x4c> @ imm = #0x1e
 80029e6:      	b	0x80029f4 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h8c12cebee6a6a1a7+0x3a> @ imm = #0xa
 80029e8:      	ldr	r2, [sp, #0x1c]
 80029ea:      	ldr	r1, [sp, #0x14]
 80029ec:      	ldr	r0, [sp, #0x18]
 80029ee:      	bl	0x800218c <core::slice::index::slice_index_order_fail::h75f96ead05845426> @ imm = #-0x866
 80029f2:      	trap
 80029f4:      	ldr	r3, [sp, #0xc]
 80029f6:      	ldr	r2, [sp, #0x10]
 80029f8:      	ldr	r1, [sp, #0x14]
 80029fa:      	ldr	r0, [sp, #0x18]
 80029fc:      	bl	0x8002970 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::get_unchecked_mut::hfea5415643230941> @ imm = #-0x90
 8002a00:      	str	r0, [sp, #0x4]
 8002a02:      	str	r1, [sp, #0x8]
 8002a04:      	b	0x8002a12 <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h8c12cebee6a6a1a7+0x58> @ imm = #0xa
 8002a06:      	ldr	r2, [sp, #0x1c]
 8002a08:      	ldr	r1, [sp, #0xc]
 8002a0a:      	ldr	r0, [sp, #0x14]
 8002a0c:      	bl	0x800214a <core::slice::index::slice_end_index_len_fail::he10988d0807b900d> @ imm = #-0x8c6
 8002a10:      	trap
 8002a12:      	ldr	r1, [sp, #0x8]
 8002a14:      	ldr	r0, [sp, #0x4]
 8002a16:      	add	sp, #0x30
 8002a18:      	pop	{r7, pc}

08002a1a <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h78772b91ea6482a9>:
 8002a1a:      	push	{r7, lr}
 8002a1c:      	mov	r7, sp
 8002a1e:      	sub	sp, #0x20
 8002a20:      	mov	r12, r3
 8002a22:      	mov	r3, r2
 8002a24:      	mov	r2, r1
 8002a26:      	str	r0, [sp, #0x14]
 8002a28:      	str	r2, [sp, #0x18]
 8002a2a:      	str	r3, [sp, #0x1c]
 8002a2c:      	movs	r1, #0x0
 8002a2e:      	str	r1, [sp, #0xc]
 8002a30:      	str	r0, [sp, #0x10]
 8002a32:      	ldr	r0, [sp, #0xc]
 8002a34:      	ldr	r1, [sp, #0x10]
 8002a36:      	mov	lr, sp
 8002a38:      	str.w	r12, [lr]
 8002a3c:      	bl	0x80029ba <<core::ops::range::Range<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h8c12cebee6a6a1a7> @ imm = #-0x86
 8002a40:      	str	r0, [sp, #0x4]
 8002a42:      	str	r1, [sp, #0x8]
 8002a44:      	b	0x8002a46 <<core::ops::range::RangeTo<usize> as core::slice::index::SliceIndex<[T]>>::index_mut::h78772b91ea6482a9+0x2c> @ imm = #-0x2
 8002a46:      	ldr	r1, [sp, #0x8]
 8002a48:      	ldr	r0, [sp, #0x4]
 8002a4a:      	add	sp, #0x20
 8002a4c:      	pop	{r7, pc}

08002a4e <<core::ops::range::RangeFull as core::slice::index::SliceIndex<[T]>>::index_mut::hfffd41ece3c35d03>:
 8002a4e:      	sub	sp, #0xc
 8002a50:      	str	r0, [sp, #0x4]
 8002a52:      	str	r1, [sp, #0x8]
 8002a54:      	add	sp, #0xc
 8002a56:      	bx	lr

08002a58 <core::ptr::slice_from_raw_parts_mut::h670265fab4850cf2>:
 8002a58:      	push	{r7, lr}
 8002a5a:      	mov	r7, sp
 8002a5c:      	sub	sp, #0x20
 8002a5e:      	str	r1, [sp, #0xc]
 8002a60:      	str	r0, [sp, #0x14]
 8002a62:      	str	r1, [sp, #0x18]
 8002a64:      	str	r0, [sp, #0x1c]
 8002a66:      	str	r0, [sp, #0x10]
 8002a68:      	b	0x8002a6a <core::ptr::slice_from_raw_parts_mut::h670265fab4850cf2+0x12> @ imm = #-0x2
 8002a6a:      	ldr	r1, [sp, #0xc]
 8002a6c:      	ldr	r0, [sp, #0x10]
 8002a6e:      	bl	0x8002a80 <core::ptr::metadata::from_raw_parts_mut::hc4178a7e3296184d> @ imm = #0xe
 8002a72:      	str	r0, [sp, #0x4]
 8002a74:      	str	r1, [sp, #0x8]
 8002a76:      	b	0x8002a78 <core::ptr::slice_from_raw_parts_mut::h670265fab4850cf2+0x20> @ imm = #-0x2
 8002a78:      	ldr	r1, [sp, #0x8]
 8002a7a:      	ldr	r0, [sp, #0x4]
 8002a7c:      	add	sp, #0x20
 8002a7e:      	pop	{r7, pc}

08002a80 <core::ptr::metadata::from_raw_parts_mut::hc4178a7e3296184d>:
 8002a80:      	sub	sp, #0x18
 8002a82:      	str	r0, [sp, #0x10]
 8002a84:      	str	r1, [sp, #0x14]
 8002a86:      	str	r0, [sp, #0x8]
 8002a88:      	str	r1, [sp, #0xc]
 8002a8a:      	ldr	r1, [sp, #0x8]
 8002a8c:      	ldr	r0, [sp, #0xc]
 8002a8e:      	str	r1, [sp]
 8002a90:      	str	r0, [sp, #0x4]
 8002a92:      	ldr	r0, [sp]
 8002a94:      	ldr	r1, [sp, #0x4]
 8002a96:      	add	sp, #0x18
 8002a98:      	bx	lr

08002a9a <core::str::converts::from_utf8_unchecked_mut::h9055c15bd20aab22>:
 8002a9a:      	sub	sp, #0x8
 8002a9c:      	str	r0, [sp]
 8002a9e:      	str	r1, [sp, #0x4]
 8002aa0:      	add	sp, #0x8
 8002aa2:      	bx	lr

08002aa4 <cortex_m::itm::write_words::he1d678ec1bca1698>:
; unsafe fn write_words(stim: &mut Stim, bytes: &[u32]) {
 8002aa4:      	push	{r7, lr}
 8002aa6:      	mov	r7, sp
 8002aa8:      	sub	sp, #0x60
 8002aaa:      	str	r2, [sp, #0x18]
 8002aac:      	mov	r2, r1
 8002aae:      	ldr	r1, [sp, #0x18]
 8002ab0:      	str	r2, [sp, #0x1c]
 8002ab2:      	mov	r2, r0
 8002ab4:      	ldr	r0, [sp, #0x1c]
 8002ab6:      	str	r2, [sp, #0x20]
 8002ab8:      	str	r2, [sp, #0x40]
 8002aba:      	str	r0, [sp, #0x44]
 8002abc:      	str	r1, [sp, #0x48]
;     let mut p = bytes.as_ptr();
 8002abe:      	bl	0x8002dda <core::slice::<impl [T]>::as_ptr::h1139452214bcfc29> @ imm = #0x318
 8002ac2:      	str	r0, [sp, #0x24]
 8002ac4:      	b	0x8002ac6 <cortex_m::itm::write_words::he1d678ec1bca1698+0x22> @ imm = #-0x2
 8002ac6:      	ldr	r0, [sp, #0x18]
 8002ac8:      	movs	r1, #0x0
;     for _ in 0..bytes.len() {
 8002aca:      	str	r1, [sp, #0x28]
 8002acc:      	str	r0, [sp, #0x2c]
 8002ace:      	ldr	r0, [sp, #0x28]
 8002ad0:      	ldr	r1, [sp, #0x2c]
 8002ad2:      	bl	0x8002dfe <<I as core::iter::traits::collect::IntoIterator>::into_iter::h9b0feb88dec8f8ba> @ imm = #0x328
 8002ad6:      	str	r0, [sp, #0x10]
 8002ad8:      	str	r1, [sp, #0x14]
 8002ada:      	b	0x8002adc <cortex_m::itm::write_words::he1d678ec1bca1698+0x38> @ imm = #-0x2
 8002adc:      	ldr	r0, [sp, #0x14]
 8002ade:      	ldr	r1, [sp, #0x10]
 8002ae0:      	str	r1, [sp, #0x30]
 8002ae2:      	str	r0, [sp, #0x34]
 8002ae4:      	b	0x8002ae6 <cortex_m::itm::write_words::he1d678ec1bca1698+0x42> @ imm = #-0x2
 8002ae6:      	add	r0, sp, #0x30
;     for _ in 0..bytes.len() {
 8002ae8:      	bl	0x8002de4 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::hb85537b035db6ee9> @ imm = #0x2f8
 8002aec:      	str	r1, [sp, #0x3c]
 8002aee:      	str	r0, [sp, #0x38]
 8002af0:      	b	0x8002af2 <cortex_m::itm::write_words::he1d678ec1bca1698+0x4e> @ imm = #-0x2
 8002af2:      	ldr	r0, [sp, #0x38]
 8002af4:      	cbz	r0, 0x8002afc <cortex_m::itm::write_words::he1d678ec1bca1698+0x58> @ imm = #0x4
 8002af6:      	b	0x8002af8 <cortex_m::itm::write_words::he1d678ec1bca1698+0x54> @ imm = #-0x2
 8002af8:      	b	0x8002b00 <cortex_m::itm::write_words::he1d678ec1bca1698+0x5c> @ imm = #0x4
 8002afa:      	trap
; }
 8002afc:      	add	sp, #0x60
 8002afe:      	pop	{r7, pc}
;     for _ in 0..bytes.len() {
 8002b00:      	ldr	r0, [sp, #0x3c]
 8002b02:      	str	r0, [sp, #0x4c]
 8002b04:      	str	r0, [sp, #0x50]
;         while !stim.is_fifo_ready() {}
 8002b06:      	b	0x8002b08 <cortex_m::itm::write_words::he1d678ec1bca1698+0x64> @ imm = #-0x2
 8002b08:      	ldr	r0, [sp, #0x20]
 8002b0a:      	bl	0x8002f48 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h350fa9c4259a9d82> @ imm = #0x43a
 8002b0e:      	str	r0, [sp, #0xc]
 8002b10:      	b	0x8002b12 <cortex_m::itm::write_words::he1d678ec1bca1698+0x6e> @ imm = #-0x2
 8002b12:      	ldr	r0, [sp, #0xc]
 8002b14:      	lsls	r0, r0, #0x1f
 8002b16:      	cmp	r0, #0x0
 8002b18:      	beq	0x8002b08 <cortex_m::itm::write_words::he1d678ec1bca1698+0x64> @ imm = #-0x14
 8002b1a:      	b	0x8002b1c <cortex_m::itm::write_words::he1d678ec1bca1698+0x78> @ imm = #-0x2
;         stim.write_u32(ptr::read(p));
 8002b1c:      	ldr	r0, [sp, #0x24]
 8002b1e:      	bl	0x8001754 <core::ptr::read::h55452b78f330b10c> @ imm = #-0x13ce
 8002b22:      	str	r0, [sp, #0x8]
 8002b24:      	b	0x8002b26 <cortex_m::itm::write_words::he1d678ec1bca1698+0x82> @ imm = #-0x2
 8002b26:      	ldr	r1, [sp, #0x8]
 8002b28:      	ldr	r0, [sp, #0x20]
 8002b2a:      	bl	0x8002f28 <cortex_m::peripheral::itm::Stim::write_u32::h7a00afead2caa8a6> @ imm = #0x3fa
 8002b2e:      	b	0x8002b30 <cortex_m::itm::write_words::he1d678ec1bca1698+0x8c> @ imm = #-0x2
;         p = p.offset(1);
 8002b30:      	ldr	r0, [sp, #0x24]
 8002b32:      	str	r0, [sp, #0x54]
 8002b34:      	movs	r1, #0x1
 8002b36:      	str	r1, [sp, #0x58]
 8002b38:      	adds	r0, #0x4
 8002b3a:      	str	r0, [sp, #0x5c]
 8002b3c:      	ldr	r0, [sp, #0x5c]
;         p = p.offset(1);
 8002b3e:      	str	r0, [sp, #0x4]
 8002b40:      	b	0x8002b42 <cortex_m::itm::write_words::he1d678ec1bca1698+0x9e> @ imm = #-0x2
 8002b42:      	ldr	r0, [sp, #0x4]
 8002b44:      	str	r0, [sp, #0x24]
;     for _ in 0..bytes.len() {
 8002b46:      	b	0x8002ae6 <cortex_m::itm::write_words::he1d678ec1bca1698+0x42> @ imm = #-0x64

08002b48 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5>:
; unsafe fn write_aligned_impl(port: &mut Stim, buffer: &[u8]) {
 8002b48:      	push	{r7, lr}
 8002b4a:      	mov	r7, sp
 8002b4c:      	sub	sp, #0x78
 8002b4e:      	str	r2, [sp, #0x30]
 8002b50:      	str	r1, [sp, #0x34]
 8002b52:      	str	r0, [sp, #0x38]
 8002b54:      	str	r0, [sp, #0x44]
 8002b56:      	str	r1, [sp, #0x48]
 8002b58:      	str	r2, [sp, #0x4c]
;     let len = buffer.len();
 8002b5a:      	str	r2, [sp, #0x50]
;     if len == 0 {
 8002b5c:      	cbnz	r2, 0x8002b64 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x1c> @ imm = #0x4
 8002b5e:      	b	0x8002b60 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x18> @ imm = #-0x2
; }
 8002b60:      	add	sp, #0x78
 8002b62:      	pop	{r7, pc}
;     let split = len & !0b11;
 8002b64:      	ldr	r1, [sp, #0x30]
 8002b66:      	ldr	r0, [sp, #0x34]
 8002b68:      	bic	r2, r1, #0x3
 8002b6c:      	mov	r3, r2
 8002b6e:      	str	r3, [sp, #0x28]
 8002b70:      	str	r2, [sp, #0x54]
;         slice::from_raw_parts(buffer.as_ptr() as *const u32, split >> 2),
 8002b72:      	bl	0x8002f6a <core::slice::<impl [T]>::as_ptr::h04b0686983a86fa2> @ imm = #0x3f4
 8002b76:      	str	r0, [sp, #0x2c]
 8002b78:      	b	0x8002b7a <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x32> @ imm = #-0x2
 8002b7a:      	ldr	r0, [sp, #0x28]
 8002b7c:      	ldr	r1, [sp, #0x2c]
 8002b7e:      	str	r1, [sp, #0x20]
 8002b80:      	lsrs	r0, r0, #0x2
 8002b82:      	str	r0, [sp, #0x24]
 8002b84:      	b	0x8002b86 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x3e> @ imm = #-0x2
 8002b86:      	ldr	r1, [sp, #0x24]
 8002b88:      	ldr	r0, [sp, #0x20]
 8002b8a:      	bl	0x8002ec4 <core::slice::raw::from_raw_parts::h90724973c164e925> @ imm = #0x336
 8002b8e:      	str	r0, [sp, #0x18]
 8002b90:      	str	r1, [sp, #0x1c]
 8002b92:      	b	0x8002b94 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x4c> @ imm = #-0x2
;     write_words(
 8002b94:      	ldr	r2, [sp, #0x1c]
 8002b96:      	ldr	r1, [sp, #0x18]
 8002b98:      	ldr	r0, [sp, #0x38]
 8002b9a:      	bl	0x8002aa4 <cortex_m::itm::write_words::he1d678ec1bca1698> @ imm = #-0xfa
 8002b9e:      	b	0x8002ba0 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x58> @ imm = #-0x2
;     let mut left = len & 0b11;
 8002ba0:      	ldr	r1, [sp, #0x30]
 8002ba2:      	ldr	r0, [sp, #0x34]
 8002ba4:      	and	r2, r1, #0x3
 8002ba8:      	str	r2, [sp, #0x3c]
;     let mut ptr = buffer.as_ptr().add(split);
 8002baa:      	bl	0x8002f6a <core::slice::<impl [T]>::as_ptr::h04b0686983a86fa2> @ imm = #0x3bc
 8002bae:      	str	r0, [sp, #0x14]
 8002bb0:      	b	0x8002bb2 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x6a> @ imm = #-0x2
 8002bb2:      	ldr	r0, [sp, #0x14]
 8002bb4:      	ldr	r1, [sp, #0x28]
 8002bb6:      	str	r0, [sp, #0x58]
 8002bb8:      	str	r1, [sp, #0x5c]
 8002bba:      	str	r0, [sp, #0x60]
 8002bbc:      	str	r1, [sp, #0x64]
 8002bbe:      	add	r0, r1
 8002bc0:      	str	r0, [sp, #0x68]
 8002bc2:      	ldr	r0, [sp, #0x68]
;     let mut ptr = buffer.as_ptr().add(split);
 8002bc4:      	str	r0, [sp, #0x40]
 8002bc6:      	b	0x8002bc8 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x80> @ imm = #-0x2
;     if left > 1 {
 8002bc8:      	ldr	r0, [sp, #0x3c]
 8002bca:      	cmp	r0, #0x1
 8002bcc:      	bhi	0x8002bd8 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x90> @ imm = #0x8
 8002bce:      	b	0x8002bd0 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x88> @ imm = #-0x2
;     if left == 1 {
 8002bd0:      	ldr	r0, [sp, #0x3c]
 8002bd2:      	cmp	r0, #0x1
 8002bd4:      	beq	0x8002c40 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0xf8> @ imm = #0x68
 8002bd6:      	b	0x8002b60 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x18> @ imm = #-0x7a
;         while !port.is_fifo_ready() {}
 8002bd8:      	ldr	r0, [sp, #0x38]
 8002bda:      	bl	0x8002f48 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h350fa9c4259a9d82> @ imm = #0x36a
 8002bde:      	str	r0, [sp, #0x10]
 8002be0:      	b	0x8002be2 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x9a> @ imm = #-0x2
 8002be2:      	ldr	r0, [sp, #0x10]
 8002be4:      	lsls	r0, r0, #0x1f
 8002be6:      	cmp	r0, #0x0
 8002be8:      	beq	0x8002bd8 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x90> @ imm = #-0x14
 8002bea:      	b	0x8002bec <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0xa4> @ imm = #-0x2
;         port.write_u16(ptr::read(ptr as *const u16));
 8002bec:      	ldr	r0, [sp, #0x40]
 8002bee:      	bl	0x800177c <core::ptr::read::hd069c41edc936268> @ imm = #-0x1476
 8002bf2:      	str	r0, [sp, #0xc]
 8002bf4:      	b	0x8002bf6 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0xae> @ imm = #-0x2
 8002bf6:      	ldr	r1, [sp, #0xc]
 8002bf8:      	ldr	r0, [sp, #0x38]
 8002bfa:      	bl	0x8002f04 <cortex_m::peripheral::itm::Stim::write_u16::h16b0afe92a293fe3> @ imm = #0x306
 8002bfe:      	b	0x8002c00 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0xb8> @ imm = #-0x2
;         ptr = ptr.offset(2);
 8002c00:      	ldr	r0, [sp, #0x40]
 8002c02:      	str	r0, [sp, #0x6c]
 8002c04:      	movs	r1, #0x2
 8002c06:      	str	r1, [sp, #0x70]
 8002c08:      	adds	r0, #0x2
 8002c0a:      	str	r0, [sp, #0x74]
 8002c0c:      	ldr	r0, [sp, #0x74]
;         ptr = ptr.offset(2);
 8002c0e:      	str	r0, [sp, #0x8]
 8002c10:      	b	0x8002c12 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0xca> @ imm = #-0x2
 8002c12:      	ldr	r0, [sp, #0x8]
 8002c14:      	str	r0, [sp, #0x40]
;         left -= 2;
 8002c16:      	ldr	r0, [sp, #0x3c]
 8002c18:      	subs	r1, r0, #0x2
 8002c1a:      	str	r1, [sp, #0x4]
 8002c1c:      	cmp	r0, #0x2
 8002c1e:      	blo	0x8002c28 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0xe0> @ imm = #0x6
 8002c20:      	b	0x8002c22 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0xda> @ imm = #-0x2
 8002c22:      	ldr	r0, [sp, #0x4]
 8002c24:      	str	r0, [sp, #0x3c]
;     if left > 1 {
 8002c26:      	b	0x8002bd0 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x88> @ imm = #-0x5a
;         left -= 2;
 8002c28:      	movw	r0, #0x36b0
 8002c2c:      	movt	r0, #0x800
 8002c30:      	movw	r2, #0x3694
 8002c34:      	movt	r2, #0x800
 8002c38:      	movs	r1, #0x21
 8002c3a:      	bl	0x8001928 <core::panicking::panic::hd499c3017018cd48> @ imm = #-0x1316
 8002c3e:      	trap
;         while !port.is_fifo_ready() {}
 8002c40:      	ldr	r0, [sp, #0x38]
 8002c42:      	bl	0x8002f48 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h350fa9c4259a9d82> @ imm = #0x302
 8002c46:      	str	r0, [sp]
 8002c48:      	b	0x8002c4a <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x102> @ imm = #-0x2
 8002c4a:      	ldr	r0, [sp]
 8002c4c:      	lsls	r0, r0, #0x1f
 8002c4e:      	cmp	r0, #0x0
 8002c50:      	beq	0x8002c40 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0xf8> @ imm = #-0x14
 8002c52:      	b	0x8002c54 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x10c> @ imm = #-0x2
;         port.write_u8(*ptr);
 8002c54:      	ldr	r0, [sp, #0x38]
 8002c56:      	ldr	r1, [sp, #0x40]
 8002c58:      	ldrb	r1, [r1]
 8002c5a:      	bl	0x8002ee0 <cortex_m::peripheral::itm::Stim::write_u8::hddf7c4b1194c3b9b> @ imm = #0x282
 8002c5e:      	b	0x8002b60 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5+0x18> @ imm = #-0x102

08002c60 <cortex_m::itm::write_all::h20c33f2583de3788>:
; pub fn write_all(port: &mut Stim, buffer: &[u8]) {
 8002c60:      	push	{r7, lr}
 8002c62:      	mov	r7, sp
 8002c64:      	sub	sp, #0x60
 8002c66:      	str	r2, [sp, #0x28]
 8002c68:      	mov	r2, r1
 8002c6a:      	ldr	r1, [sp, #0x28]
 8002c6c:      	str	r2, [sp, #0x2c]
 8002c6e:      	mov	r2, r0
 8002c70:      	ldr	r0, [sp, #0x2c]
 8002c72:      	str	r2, [sp, #0x30]
 8002c74:      	str	r2, [sp, #0x3c]
 8002c76:      	str	r0, [sp, #0x40]
 8002c78:      	str	r1, [sp, #0x44]
;         let mut len = buffer.len();
 8002c7a:      	str	r1, [sp, #0x34]
;         let mut ptr = buffer.as_ptr();
 8002c7c:      	bl	0x8002f6a <core::slice::<impl [T]>::as_ptr::h04b0686983a86fa2> @ imm = #0x2ea
 8002c80:      	str	r0, [sp, #0x38]
 8002c82:      	b	0x8002c84 <cortex_m::itm::write_all::h20c33f2583de3788+0x24> @ imm = #-0x2
;         if len == 0 {
 8002c84:      	ldr	r0, [sp, #0x34]
 8002c86:      	cbnz	r0, 0x8002c8e <cortex_m::itm::write_all::h20c33f2583de3788+0x2e> @ imm = #0x4
 8002c88:      	b	0x8002c8a <cortex_m::itm::write_all::h20c33f2583de3788+0x2a> @ imm = #-0x2
; }
 8002c8a:      	add	sp, #0x60
 8002c8c:      	pop	{r7, pc}
;         if ptr as usize % 2 == 1 {
 8002c8e:      	ldrb.w	r0, [sp, #0x38]
 8002c92:      	lsls	r0, r0, #0x1f
 8002c94:      	cbz	r0, 0x8002ca2 <cortex_m::itm::write_all::h20c33f2583de3788+0x42> @ imm = #0xa
 8002c96:      	b	0x8002c98 <cortex_m::itm::write_all::h20c33f2583de3788+0x38> @ imm = #-0x2
;             while !port.is_fifo_ready() {}
 8002c98:      	ldr	r0, [sp, #0x30]
 8002c9a:      	bl	0x8002f48 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h350fa9c4259a9d82> @ imm = #0x2aa
 8002c9e:      	str	r0, [sp, #0x24]
 8002ca0:      	b	0x8002cae <cortex_m::itm::write_all::h20c33f2583de3788+0x4e> @ imm = #0xa
;         if ptr as usize % 4 == 2 {
 8002ca2:      	ldr	r0, [sp, #0x38]
 8002ca4:      	and	r0, r0, #0x3
 8002ca8:      	cmp	r0, #0x2
 8002caa:      	beq	0x8002d04 <cortex_m::itm::write_all::h20c33f2583de3788+0xa4> @ imm = #0x56
 8002cac:      	b	0x8002d0c <cortex_m::itm::write_all::h20c33f2583de3788+0xac> @ imm = #0x5c
;             while !port.is_fifo_ready() {}
 8002cae:      	ldr	r0, [sp, #0x24]
 8002cb0:      	lsls	r0, r0, #0x1f
 8002cb2:      	cmp	r0, #0x0
 8002cb4:      	beq	0x8002c98 <cortex_m::itm::write_all::h20c33f2583de3788+0x38> @ imm = #-0x20
 8002cb6:      	b	0x8002cb8 <cortex_m::itm::write_all::h20c33f2583de3788+0x58> @ imm = #-0x2
;             port.write_u8(*ptr);
 8002cb8:      	ldr	r0, [sp, #0x30]
 8002cba:      	ldr	r1, [sp, #0x38]
 8002cbc:      	ldrb	r1, [r1]
 8002cbe:      	bl	0x8002ee0 <cortex_m::peripheral::itm::Stim::write_u8::hddf7c4b1194c3b9b> @ imm = #0x21e
 8002cc2:      	b	0x8002cc4 <cortex_m::itm::write_all::h20c33f2583de3788+0x64> @ imm = #-0x2
;             ptr = ptr.offset(1);
 8002cc4:      	ldr	r0, [sp, #0x38]
 8002cc6:      	str	r0, [sp, #0x48]
 8002cc8:      	movs	r1, #0x1
 8002cca:      	str	r1, [sp, #0x4c]
 8002ccc:      	adds	r0, #0x1
 8002cce:      	str	r0, [sp, #0x50]
 8002cd0:      	ldr	r0, [sp, #0x50]
;             ptr = ptr.offset(1);
 8002cd2:      	str	r0, [sp, #0x20]
 8002cd4:      	b	0x8002cd6 <cortex_m::itm::write_all::h20c33f2583de3788+0x76> @ imm = #-0x2
 8002cd6:      	ldr	r0, [sp, #0x20]
 8002cd8:      	str	r0, [sp, #0x38]
;             len -= 1;
 8002cda:      	ldr	r0, [sp, #0x34]
 8002cdc:      	subs	r1, r0, #0x1
 8002cde:      	str	r1, [sp, #0x1c]
 8002ce0:      	cmp	r0, #0x1
 8002ce2:      	blo	0x8002cec <cortex_m::itm::write_all::h20c33f2583de3788+0x8c> @ imm = #0x6
 8002ce4:      	b	0x8002ce6 <cortex_m::itm::write_all::h20c33f2583de3788+0x86> @ imm = #-0x2
 8002ce6:      	ldr	r0, [sp, #0x1c]
 8002ce8:      	str	r0, [sp, #0x34]
;         if ptr as usize % 2 == 1 {
 8002cea:      	b	0x8002ca2 <cortex_m::itm::write_all::h20c33f2583de3788+0x42> @ imm = #-0x4c
;             len -= 1;
 8002cec:      	movw	r0, #0x36b0
 8002cf0:      	movt	r0, #0x800
 8002cf4:      	movw	r2, #0x36d4
 8002cf8:      	movt	r2, #0x800
 8002cfc:      	movs	r1, #0x21
 8002cfe:      	bl	0x8001928 <core::panicking::panic::hd499c3017018cd48> @ imm = #-0x13da
 8002d02:      	trap
;             if len > 1 {
 8002d04:      	ldr	r0, [sp, #0x34]
 8002d06:      	cmp	r0, #0x1
 8002d08:      	bhi	0x8002d22 <cortex_m::itm::write_all::h20c33f2583de3788+0xc2> @ imm = #0x16
 8002d0a:      	b	0x8002d1a <cortex_m::itm::write_all::h20c33f2583de3788+0xba> @ imm = #0xc
;         write_aligned_impl(port, slice::from_raw_parts(ptr, len));
 8002d0c:      	ldr	r0, [sp, #0x38]
 8002d0e:      	ldr	r1, [sp, #0x34]
 8002d10:      	bl	0x8002ea8 <core::slice::raw::from_raw_parts::h53931684aa712778> @ imm = #0x194
 8002d14:      	str	r0, [sp, #0x14]
 8002d16:      	str	r1, [sp, #0x18]
 8002d18:      	b	0x8002d8a <cortex_m::itm::write_all::h20c33f2583de3788+0x12a> @ imm = #0x6e
;                 if len == 1 {
 8002d1a:      	ldr	r0, [sp, #0x34]
 8002d1c:      	cmp	r0, #0x1
 8002d1e:      	beq	0x8002d96 <cortex_m::itm::write_all::h20c33f2583de3788+0x136> @ imm = #0x74
 8002d20:      	b	0x8002c8a <cortex_m::itm::write_all::h20c33f2583de3788+0x2a> @ imm = #-0x9a
;                 while !port.is_fifo_ready() {}
 8002d22:      	ldr	r0, [sp, #0x30]
 8002d24:      	bl	0x8002f48 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h350fa9c4259a9d82> @ imm = #0x220
 8002d28:      	str	r0, [sp, #0x10]
 8002d2a:      	b	0x8002d2c <cortex_m::itm::write_all::h20c33f2583de3788+0xcc> @ imm = #-0x2
 8002d2c:      	ldr	r0, [sp, #0x10]
 8002d2e:      	lsls	r0, r0, #0x1f
 8002d30:      	cmp	r0, #0x0
 8002d32:      	beq	0x8002d22 <cortex_m::itm::write_all::h20c33f2583de3788+0xc2> @ imm = #-0x14
 8002d34:      	b	0x8002d36 <cortex_m::itm::write_all::h20c33f2583de3788+0xd6> @ imm = #-0x2
;                 port.write_u16(ptr::read(ptr as *const u16));
 8002d36:      	ldr	r0, [sp, #0x38]
 8002d38:      	bl	0x800177c <core::ptr::read::hd069c41edc936268> @ imm = #-0x15c0
 8002d3c:      	str	r0, [sp, #0xc]
 8002d3e:      	b	0x8002d40 <cortex_m::itm::write_all::h20c33f2583de3788+0xe0> @ imm = #-0x2
 8002d40:      	ldr	r1, [sp, #0xc]
 8002d42:      	ldr	r0, [sp, #0x30]
 8002d44:      	bl	0x8002f04 <cortex_m::peripheral::itm::Stim::write_u16::h16b0afe92a293fe3> @ imm = #0x1bc
 8002d48:      	b	0x8002d4a <cortex_m::itm::write_all::h20c33f2583de3788+0xea> @ imm = #-0x2
;                 ptr = ptr.offset(2);
 8002d4a:      	ldr	r0, [sp, #0x38]
 8002d4c:      	str	r0, [sp, #0x54]
 8002d4e:      	movs	r1, #0x2
 8002d50:      	str	r1, [sp, #0x58]
 8002d52:      	adds	r0, #0x2
 8002d54:      	str	r0, [sp, #0x5c]
 8002d56:      	ldr	r0, [sp, #0x5c]
;                 ptr = ptr.offset(2);
 8002d58:      	str	r0, [sp, #0x8]
 8002d5a:      	b	0x8002d5c <cortex_m::itm::write_all::h20c33f2583de3788+0xfc> @ imm = #-0x2
 8002d5c:      	ldr	r0, [sp, #0x8]
 8002d5e:      	str	r0, [sp, #0x38]
;                 len -= 2;
 8002d60:      	ldr	r0, [sp, #0x34]
 8002d62:      	subs	r1, r0, #0x2
 8002d64:      	str	r1, [sp, #0x4]
 8002d66:      	cmp	r0, #0x2
 8002d68:      	blo	0x8002d72 <cortex_m::itm::write_all::h20c33f2583de3788+0x112> @ imm = #0x6
 8002d6a:      	b	0x8002d6c <cortex_m::itm::write_all::h20c33f2583de3788+0x10c> @ imm = #-0x2
 8002d6c:      	ldr	r0, [sp, #0x4]
 8002d6e:      	str	r0, [sp, #0x34]
;         if ptr as usize % 4 == 2 {
 8002d70:      	b	0x8002d0c <cortex_m::itm::write_all::h20c33f2583de3788+0xac> @ imm = #-0x68
;                 len -= 2;
 8002d72:      	movw	r0, #0x36b0
 8002d76:      	movt	r0, #0x800
 8002d7a:      	movw	r2, #0x36e4
 8002d7e:      	movt	r2, #0x800
 8002d82:      	movs	r1, #0x21
 8002d84:      	bl	0x8001928 <core::panicking::panic::hd499c3017018cd48> @ imm = #-0x1460
 8002d88:      	trap
;         write_aligned_impl(port, slice::from_raw_parts(ptr, len));
 8002d8a:      	ldr	r2, [sp, #0x18]
 8002d8c:      	ldr	r1, [sp, #0x14]
 8002d8e:      	ldr	r0, [sp, #0x30]
 8002d90:      	bl	0x8002b48 <cortex_m::itm::write_aligned_impl::h6cf403b180c3a9b5> @ imm = #-0x24c
 8002d94:      	b	0x8002c8a <cortex_m::itm::write_all::h20c33f2583de3788+0x2a> @ imm = #-0x10e
;                     while !port.is_fifo_ready() {}
 8002d96:      	ldr	r0, [sp, #0x30]
 8002d98:      	bl	0x8002f48 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h350fa9c4259a9d82> @ imm = #0x1ac
 8002d9c:      	str	r0, [sp]
 8002d9e:      	b	0x8002da0 <cortex_m::itm::write_all::h20c33f2583de3788+0x140> @ imm = #-0x2
 8002da0:      	ldr	r0, [sp]
 8002da2:      	lsls	r0, r0, #0x1f
 8002da4:      	cmp	r0, #0x0
 8002da6:      	beq	0x8002d96 <cortex_m::itm::write_all::h20c33f2583de3788+0x136> @ imm = #-0x14
 8002da8:      	b	0x8002daa <cortex_m::itm::write_all::h20c33f2583de3788+0x14a> @ imm = #-0x2
;                     port.write_u8(*ptr);
 8002daa:      	ldr	r0, [sp, #0x30]
 8002dac:      	ldr	r1, [sp, #0x38]
 8002dae:      	ldrb	r1, [r1]
 8002db0:      	bl	0x8002ee0 <cortex_m::peripheral::itm::Stim::write_u8::hddf7c4b1194c3b9b> @ imm = #0x12c
 8002db4:      	b	0x8002c8a <cortex_m::itm::write_all::h20c33f2583de3788+0x2a> @ imm = #-0x12e

08002db6 <<usize as core::iter::range::Step>::forward_unchecked::h03e8a23c18b0c122>:
 8002db6:      	sub	sp, #0x18
 8002db8:      	str	r0, [sp, #0x4]
 8002dba:      	str	r1, [sp, #0x8]
 8002dbc:      	str	r0, [sp, #0xc]
 8002dbe:      	str	r1, [sp, #0x10]
 8002dc0:      	add	r0, r1
 8002dc2:      	str	r0, [sp, #0x14]
 8002dc4:      	ldr	r0, [sp, #0x14]
 8002dc6:      	str	r0, [sp]
 8002dc8:      	b	0x8002dca <<usize as core::iter::range::Step>::forward_unchecked::h03e8a23c18b0c122+0x14> @ imm = #-0x2
 8002dca:      	ldr	r0, [sp]
 8002dcc:      	add	sp, #0x18
 8002dce:      	bx	lr

08002dd0 <core::clone::impls::<impl core::clone::Clone for usize>::clone::h4dfe456abe2c875e>:
 8002dd0:      	sub	sp, #0x4
 8002dd2:      	str	r0, [sp]
 8002dd4:      	ldr	r0, [r0]
 8002dd6:      	add	sp, #0x4
 8002dd8:      	bx	lr

08002dda <core::slice::<impl [T]>::as_ptr::h1139452214bcfc29>:
 8002dda:      	sub	sp, #0x8
 8002ddc:      	str	r0, [sp]
 8002dde:      	str	r1, [sp, #0x4]
 8002de0:      	add	sp, #0x8
 8002de2:      	bx	lr

08002de4 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::hb85537b035db6ee9>:
 8002de4:      	push	{r7, lr}
 8002de6:      	mov	r7, sp
 8002de8:      	sub	sp, #0x10
 8002dea:      	str	r0, [sp, #0xc]
 8002dec:      	bl	0x8002e08 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h4177ff707c472702> @ imm = #0x18
 8002df0:      	str	r0, [sp, #0x4]
 8002df2:      	str	r1, [sp, #0x8]
 8002df4:      	b	0x8002df6 <core::iter::range::<impl core::iter::traits::iterator::Iterator for core::ops::range::Range<A>>::next::hb85537b035db6ee9+0x12> @ imm = #-0x2
 8002df6:      	ldr	r1, [sp, #0x8]
 8002df8:      	ldr	r0, [sp, #0x4]
 8002dfa:      	add	sp, #0x10
 8002dfc:      	pop	{r7, pc}

08002dfe <<I as core::iter::traits::collect::IntoIterator>::into_iter::h9b0feb88dec8f8ba>:
 8002dfe:      	sub	sp, #0x8
 8002e00:      	str	r0, [sp]
 8002e02:      	str	r1, [sp, #0x4]
 8002e04:      	add	sp, #0x8
 8002e06:      	bx	lr

08002e08 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h4177ff707c472702>:
 8002e08:      	push	{r7, lr}
 8002e0a:      	mov	r7, sp
 8002e0c:      	sub	sp, #0x28
 8002e0e:      	str	r0, [sp, #0x10]
 8002e10:      	str	r0, [sp, #0x20]
 8002e12:      	adds	r1, r0, #0x4
 8002e14:      	bl	0x8002e62 <core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt::h02b717d80559b8a7> @ imm = #0x4a
 8002e18:      	str	r0, [sp, #0x14]
 8002e1a:      	b	0x8002e1c <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h4177ff707c472702+0x14> @ imm = #-0x2
 8002e1c:      	ldr	r0, [sp, #0x14]
 8002e1e:      	lsls	r0, r0, #0x1f
 8002e20:      	cbnz	r0, 0x8002e2a <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h4177ff707c472702+0x22> @ imm = #0x6
 8002e22:      	b	0x8002e24 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h4177ff707c472702+0x1c> @ imm = #-0x2
 8002e24:      	movs	r0, #0x0
 8002e26:      	str	r0, [sp, #0x18]
 8002e28:      	b	0x8002e5a <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h4177ff707c472702+0x52> @ imm = #0x2e
 8002e2a:      	ldr	r0, [sp, #0x10]
 8002e2c:      	bl	0x8002dd0 <core::clone::impls::<impl core::clone::Clone for usize>::clone::h4dfe456abe2c875e> @ imm = #-0x60
 8002e30:      	str	r0, [sp, #0xc]
 8002e32:      	b	0x8002e34 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h4177ff707c472702+0x2c> @ imm = #-0x2
 8002e34:      	ldr	r0, [sp, #0xc]
 8002e36:      	movs	r1, #0x1
 8002e38:      	bl	0x8002db6 <<usize as core::iter::range::Step>::forward_unchecked::h03e8a23c18b0c122> @ imm = #-0x86
 8002e3c:      	mov	r1, r0
 8002e3e:      	str	r1, [sp, #0x8]
 8002e40:      	str	r0, [sp, #0x24]
 8002e42:      	b	0x8002e44 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h4177ff707c472702+0x3c> @ imm = #-0x2
 8002e44:      	ldr	r1, [sp, #0x8]
 8002e46:      	ldr	r0, [sp, #0x10]
 8002e48:      	bl	0x8002e7e <core::mem::replace::hb8d55cb0aed0af2f> @ imm = #0x32
 8002e4c:      	str	r0, [sp, #0x4]
 8002e4e:      	b	0x8002e50 <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h4177ff707c472702+0x48> @ imm = #-0x2
 8002e50:      	ldr	r0, [sp, #0x4]
 8002e52:      	str	r0, [sp, #0x1c]
 8002e54:      	movs	r0, #0x1
 8002e56:      	str	r0, [sp, #0x18]
 8002e58:      	b	0x8002e5a <<core::ops::range::Range<T> as core::iter::range::RangeIteratorImpl>::spec_next::h4177ff707c472702+0x52> @ imm = #-0x2
 8002e5a:      	ldr	r0, [sp, #0x18]
 8002e5c:      	ldr	r1, [sp, #0x1c]
 8002e5e:      	add	sp, #0x28
 8002e60:      	pop	{r7, pc}

08002e62 <core::cmp::impls::<impl core::cmp::PartialOrd for usize>::lt::h02b717d80559b8a7>:
 8002e62:      	sub	sp, #0xc
 8002e64:      	str	r1, [sp]
 8002e66:      	mov	r1, r0
 8002e68:      	ldr	r0, [sp]
 8002e6a:      	str	r1, [sp, #0x4]
 8002e6c:      	str	r0, [sp, #0x8]
 8002e6e:      	ldr	r1, [r1]
 8002e70:      	ldr	r2, [r0]
 8002e72:      	movs	r0, #0x0
 8002e74:      	cmp	r1, r2
 8002e76:      	it	lo
 8002e78:      	movlo	r0, #0x1
 8002e7a:      	add	sp, #0xc
 8002e7c:      	bx	lr

08002e7e <core::mem::replace::hb8d55cb0aed0af2f>:
 8002e7e:      	push	{r7, lr}
 8002e80:      	mov	r7, sp
 8002e82:      	sub	sp, #0x18
 8002e84:      	str	r1, [sp]
 8002e86:      	str	r0, [sp, #0x4]
 8002e88:      	str	r0, [sp, #0xc]
 8002e8a:      	str	r1, [sp, #0x10]
 8002e8c:      	bl	0x800172c <core::ptr::read::h374e35dbeac2a2e8> @ imm = #-0x1764
 8002e90:      	mov	r1, r0
 8002e92:      	str	r1, [sp, #0x8]
 8002e94:      	str	r0, [sp, #0x14]
 8002e96:      	b	0x8002e98 <core::mem::replace::hb8d55cb0aed0af2f+0x1a> @ imm = #-0x2
 8002e98:      	ldr	r1, [sp]
 8002e9a:      	ldr	r0, [sp, #0x4]
 8002e9c:      	bl	0x80017b4 <core::ptr::write::h5fca35581300ff3f> @ imm = #-0x16ec
 8002ea0:      	b	0x8002ea2 <core::mem::replace::hb8d55cb0aed0af2f+0x24> @ imm = #-0x2
 8002ea2:      	ldr	r0, [sp, #0x8]
 8002ea4:      	add	sp, #0x18
 8002ea6:      	pop	{r7, pc}

08002ea8 <core::slice::raw::from_raw_parts::h53931684aa712778>:
 8002ea8:      	push	{r7, lr}
 8002eaa:      	mov	r7, sp
 8002eac:      	sub	sp, #0x10
 8002eae:      	str	r0, [sp, #0x8]
 8002eb0:      	str	r1, [sp, #0xc]
 8002eb2:      	bl	0x80016d8 <core::ptr::slice_from_raw_parts::h0c1332e177cd7772> @ imm = #-0x17de
 8002eb6:      	str	r0, [sp]
 8002eb8:      	str	r1, [sp, #0x4]
 8002eba:      	b	0x8002ebc <core::slice::raw::from_raw_parts::h53931684aa712778+0x14> @ imm = #-0x2
 8002ebc:      	ldr	r1, [sp, #0x4]
 8002ebe:      	ldr	r0, [sp]
 8002ec0:      	add	sp, #0x10
 8002ec2:      	pop	{r7, pc}

08002ec4 <core::slice::raw::from_raw_parts::h90724973c164e925>:
 8002ec4:      	push	{r7, lr}
 8002ec6:      	mov	r7, sp
 8002ec8:      	sub	sp, #0x10
 8002eca:      	str	r0, [sp, #0x8]
 8002ecc:      	str	r1, [sp, #0xc]
 8002ece:      	bl	0x8001702 <core::ptr::slice_from_raw_parts::h51e69d37151844aa> @ imm = #-0x17d0
 8002ed2:      	str	r0, [sp]
 8002ed4:      	str	r1, [sp, #0x4]
 8002ed6:      	b	0x8002ed8 <core::slice::raw::from_raw_parts::h90724973c164e925+0x14> @ imm = #-0x2
 8002ed8:      	ldr	r1, [sp, #0x4]
 8002eda:      	ldr	r0, [sp]
 8002edc:      	add	sp, #0x10
 8002ede:      	pop	{r7, pc}

08002ee0 <cortex_m::peripheral::itm::Stim::write_u8::hddf7c4b1194c3b9b>:
;     pub fn write_u8(&mut self, value: u8) {
 8002ee0:      	push	{r7, lr}
 8002ee2:      	mov	r7, sp
 8002ee4:      	sub	sp, #0x18
 8002ee6:      	str	r0, [sp, #0x4]
 8002ee8:      	mov	r2, r1
 8002eea:      	str	r2, [sp, #0x8]
 8002eec:      	str	r0, [sp, #0xc]
 8002eee:      	strb	r1, [r7, #-5]
 8002ef2:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u8, value) }
 8002ef4:      	b	0x8002ef6 <cortex_m::peripheral::itm::Stim::write_u8::hddf7c4b1194c3b9b+0x16> @ imm = #-0x2
 8002ef6:      	ldr	r1, [sp, #0x8]
 8002ef8:      	ldr	r0, [sp, #0x4]
 8002efa:      	bl	0x80016aa <core::ptr::write_volatile::h5e58d7fcb1beabbf> @ imm = #-0x1854
 8002efe:      	b	0x8002f00 <cortex_m::peripheral::itm::Stim::write_u8::hddf7c4b1194c3b9b+0x20> @ imm = #-0x2
;     }
 8002f00:      	add	sp, #0x18
 8002f02:      	pop	{r7, pc}

08002f04 <cortex_m::peripheral::itm::Stim::write_u16::h16b0afe92a293fe3>:
;     pub fn write_u16(&mut self, value: u16) {
 8002f04:      	push	{r7, lr}
 8002f06:      	mov	r7, sp
 8002f08:      	sub	sp, #0x18
 8002f0a:      	str	r0, [sp, #0x4]
 8002f0c:      	mov	r2, r1
 8002f0e:      	str	r2, [sp, #0x8]
 8002f10:      	str	r0, [sp, #0xc]
 8002f12:      	strh	r1, [r7, #-6]
 8002f16:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get() as *mut u16, value) }
 8002f18:      	b	0x8002f1a <cortex_m::peripheral::itm::Stim::write_u16::h16b0afe92a293fe3+0x16> @ imm = #-0x2
 8002f1a:      	ldr	r1, [sp, #0x8]
 8002f1c:      	ldr	r0, [sp, #0x4]
 8002f1e:      	bl	0x80016c8 <core::ptr::write_volatile::hf14590950d69b22f> @ imm = #-0x185a
 8002f22:      	b	0x8002f24 <cortex_m::peripheral::itm::Stim::write_u16::h16b0afe92a293fe3+0x20> @ imm = #-0x2
;     }
 8002f24:      	add	sp, #0x18
 8002f26:      	pop	{r7, pc}

08002f28 <cortex_m::peripheral::itm::Stim::write_u32::h7a00afead2caa8a6>:
;     pub fn write_u32(&mut self, value: u32) {
 8002f28:      	push	{r7, lr}
 8002f2a:      	mov	r7, sp
 8002f2c:      	sub	sp, #0x18
 8002f2e:      	str	r1, [sp, #0x4]
 8002f30:      	str	r0, [sp, #0x8]
 8002f32:      	str	r0, [sp, #0xc]
 8002f34:      	str	r1, [sp, #0x10]
 8002f36:      	str	r0, [sp, #0x14]
;         unsafe { ptr::write_volatile(self.register.get(), value) }
 8002f38:      	b	0x8002f3a <cortex_m::peripheral::itm::Stim::write_u32::h7a00afead2caa8a6+0x12> @ imm = #-0x2
 8002f3a:      	ldr	r1, [sp, #0x4]
 8002f3c:      	ldr	r0, [sp, #0x8]
 8002f3e:      	bl	0x80016ba <core::ptr::write_volatile::h88226d858decc3f9> @ imm = #-0x1888
 8002f42:      	b	0x8002f44 <cortex_m::peripheral::itm::Stim::write_u32::h7a00afead2caa8a6+0x1c> @ imm = #-0x2
;     }
 8002f44:      	add	sp, #0x18
 8002f46:      	pop	{r7, pc}

08002f48 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h350fa9c4259a9d82>:
;     pub fn is_fifo_ready(&self) -> bool {
 8002f48:      	push	{r7, lr}
 8002f4a:      	mov	r7, sp
 8002f4c:      	sub	sp, #0x10
 8002f4e:      	str	r0, [sp, #0x4]
 8002f50:      	str	r0, [sp, #0x8]
 8002f52:      	str	r0, [sp, #0xc]
;         unsafe { ptr::read_volatile(self.register.get()) & 0b1 == 1 }
 8002f54:      	b	0x8002f56 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h350fa9c4259a9d82+0xe> @ imm = #-0x2
 8002f56:      	ldr	r0, [sp, #0x4]
 8002f58:      	bl	0x8001696 <core::ptr::read_volatile::hced004c4f1adace7> @ imm = #-0x18c6
 8002f5c:      	str	r0, [sp]
 8002f5e:      	b	0x8002f60 <cortex_m::peripheral::itm::Stim::is_fifo_ready::h350fa9c4259a9d82+0x18> @ imm = #-0x2
;     }
 8002f60:      	ldr	r0, [sp]
 8002f62:      	and	r0, r0, #0x1
 8002f66:      	add	sp, #0x10
 8002f68:      	pop	{r7, pc}

08002f6a <core::slice::<impl [T]>::as_ptr::h04b0686983a86fa2>:
 8002f6a:      	sub	sp, #0x8
 8002f6c:      	str	r0, [sp]
 8002f6e:      	str	r1, [sp, #0x4]
 8002f70:      	add	sp, #0x8
 8002f72:      	bx	lr

08002f74 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hd8db295fc0498589E>:
 8002f74:      	sub	sp, #0x8
 8002f76:      	strb.w	r0, [sp, #0x2]
 8002f7a:      	ldrb.w	r1, [sp, #0x2]
 8002f7e:      	lsls	r0, r1, #0x1f
 8002f80:      	cbz	r0, 0x8002f88 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hd8db295fc0498589E+0x14> @ imm = #0x4
 8002f82:      	b	0x8002f84 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hd8db295fc0498589E+0x10> @ imm = #-0x2
 8002f84:      	b	0x8002f90 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hd8db295fc0498589E+0x1c> @ imm = #0x8
 8002f86:      	trap
 8002f88:      	movs	r0, #0x1
 8002f8a:      	strb.w	r0, [sp, #0x3]
 8002f8e:      	b	0x8002f98 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hd8db295fc0498589E+0x24> @ imm = #0x6
 8002f90:      	movs	r0, #0x0
 8002f92:      	strb.w	r0, [sp, #0x3]
 8002f96:      	b	0x8002f98 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hd8db295fc0498589E+0x24> @ imm = #-0x2
 8002f98:      	ldrb.w	r0, [sp, #0x2]
 8002f9c:      	lsls	r0, r0, #0x1f
 8002f9e:      	cbnz	r0, 0x8002faa <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hd8db295fc0498589E+0x36> @ imm = #0x8
 8002fa0:      	b	0x8002fa2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hd8db295fc0498589E+0x2e> @ imm = #-0x2
 8002fa2:      	ldrb.w	r0, [sp, #0x3]
 8002fa6:      	add	sp, #0x8
 8002fa8:      	bx	lr
 8002faa:      	b	0x8002fa2 <_ZN4core6result19Result$LT$T$C$E$GT$2ok17hd8db295fc0498589E+0x2e> @ imm = #-0xc

08002fac <core::ptr::drop_in_place<&mut cortex_m::itm::Port>::h601289d1f86d5056>:
 8002fac:      	sub	sp, #0x4
 8002fae:      	str	r0, [sp]
 8002fb0:      	add	sp, #0x4
 8002fb2:      	bx	lr

08002fb4 <core::sync::atomic::compiler_fence::hfe25789965c2759b>:
 8002fb4:      	push	{r7, lr}
 8002fb6:      	mov	r7, sp
 8002fb8:      	sub	sp, #0x8
 8002fba:      	strb	r0, [r7, #-1]
 8002fbe:      	ldrb	r0, [r7, #-1]
 8002fc2:      	str	r0, [sp]
 8002fc4:      	ldr	r1, [sp]
 8002fc6:      	tbb	[pc, r1]

08002fca <$d.1>:
 8002fca:	04 10 11 12	.word	0x12111004
 8002fce:	13 00		.short	0x0013

08002fd0 <$t.2>:
 8002fd0:      	trap
 8002fd2:      	movw	r0, #0x36f4
 8002fd6:      	movt	r0, #0x800
 8002fda:      	movw	r2, #0x3778
 8002fde:      	movt	r2, #0x800
 8002fe2:      	movs	r1, #0x32
 8002fe4:      	bl	0x8001928 <core::panicking::panic::hd499c3017018cd48> @ imm = #-0x16c0
 8002fe8:      	trap
 8002fea:      	b	0x8002ff2 <$t.2+0x22>   @ imm = #0x4
 8002fec:      	b	0x8002ff2 <$t.2+0x22>   @ imm = #0x2
 8002fee:      	b	0x8002ff2 <$t.2+0x22>   @ imm = #0x0
 8002ff0:      	b	0x8002ff2 <$t.2+0x22>   @ imm = #-0x2
 8002ff2:      	add	sp, #0x8
 8002ff4:      	pop	{r7, pc}

08002ff6 <memset>:
 8002ff6:      	push	{r4, r6, r7, lr}
 8002ff8:      	add	r7, sp, #0x8
 8002ffa:      	cbz	r2, 0x800303c <memset+0x46> @ imm = #0x3e
 8002ffc:      	subs	r3, r2, #0x1
 8002ffe:      	and	r12, r2, #0x3
 8003002:      	cmp	r3, #0x3
 8003004:      	bhs	0x800300a <memset+0x14> @ imm = #0x2
 8003006:      	movs	r2, #0x0
 8003008:      	b	0x800302e <memset+0x38> @ imm = #0x22
 800300a:      	bic	r2, r2, #0x3
 800300e:      	add.w	lr, r0, #0x1
 8003012:      	rsbs	r3, r2, #0
 8003014:      	mvn	r2, #0x3
 8003018:      	add.w	r4, lr, r2
 800301c:      	adds	r2, #0x4
 800301e:      	strb	r1, [r4, #0x6]
 8003020:      	strb	r1, [r4, #0x5]
 8003022:      	strb	r1, [r4, #0x4]
 8003024:      	strb	r1, [r4, #0x3]
 8003026:      	adds	r4, r3, r2
 8003028:      	adds	r4, #0x4
 800302a:      	bne	0x8003018 <memset+0x22> @ imm = #-0x16
 800302c:      	adds	r2, #0x4
 800302e:      	cmp.w	r12, #0x0
 8003032:      	itt	ne
 8003034:      	strbne	r1, [r0, r2]
 8003036:      	cmpne.w	r12, #0x1
 800303a:      	bne	0x800303e <memset+0x48> @ imm = #0x0
 800303c:      	pop	{r4, r6, r7, pc}
 800303e:      	add	r2, r0
 8003040:      	cmp.w	r12, #0x2
 8003044:      	strb	r1, [r2, #0x1]
 8003046:      	it	ne
 8003048:      	strbne	r1, [r2, #0x2]
 800304a:      	pop	{r4, r6, r7, pc}

0800304c <__aeabi_memset>:
 800304c:      	mov	r3, r1
 800304e:      	mov	r1, r2
 8003050:      	mov	r2, r3
 8003052:      	b.w	0x8002ff6 <memset>      @ imm = #-0x60

08003056 <__aeabi_memset4>:
 8003056:      	push	{r4, r6, r7, lr}
 8003058:      	add	r7, sp, #0x8
 800305a:      	mov	r3, r2
 800305c:      	uxtb	r2, r2
 800305e:      	cmp	r1, #0x4
 8003060:      	blo	0x80030d6 <__aeabi_memset4+0x80> @ imm = #0x72
 8003062:      	lsls	r4, r2, #0x10
 8003064:      	sub.w	lr, r1, #0x4
 8003068:      	orr.w	r3, r4, r3, lsl #24
 800306c:      	movs	r4, #0x1
 800306e:      	orr.w	r3, r3, r2, lsl #8
 8003072:      	add.w	r4, r4, lr, lsr #2
 8003076:      	add	r3, r2
 8003078:      	ands	r4, r4, #0x3
 800307c:      	beq	0x8003094 <__aeabi_memset4+0x3e> @ imm = #0x14
 800307e:      	mov	r12, r0
 8003080:      	cmp	r4, #0x1
 8003082:      	str	r3, [r12], #4
 8003086:      	bne	0x800309c <__aeabi_memset4+0x46> @ imm = #0x12
 8003088:      	mov	r1, lr
 800308a:      	mov	r0, r12
 800308c:      	cmp.w	lr, #0xc
 8003090:      	bhs	0x80030c6 <__aeabi_memset4+0x70> @ imm = #0x32
 8003092:      	b	0x80030ae <__aeabi_memset4+0x58> @ imm = #0x18
 8003094:      	cmp.w	lr, #0xc
 8003098:      	bhs	0x80030c6 <__aeabi_memset4+0x70> @ imm = #0x2a
 800309a:      	b	0x80030ae <__aeabi_memset4+0x58> @ imm = #0x10
 800309c:      	cmp	r4, #0x2
 800309e:      	str	r3, [r0, #0x4]
 80030a0:      	bne	0x80030b8 <__aeabi_memset4+0x62> @ imm = #0x14
 80030a2:      	adds	r0, #0x8
 80030a4:      	subs	r1, #0x8
 80030a6:      	mov	r12, r0
 80030a8:      	cmp.w	lr, #0xc
 80030ac:      	bhs	0x80030c6 <__aeabi_memset4+0x70> @ imm = #0x16
 80030ae:      	mov	r0, r12
 80030b0:      	pop.w	{r4, r6, r7, lr}
 80030b4:      	b.w	0x800304c <__aeabi_memset> @ imm = #-0x6c
 80030b8:      	str	r3, [r0, #0x8]
 80030ba:      	adds	r0, #0xc
 80030bc:      	subs	r1, #0xc
 80030be:      	mov	r12, r0
 80030c0:      	cmp.w	lr, #0xc
 80030c4:      	blo	0x80030ae <__aeabi_memset4+0x58> @ imm = #-0x1a
 80030c6:      	subs	r1, #0x10
 80030c8:      	strd	r3, r3, [r0]
 80030cc:      	strd	r3, r3, [r0, #8]
 80030d0:      	adds	r0, #0x10
 80030d2:      	cmp	r1, #0x3
 80030d4:      	bhi	0x80030c6 <__aeabi_memset4+0x70> @ imm = #-0x12
 80030d6:      	mov	r12, r0
 80030d8:      	mov	r0, r12
 80030da:      	pop.w	{r4, r6, r7, lr}
 80030de:      	b.w	0x800304c <__aeabi_memset> @ imm = #-0x96

080030e2 <HardFaultTrampoline>:
 80030e2:      	mov	r0, lr
 80030e4:      	movs	r1, #0x4
 80030e6:      	tst	r0, r1
 80030e8:      	bne	0x80030f0 <HardFaultTrampoline+0xe> @ imm = #0x4
 80030ea:      	mrs	r0, msp
 80030ee:      	b	0x80030f6 <HardFault_>  @ imm = #0x4
 80030f0:      	mrs	r0, psp
 80030f4:      	b	0x80030f6 <HardFault_>  @ imm = #-0x2

080030f6 <HardFault_>:
; pub unsafe extern "C" fn HardFault_(ef: &ExceptionFrame) -> ! {
 80030f6:      	push	{r7, lr}
 80030f8:      	mov	r7, sp
 80030fa:      	sub	sp, #0x8
 80030fc:      	str	r0, [sp, #0x4]
;     loop {
 80030fe:      	b	0x8003100 <HardFault_+0xa> @ imm = #-0x2
 8003100:      	movs	r0, #0x4
;         atomic::compiler_fence(Ordering::SeqCst);
 8003102:      	strb	r0, [r7, #-5]
 8003106:      	ldrb	r0, [r7, #-5]
 800310a:      	bl	0x8001508 <core::sync::atomic::compiler_fence::hb1882d50ead4a622> @ imm = #-0x1c06
 800310e:      	b	0x8003100 <HardFault_+0xa> @ imm = #-0x12
